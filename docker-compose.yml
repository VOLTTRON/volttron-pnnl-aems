services:

  # Proxy that can be configured for HTTP or HTTPS
  proxy:
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=${CERT_RESOLVER}
      - --providers.file.directory=/etc/traefik/dynamic
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/certs/letsencrypt.json
    container_name: ${COMPOSE_PROJECT_NAME}-proxy
    depends_on:
      init:
        condition: service_completed_successfully
    hostname: proxy
    image: traefik:v2.10
    labels:
      - traefik.tls.stores.default.defaultgeneratedcert.resolver=${CERT_RESOLVER}
      - traefik.tls.stores.default.defaultgeneratedcert.domain.main=${HOSTNAME}
      - traefik.tls.stores.default.defaultgeneratedcert.domain.sans=*.${HOSTNAME}
    ports:
      - 80:80
      - 443:443
      - ${TRAEFIK_PORT}:8080
    profiles:
      - proxy
    restart: unless-stopped
    user: root:root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/:/etc/certs/:ro
      - ./certs-traefik.yml:/etc/traefik/dynamic/certs-traefik.yml

  # Application that hosts static files and API
  app:
    build:
      context: ./app
      dockerfile: ./Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    container_name: ${COMPOSE_PROJECT_NAME}-app
    depends_on:
      init:
        condition: service_completed_successfully
      database:
        condition: service_started
    environment:
      - PORT=3000
      - CLUSTER_TYPE=app
      - LOG_TRANSPORTS=${LOGGERS}
      - LOG_FILE_PATH=/app/data/app.log
      - LOG_CONSOLE_LEVEL=info
      - FILE_UPLOAD_PATH=/app/upload/
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_SCHEMA=public
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - AUTH_PROVIDERS=${AUTH_PROVIDERS}
      - PASSWORD_STRENGTH=${PASSWORD_STRENGTH}
      - PASSWORD_VALIDATE=${PASSWORD_VALIDATE}
      - PROXY_PROTOCOL=${PROXY_PROTOCOL}
      - PROXY_HOST=${PROXY_HOST}
      - PROXY_PORT=${PROXY_PORT}
      - ONEID_ISSUER_URL=${ONEID_ISSUER_URL}
      - ONEID_CLIENT_ID=${ONEID_CLIENT_ID}
      - ONEID_CLIENT_SECRET=${ONEID_CLIENT_SECRET}
      - ONEID_REDIRECT_URL=https://${HOSTNAME}${ONEID_REDIRECT_PATH}
      - ONEID_DEFAULT_ROLE=${ONEID_DEFAULT_ROLE}
      - KEYCLOAK_INTERNAL_REALM_URL=${KEYCLOAK_INTERNAL_REALM_URL}
      - KEYCLOAK_REALM_URL=https://${HOSTNAME}${KEYCLOAK_REALM_PATH}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_REDIRECT_URL=https://${HOSTNAME}${KEYCLOAK_REDIRECT_PATH}
      - KEYCLOAK_DEFAULT_ROLE=${KEYCLOAK_DEFAULT_ROLE}
      - EXT_MAP_UNAUTHORIZED=https://${HOSTNAME}
      - EXT_NOMINATIM_AUTHORIZED=http://nominatim:8080
      - EXT_NOMINATIM_UNAUTHORIZED=https://${HOSTNAME}
      - EXT_WIKI_UNAUTHORIZED=https://${HOSTNAME}
      - GRAPHQL_EDITOR=true
      - GRAPHQL_PUBSUB=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    healthcheck:
      test: "curl --fail http://localhost:3000 || exit 1"
      interval: 10s
      timeout: 10s
      retries: 120
    hostname: app
    image: nextapp:${TAG}
    labels:
      - traefik.enable=true
      - traefik.http.services.nextapp.loadbalancer.server.port=3000
      - traefik.http.middlewares.app-security.headers.browserXssFilter=true
      - traefik.http.middlewares.app-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.app-security.headers.forceSTSHeader=true
      - traefik.http.middlewares.app-security.headers.frameDeny=true
      - traefik.http.middlewares.app-security.headers.referrerPolicy=same-origin
      - traefik.http.middlewares.app-security.headers.sslRedirect=true
      - traefik.http.middlewares.app-security.headers.stsSeconds=31536000
      - traefik.http.routers.app-http.entrypoints=web
      - traefik.http.routers.app-http.rule=Host(`${HOSTNAME}`)
      - traefik.http.routers.app-http.middlewares=app-https
      - traefik.http.middlewares.app-https.redirectscheme.scheme=https
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.rule=Host(`${HOSTNAME}`)
      - traefik.http.routers.app.middlewares=app-security
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=${CERT_RESOLVER}
    ports:
      - ${APP_PORT}:3000
    restart: unless-stopped
    user: ${UID}:${GID}
    volumes:
      - app-data:/app/data
      - app-cache:/app/.next/cache
      - app-upload:/app/upload/

  # Runs application services
  services:
    build:
      context: ./app
      dockerfile: ./Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    container_name: ${COMPOSE_PROJECT_NAME}-services
    depends_on:
      init:
        condition: service_completed_successfully
      database:
        condition: service_started
    environment:
      - CLUSTER_TYPE=services
      - LOG_TRANSPORTS=${LOGGERS}
      - LOG_FILE_PATH=/app/data/services.log
      - FILE_UPLOAD_PATH=/app/upload/
      - SEED_DATA_PATH=/app/seed/
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_SCHEMA=public
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - PASSWORD_STRENGTH=${PASSWORD_STRENGTH}
      - PASSWORD_VALIDATE=${PASSWORD_VALIDATE}
      - PROXY_PROTOCOL=${PROXY_PROTOCOL}
      - PROXY_HOST=${PROXY_HOST}
      - PROXY_PORT=${PROXY_PORT}
      - GRAPHQL_PUBSUB=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: "curl http://localhost:3000/api/graphql"
      interval: 10s
      timeout: 10s
      retries: 120
    hostname: services
    image: nextapp:${TAG}
    restart: unless-stopped
    user: ${UID}:${GID}
    volumes:
      - app-data:/app/data
      - app-upload:/app/upload/
      - ./certs/:/etc/certs/:ro
      - ./seed/:/app/seed/:ro

  # Creates self-signed TLS certs for localhost and domain and runs relational database migrations on startup
  init:
    build:
      context: ./
      dockerfile: ./init/Dockerfile
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    command: >
      bash -c '
        if [ ! -f /etc/certs/mkcert-ca.crt ]; then
          mkcert create-ca \
            --key "/etc/certs/mkcert-ca.key" \
            --cert "/etc/certs/mkcert-ca.crt"
        fi;
        if [ ! -f /etc/certs/mkcert-hostname.crt ]; then
          mkcert create-cert \
            --ca-key "/etc/certs/mkcert-ca.key" \
            --ca-cert "/etc/certs/mkcert-ca.crt" \
            --key "/etc/certs/mkcert-hostname.key" \
            --cert "/etc/certs/mkcert-hostname.crt" \
            --domain "${HOSTNAME}"
        fi;
        cd /app/;
        chown ${UID}:${GID} data upload;
        chmod 775 data upload;
        chown ${UID}:${GID} seed;
        chmod 664 /etc/certs/mkcert-ca.crt;
        chmod -R 775 ./lib;
        yarn migrate:deploy;
      '
    container_name: ${COMPOSE_PROJECT_NAME}-init
    depends_on:
      database:
        condition: service_healthy
    environment:
      - UID=${UID}
      - GID=${GID}
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_SCHEMA=public
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
    hostname: init
    image: init:${TAG}
    user: root:root
    volumes:
      - app-data:/app/data/
      - app-upload:/app/upload
      - ./certs/:/etc/certs/
      - ./seed/:/app/seed/:ro

  # Application relational database
  database:
    cap_add:
      - SYS_NICE
    container_name: ${COMPOSE_PROJECT_NAME}-database
    environment:
      - PGUSER=${DATABASE_USERNAME}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 10
    hostname: database
    image: postgis/postgis:16-3.4
    ports:
      - ${DATABASE_PORT}:5432
    restart: unless-stopped
    volumes:
      - database-data:/var/lib/postgresql/data

  # Redis
  redis:
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    hostname: redis
    image: redis:6.2
    restart: unless-stopped

  # Open Street Map Tiles
  maptiles:
    command: [ "--port", "80", "--public_url", "/ext/map", "--verbose" ]
    container_name: ${COMPOSE_PROJECT_NAME}-maptiles
    hostname: map
    image: maptiler/tileserver-gl:latest
    profiles:
      - map
    restart: unless-stopped
    volumes:
      - ./map/:/data/

  # Nominatim container for geocoding
  nominatim:
    container_name: ${COMPOSE_PROJECT_NAME}-nominatim
    environment:
      - PBF_PATH=${PBF_PATH}
      - PBF_URL=${PBF_URL}
      - REPLICATION_URL=${REPLICATION_URL}
      - NOMINATIM_FLATNODE_FILE=/nominatim/cache/flatnode.file
      - NOMINATIM_PASSWORD=${NOMINATIM_DATABASE_PASSWORD}
      - IMPORT_US_POSTCODES=true
      - IMPORT_WIKIPEDIA=true
      - IMPORT_TIGER_ADDRESSES=true
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY}
    hostname: nominatim
    image: mediagis/nominatim:4.4
    profiles:
      - nom
    restart: unless-stopped
    shm_size: 1gb
    volumes:
      - nominatim-data:/var/lib/postgresql/14/main
      - nominatim-cache:/nominatim/cache
      - ./map/:/nominatim/data/

  # Wiki container
  wiki:
    container_name: ${COMPOSE_PROJECT_NAME}-wiki
    depends_on:
      init:
        condition: service_completed_successfully
      wiki-db:
        condition: service_started
    environment:
      - DOCKER_MODS=linuxserver/mods:universal-package-install
      - INSTALL_PACKAGES=ca-certificates
      - APP_URL=https://${HOSTNAME}/ext/wiki
      - DB_HOST=wiki-db
      - DB_PORT=3306
      - DB_USER=${BOOKSTACK_DATABASE_USERNAME}
      - DB_PASS=${BOOKSTACK_DATABASE_PASSWORD}
      - DB_DATABASE=${BOOKSTACK_DATABASE_NAME}
      - AUTH_AUTO_INITIATE=false
      - AUTH_METHOD=oidc
      - OIDC_DISPLAY_NAME_CLAIMS=name
      - OIDC_USER_TO_GROUPS=true
      - OIDC_GROUPS_CLAIM=resource_access.wiki.roles
      - OIDC_ADDITIONAL_SCOPES=roles
      - OIDC_REMOVE_FROM_GROUPS=true
      - OIDC_CLIENT_ID=${BOOKSTACK_KEYCLOAK_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${BOOKSTACK_KEYCLOAK_CLIENT_SECRET}
      - OIDC_ISSUER=https://${HOSTNAME}${KEYCLOAK_REALM_PATH}
      - OIDC_ISSUER_DISCOVER=true
      - CACHE_DRIVER=database
      - SESSION_DRIVER=database
      - SESSION_COOKIE_NAME=auth_session
      - APP_DEBUG=true
      - APP_PROXIES=*
      - DISABLE_EXTERNAL_SERVICES=true
    hostname: wiki
    image: lscr.io/linuxserver/bookstack
    profiles:
      - wiki
    restart: unless-stopped
    volumes:
      - wiki-data:/config
      - wiki-storage:/storage
      - ./certs/:/etc/certs/:ro
      - ./init-wiki.sh:/custom-cont-init.d/init-wiki.sh:ro

  # Wiki database
  wiki-db:
    container_name: ${COMPOSE_PROJECT_NAME}-wiki-db
    environment:
      - MYSQL_ROOT_PASSWORD=${BOOKSTACK_ROOT_PASSWORD}
      - TZ=America/Los_Angeles
      - MYSQL_DATABASE=${BOOKSTACK_DATABASE_NAME}
      - MYSQL_USER=${BOOKSTACK_DATABASE_USERNAME}
      - MYSQL_PASSWORD=${BOOKSTACK_DATABASE_PASSWORD}
    hostname: wiki-db
    image: lscr.io/linuxserver/mariadb
    profiles:
      - wiki
    restart: unless-stopped
    volumes:
      - wiki-data:/config

  # Keycloak for single sign-on
  keycloak:
    command: start
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    environment:
      - KC_HTTP_ENABLED=true
      - KC_PROXY_HEADERS=xforwarded
      - KC_HOSTNAME=${HOSTNAME}
      - KC_HTTP_RELATIVE_PATH=/auth/sso
      - KC_HOSTNAME_STRICT=false
      - KC_OPTIMIZED=true
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/${KEYCLOAK_DATABASE_NAME}
      - KC_DB_USERNAME=${KEYCLOAK_DATABASE_USERNAME}
      - KC_DB_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    hostname: keycloak
    image: quay.io/keycloak/keycloak
    labels:
      - traefik.enable=true
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
      - traefik.http.middlewares.keycloak-security.headers.browserXssFilter=true
      - traefik.http.middlewares.keycloak-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.keycloak-security.headers.forceSTSHeader=true
      - traefik.http.middlewares.keycloak-security.headers.frameDeny=false
      - traefik.http.middlewares.keycloak-security.headers.referrerPolicy=same-origin
      - traefik.http.middlewares.keycloak-security.headers.sslRedirect=true
      - traefik.http.middlewares.keycloak-security.headers.stsSeconds=31536000
      - traefik.http.routers.keycloak-http.entrypoints=web
      - traefik.http.routers.keycloak-http.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/js/`, `/auth/sso/realms/`, `/auth/sso/resources/`, `/auth/sso/robots.txt`)
      - traefik.http.routers.keycloak-http.middlewares=keycloak-https
      - traefik.http.middlewares.keycloak-https.redirectscheme.scheme=https
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/js/`, `/auth/sso/realms/`, `/auth/sso/resources/`, `/auth/sso/robots.txt`)
      - traefik.http.routers.keycloak.middlewares=keycloak-security
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.routers.keycloak.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.routers.keycloak-admin.entrypoints=websecure
      - traefik.http.routers.keycloak-admin.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/admin/`)
      - traefik.http.routers.keycloak-admin.middlewares=keycloak-security
      - traefik.http.routers.keycloak-admin.tls=true
      - traefik.http.routers.keycloak-admin.tls.certresolver=${CERT_RESOLVER}
    ports:
      - ${KEYCLOAK_PORT}:8080
    profiles:
      - sso
    restart: unless-stopped
    volumes:
      - keycloak-cache:/opt/jboss/keycloak/standalone/data

  # Keycloak database
  keycloak-db:
    cap_add:
      - SYS_NICE
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak-db
    environment:
      - PGUSER=${KEYCLOAK_DATABASE_USERNAME}
      - POSTGRES_USER=${KEYCLOAK_DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      - POSTGRES_DB=${KEYCLOAK_DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 10
    hostname: keycloak-db
    image: postgis/postgis:16-3.4
    profiles:
      - sso
    restart: unless-stopped
    volumes:
      - keycloak-data:/var/lib/postgresql/data

volumes:
  app-data:
    driver: local
  app-cache:
    driver: local
  app-upload:
    driver: local
  database-data:
    driver: local
  nominatim-data:
    driver: local
  nominatim-cache:
    driver: local
  wiki-data:
    driver: local
  wiki-storage:
    driver: local
  keycloak-data:
    driver: local
  keycloak-cache:
    driver: local
