export declare enum ColorType {
    Color = "Color",
    Hex = "Hex",
    HexA = "HexA",
    RGB = "RGB",
    RGBA = "RGBA",
    HSL = "HSL",
    HSLA = "HSLA"
}
declare const wordToHex: {
    aliceblue: `#${string}`;
    antiquewhite: `#${string}`;
    aqua: `#${string}`;
    aquamarine: `#${string}`;
    azure: `#${string}`;
    beige: `#${string}`;
    bisque: `#${string}`;
    black: `#${string}`;
    blanchedalmond: `#${string}`;
    blue: `#${string}`;
    blueviolet: `#${string}`;
    brown: `#${string}`;
    burlywood: `#${string}`;
    cadetblue: `#${string}`;
    chartreuse: `#${string}`;
    chocolate: `#${string}`;
    coral: `#${string}`;
    cornflowerblue: `#${string}`;
    cornsilk: `#${string}`;
    crimson: `#${string}`;
    cyan: `#${string}`;
    darkblue: `#${string}`;
    darkcyan: `#${string}`;
    darkgoldenrod: `#${string}`;
    darkgray: `#${string}`;
    darkgrey: `#${string}`;
    darkgreen: `#${string}`;
    darkkhaki: `#${string}`;
    darkmagenta: `#${string}`;
    darkolivegreen: `#${string}`;
    darkorange: `#${string}`;
    darkorchid: `#${string}`;
    darkred: `#${string}`;
    darksalmon: `#${string}`;
    darkseagreen: `#${string}`;
    darkslateblue: `#${string}`;
    darkslategray: `#${string}`;
    darkslategrey: `#${string}`;
    darkturquoise: `#${string}`;
    darkviolet: `#${string}`;
    deeppink: `#${string}`;
    deepskyblue: `#${string}`;
    dimgray: `#${string}`;
    dimgrey: `#${string}`;
    dodgerblue: `#${string}`;
    firebrick: `#${string}`;
    floralwhite: `#${string}`;
    forestgreen: `#${string}`;
    fuchsia: `#${string}`;
    gainsboro: `#${string}`;
    ghostwhite: `#${string}`;
    gold: `#${string}`;
    goldenrod: `#${string}`;
    gray: `#${string}`;
    grey: `#${string}`;
    green: `#${string}`;
    greenyellow: `#${string}`;
    honeydew: `#${string}`;
    hotpink: `#${string}`;
    indianred: `#${string}`;
    indigo: `#${string}`;
    ivory: `#${string}`;
    khaki: `#${string}`;
    lavender: `#${string}`;
    lavenderblush: `#${string}`;
    lawngreen: `#${string}`;
    lemonchiffon: `#${string}`;
    lightblue: `#${string}`;
    lightcoral: `#${string}`;
    lightcyan: `#${string}`;
    lightgoldenrodyellow: `#${string}`;
    lightgray: `#${string}`;
    lightgrey: `#${string}`;
    lightgreen: `#${string}`;
    lightpink: `#${string}`;
    lightsalmon: `#${string}`;
    lightseagreen: `#${string}`;
    lightskyblue: `#${string}`;
    lightslategray: `#${string}`;
    lightslategrey: `#${string}`;
    lightsteelblue: `#${string}`;
    lightyellow: `#${string}`;
    lime: `#${string}`;
    limegreen: `#${string}`;
    linen: `#${string}`;
    magenta: `#${string}`;
    maroon: `#${string}`;
    mediumaquamarine: `#${string}`;
    mediumblue: `#${string}`;
    mediumorchid: `#${string}`;
    mediumpurple: `#${string}`;
    mediumseagreen: `#${string}`;
    mediumslateblue: `#${string}`;
    mediumspringgreen: `#${string}`;
    mediumturquoise: `#${string}`;
    mediumvioletred: `#${string}`;
    midnightblue: `#${string}`;
    mintcream: `#${string}`;
    mistyrose: `#${string}`;
    moccasin: `#${string}`;
    navajowhite: `#${string}`;
    navy: `#${string}`;
    oldlace: `#${string}`;
    olive: `#${string}`;
    olivedrab: `#${string}`;
    orange: `#${string}`;
    orangered: `#${string}`;
    orchid: `#${string}`;
    palegoldenrod: `#${string}`;
    palegreen: `#${string}`;
    paleturquoise: `#${string}`;
    palevioletred: `#${string}`;
    papayawhip: `#${string}`;
    peachpuff: `#${string}`;
    peru: `#${string}`;
    pink: `#${string}`;
    plum: `#${string}`;
    powderblue: `#${string}`;
    purple: `#${string}`;
    rebeccapurple: `#${string}`;
    red: `#${string}`;
    rosybrown: `#${string}`;
    royalblue: `#${string}`;
    saddlebrown: `#${string}`;
    salmon: `#${string}`;
    sandybrown: `#${string}`;
    seagreen: `#${string}`;
    seashell: `#${string}`;
    sienna: `#${string}`;
    silver: `#${string}`;
    skyblue: `#${string}`;
    slateblue: `#${string}`;
    slategray: `#${string}`;
    slategrey: `#${string}`;
    snow: `#${string}`;
    springgreen: `#${string}`;
    steelblue: `#${string}`;
    tan: `#${string}`;
    teal: `#${string}`;
    thistle: `#${string}`;
    tomato: `#${string}`;
    turquoise: `#${string}`;
    violet: `#${string}`;
    wheat: `#${string}`;
    white: `#${string}`;
    whitesmoke: `#${string}`;
    yellow: `#${string}`;
    yellowgreen: `#${string}`;
};
export declare function typeofColor(value: string | number): value is keyof typeof wordToHex;
export declare function typeofHex(value: string | number): value is `#${string}`;
export interface JsonColor {
    name: string;
    hex: `#${string}`;
}
export declare class Color {
    readonly name: string;
    readonly hex: `#${string}`;
    constructor(color: keyof typeof wordToHex);
    constructor(name: string, color: keyof typeof wordToHex);
    constructor(hex: `#${string}`);
    constructor(name: string, hex: `#${string}`);
    constructor(red: number, green: number, blue: number);
    constructor(red: number, green: number, blue: number, alpha: number);
    constructor(name: string, red: number, green: number, blue: number);
    constructor(name: string, red: number, green: number, blue: number, alpha: number);
    static build(builder: JsonColor): Color;
    static parse(value: string): Color;
    static parse(name: string, value: string): Color;
    get red(): number;
    get green(): number;
    get blue(): number;
    get alpha(): number;
    get rgb(): string;
    get rgba(): string;
    get hsl(): string;
    get hsla(): string;
    toString(type: ColorType.Hex | ColorType.HexA): `#${string}`;
    toString(type: ColorType.Color): keyof typeof wordToHex | `#${string}`;
    toString(type: ColorType.RGB | ColorType.RGBA | ColorType.HSL | ColorType.HSLA): string;
    toString(): `#${string}`;
    valueOf(): string;
    [Symbol.toPrimitive](hint: "number"): number;
    [Symbol.toPrimitive](hint: "string"): string;
    [Symbol.toPrimitive](hint: "default"): string;
}
declare const STYLES: {
    readonly reset: "\u001B[0m";
    readonly bright: "\u001B[1m";
    readonly dim: "\u001B[2m";
    readonly underscore: "\u001B[4m";
    readonly blink: "\u001B[5m";
    readonly reverse: "\u001B[7m";
    readonly hidden: "\u001B[8m";
};
declare const COLORS: {
    readonly black: "\u001B[30m";
    readonly red: "\u001B[31m";
    readonly green: "\u001B[32m";
    readonly yellow: "\u001B[33m";
    readonly blue: "\u001B[34m";
    readonly magenta: "\u001B[35m";
    readonly cyan: "\u001B[36m";
    readonly white: "\u001B[37m";
};
declare const BRIGHT_COLORS: {
    readonly brightBlack: "\u001B[90m";
    readonly brightRed: "\u001B[91m";
    readonly brightGreen: "\u001B[92m";
    readonly brightYellow: "\u001B[93m";
    readonly brightBlue: "\u001B[94m";
    readonly brightMagenta: "\u001B[95m";
    readonly brightCyan: "\u001B[96m";
    readonly brightWhite: "\u001B[97m";
};
declare const BACKGROUNDS: {
    readonly bgBlack: "\u001B[40m";
    readonly bgRed: "\u001B[41m";
    readonly bgGreen: "\u001B[42m";
    readonly bgYellow: "\u001B[43m";
    readonly bgBlue: "\u001B[44m";
    readonly bgMagenta: "\u001B[45m";
    readonly bgCyan: "\u001B[46m";
    readonly bgWhite: "\u001B[47m";
};
declare const BRIGHT_BACKGROUNDS: {
    readonly bgBrightBlack: "\u001B[100m";
    readonly bgBrightRed: "\u001B[101m";
    readonly bgBrightGreen: "\u001B[102m";
    readonly bgBrightYellow: "\u001B[103m";
    readonly bgBrightBlue: "\u001B[104m";
    readonly bgBrightMagenta: "\u001B[105m";
    readonly bgBrightCyan: "\u001B[106m";
    readonly bgBrightWhite: "\u001B[107m";
};
export interface RGBColor {
    r: number;
    g: number;
    b: number;
}
export type StyleName = keyof typeof STYLES;
export type ColorName = keyof typeof COLORS;
export type BrightColorName = keyof typeof BRIGHT_COLORS;
export type BackgroundName = keyof typeof BACKGROUNDS;
export type BrightBackgroundName = keyof typeof BRIGHT_BACKGROUNDS;
export type AllColorName = ColorName | BrightColorName;
export type AllBackgroundName = BackgroundName | BrightBackgroundName;
export type ColorInput = AllColorName | RGBColor | `#${string}`;
export type BackgroundInput = AllBackgroundName | RGBColor | `#${string}`;
export type FormatName = StyleName | AllColorName | AllBackgroundName;
export declare function colorize(text: string, options: {
    color?: ColorInput;
    style?: StyleName;
    background?: BackgroundInput;
}): string;
export {};
