type Account {
  accessToken: String
  createdAt: DateTime!
  expiresAt: Int
  id: String!
  idToken: String
  provider: String!
  providerAccountId: String!
  refreshToken: String
  scope: String
  sessionState: String
  tokenType: String
  type: String!
  updatedAt: DateTime!
  user: User
  userId: String
}

input AccountAggregate {
  average: [AccountFields!]
  count: [AccountFields!]
  maximum: [AccountFields!]
  minimum: [AccountFields!]
  sum: [AccountFields!]
}

input AccountCreateInput {
  expiresAt: Int
  idToken: String
  provider: String!
  providerAccountId: String!
  scope: String
  type: String!
  userId: String!
}

enum AccountFields {
  accessToken
  createdAt
  expiresAt
  id
  idToken
  provider
  providerAccountId
  refreshToken
  scope
  sessionState
  tokenType
  type
  updatedAt
  userId
}

input AccountFilter {
  createdAt: DateTimeFilter
  id: StringFilter
  provider: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserFilter
  userId: StringFilter
}

input AccountOrderBy {
  createdAt: OrderBy
  id: OrderBy
  provider: OrderBy
  type: OrderBy
  updatedAt: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input AccountUniqueFilter {
  id: String
}

input AccountUpdateInput {
  expiresAt: Int
  idToken: String
  provider: String
  providerAccountId: String
  scope: String
  type: String
  userId: String
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

type Comment {
  createdAt: DateTime!
  id: String!
  message: String!
  updatedAt: DateTime!
  user: User
  userId: String
}

input CommentAggregate {
  average: [CommentFields!]
  count: [CommentFields!]
  maximum: [CommentFields!]
  minimum: [CommentFields!]
  sum: [CommentFields!]
}

input CommentCreateInput {
  message: String!
}

enum CommentFields {
  createdAt
  id
  message
  updatedAt
  userId
}

input CommentFilter {
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringFilter
  updatedAt: DateTimeFilter
  user: UserFilter
  userId: StringFilter
}

input CommentOrderBy {
  createdAt: OrderBy
  id: OrderBy
  message: OrderBy
  updatedAt: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input CommentUniqueFilter {
  id: String
}

input CommentUpdateInput {
  message: String
}

type Configurations {
  correlation: String
  createdAt: DateTime!
  id: Int!
  label: String!
  message: String
  stage: StageType!
  updatedAt: DateTime!
}

input ConfigurationsAggregate {
  average: [ConfigurationsFields!]
  count: [ConfigurationsFields!]
  maximum: [ConfigurationsFields!]
  minimum: [ConfigurationsFields!]
  sum: [ConfigurationsFields!]
}

enum ConfigurationsFields {
  correlation
  createdAt
  fridayScheduleId
  holidayScheduleId
  id
  label
  message
  mondayScheduleId
  saturdayScheduleId
  setpointId
  stage
  sundayScheduleId
  thursdayScheduleId
  tuesdayScheduleId
  updatedAt
  wednesdayScheduleId
}

input ConfigurationsFilter {
  correlation: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  stage: StageTypeFilter
  updatedAt: DateTimeFilter
}

input ConfigurationsOrderBy {
  createdAt: OrderBy
  id: OrderBy
  updatedAt: OrderBy
}

input ConfigurationsUniqueFilter {
  id: Int
}

input ConfigurationsUpdateInput {
  stage: StageType
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  contains: DateTime
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
}

enum HolidayType {
  Custom
  Disabled
  Enabled
}

input HolidayTypeFilter {
  equals: HolidayType
  in: [HolidayType!]
  not: HolidayTypeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Log {
  createdAt: DateTime!
  expiration: DateTime
  id: String!
  message: String
  type: LogType
  updatedAt: DateTime!
}

input LogAggregate {
  average: [LogFields!]
  count: [LogFields!]
  maximum: [LogFields!]
  minimum: [LogFields!]
  sum: [LogFields!]
}

input LogCreateInput {
  expiration: DateTime
  message: String
  type: LogType
}

enum LogFields {
  createdAt
  expiration
  id
  message
  type
  updatedAt
}

input LogFilter {
  createdAt: DateTimeFilter
  expiration: DateTimeFilter
  id: StringFilter
  message: StringFilter
  type: LogTypeFilter
  updatedAt: DateTimeFilter
}

input LogOrderBy {
  createdAt: OrderBy
  expiration: OrderBy
  id: OrderBy
  message: OrderBy
  type: OrderBy
  updatedAt: OrderBy
}

enum LogType {
  Banner
  Debug
  Error
  Fatal
  Info
  Trace
  Warn
}

input LogTypeFilter {
  equals: LogType
  in: [LogType!]
  not: LogTypeFilter
}

input LogUniqueFilter {
  id: String
}

input LogUpdateInput {
  expiration: DateTime
  message: String
  type: LogType
}

type Mutation {
  """Create a new account."""
  createAccount(create: AccountCreateInput): Account!

  """Create a new comment."""
  createComment(create: CommentCreateInput): Comment!

  """Create a new user."""
  createCurrent(create: UserCreateInput): User!

  """Create a new log."""
  createLog(create: LogCreateInput): Log!

  """Create a new user."""
  createUser(create: UserCreateInput): User!

  """Delete the specified account."""
  deleteAccount(id: String!): Account!

  """Delete the specified comment."""
  deleteComment(id: String!): Comment!

  """Delete the currently logged in user."""
  deleteCurrent: User!

  """Delete the specified log."""
  deleteLog(id: String!): Log!

  """Delete the specified user."""
  deleteUser(id: String!): User!

  """Update the specified account."""
  updateAccount(id: String!, update: AccountUpdateInput): Account!

  """Update the specified comment."""
  updateComment(id: String!, update: CommentUpdateInput): Comment!

  """Update the specified configurations."""
  updateConfigurations(id: Int!, update: ConfigurationsUpdateInput): Configurations!

  """Update the currently logged in user."""
  updateCurrent(update: UserUpdateInput): User!

  """Update the specified log."""
  updateLog(id: String!, update: LogUpdateInput): Log!

  """Update the specified units."""
  updateUnits(id: Int!, update: UnitsUpdateInput): Units!

  """Update the specified user."""
  updateUser(id: String!, update: UserUpdateInput): User!
}

enum OrderBy {
  Asc
  Desc
}

input PagingInput {
  skip: Int!
  take: Int!
}

type Query {
  """Count the number of accounts."""
  countAccounts(where: AccountFilter): Int!

  """Count the number of comments."""
  countComments(where: CommentFilter): Int!

  """Count the number of configurationss."""
  countConfigurationss(where: ConfigurationsFilter): Int!

  """Count the number of logs."""
  countLogs(where: LogFilter): Int!

  """Count the number of unitss."""
  countUnitss(where: UnitsFilter): Int!

  """Count the number of user."""
  countUsers(where: UserFilter): Int!

  """Group a list of accounts."""
  groupAccounts(aggregate: AccountAggregate, by: [AccountFields!]!, where: AccountFilter): [JSON!]!

  """Group a list of comments."""
  groupComments(aggregate: CommentAggregate, by: [CommentFields!]!, where: CommentFilter): [JSON!]!

  """Group a list of configurationss."""
  groupConfigurationss(aggregate: ConfigurationsAggregate, by: [ConfigurationsFields!]!, where: ConfigurationsFilter): [JSON!]!

  """Group a list of logs."""
  groupLogs(aggregate: LogAggregate, by: [LogFields!]!, where: LogFilter): [JSON!]!

  """Group a list of unitss."""
  groupUnitss(aggregate: UnitsAggregate, by: [UnitsFields!]!, where: UnitsFilter): [JSON!]!

  """Group a list of user."""
  groupUsers(aggregate: UserAggregate, by: [UserFields!]!, where: UserFilter): [JSON!]!

  """Read a unique account."""
  readAccount(where: AccountUniqueFilter): Account!

  """Read a list of accounts."""
  readAccounts(distinct: [AccountFields!], orderBy: [AccountOrderBy!], paging: PagingInput, where: AccountFilter): [Account!]!

  """Read a unique comment."""
  readComment(where: CommentUniqueFilter): Comment!

  """Read a list of comments."""
  readComments(distinct: [CommentFields!], orderBy: [CommentOrderBy!], paging: PagingInput, where: CommentFilter): [Comment!]!

  """Read a unique configurations."""
  readConfigurations(where: ConfigurationsUniqueFilter): Configurations!

  """Read a list of configurationss."""
  readConfigurationss(distinct: [ConfigurationsFields!], orderBy: [ConfigurationsOrderBy!], paging: PagingInput, where: ConfigurationsFilter): [Configurations!]!

  """Read the currently logged in user."""
  readCurrent: User!

  """Read a unique log."""
  readLog(where: LogUniqueFilter): Log!

  """Read a list of logs."""
  readLogs(distinct: [LogFields!], orderBy: [LogOrderBy!], paging: PagingInput, where: LogFilter): [Log!]!

  """Read a unique units."""
  readUnits(where: UnitsUniqueFilter): Units!

  """Read a list of unitss."""
  readUnitss(distinct: [UnitsFields!], orderBy: [UnitsOrderBy!], paging: PagingInput, where: UnitsFilter): [Units!]!

  """Read a unique user."""
  readUser(where: UserUniqueFilter): User!

  """Read a list of user."""
  readUsers(distinct: [UserFields!], orderBy: [UserOrderBy!], paging: PagingInput, where: UserFilter): [User!]!
}

enum StageType {
  Complete
  Create
  Delete
  Fail
  Process
  Read
  Update
}

input StageTypeFilter {
  equals: StageType
  in: [StageType!]
  not: StageTypeFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  mode: StringFilterMode
  not: StringFilter
  startsWith: String
}

enum StringFilterMode {
  Default
  Insensitive
}

type Units {
  building: String!
  campus: String!
  compressors: Int!
  configuration: Configurations
  configurationId: Int
  coolingCapacity: Float!
  coolingLockout: Float!
  coolingPeakOffset: Float!
  correlation: String
  createdAt: DateTime!
  earliestStart: Int!
  economizer: Boolean!
  economizerSetpoint: Float!
  heatPump: Boolean!
  heatPumpBackup: Float!
  heatPumpLockout: Float!
  heatingPeakOffset: Float!
  id: Int!
  label: String!
  latestStart: Int!
  message: String
  name: String!
  optimalStartDeviation: Float!
  optimalStartLockout: Float!
  peakLoadExclude: Boolean!
  stage: StageType!
  system: String!
  timezone: String!
  updatedAt: DateTime!
  users: [User!]
  zoneBuilding: String!
  zoneLocation: String!
  zoneMass: String!
  zoneOrientation: String!
}

input UnitsAggregate {
  average: [UnitsFields!]
  count: [UnitsFields!]
  maximum: [UnitsFields!]
  minimum: [UnitsFields!]
  sum: [UnitsFields!]
}

enum UnitsFields {
  building
  campus
  compressors
  configurationId
  controlId
  coolingCapacity
  coolingLockout
  coolingPeakOffset
  correlation
  createdAt
  earliestStart
  economizer
  economizerSetpoint
  heatPump
  heatPumpBackup
  heatPumpLockout
  heatingPeakOffset
  id
  label
  latestStart
  locationId
  message
  name
  optimalStartDeviation
  optimalStartLockout
  peakLoadExclude
  stage
  system
  timezone
  updatedAt
  zoneBuilding
  zoneLocation
  zoneMass
  zoneOrientation
}

input UnitsFilter {
  configurationId: IntFilter
  correlation: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  stage: StageTypeFilter
  updatedAt: DateTimeFilter
}

input UnitsOrderBy {
  createdAt: OrderBy
  id: OrderBy
  updatedAt: OrderBy
}

input UnitsUniqueFilter {
  id: Int
}

input UnitsUpdateInput {
  stage: StageType
}

type User {
  accounts: [Account!]
  comments: [Comment!]
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  preferences: JSON
  role: String
  updatedAt: DateTime!
}

input UserAggregate {
  average: [UserFields!]
  count: [UserFields!]
  maximum: [UserFields!]
  minimum: [UserFields!]
  sum: [UserFields!]
}

input UserCreateInput {
  email: String!
  name: String!
  password: String
  preferences: String
  role: String
}

enum UserFields {
  createdAt
  email
  emailVerified
  id
  image
  name
  preferences
  role
  updatedAt
}

input UserFilter {
  altId: StringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  role: StringFilter
  updatedAt: DateTimeFilter
}

input UserOrderBy {
  createdAt: OrderBy
  email: OrderBy
  id: OrderBy
  name: OrderBy
  role: OrderBy
  updatedAt: OrderBy
}

input UserUniqueFilter {
  id: String
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  preferences: String
  role: String
}