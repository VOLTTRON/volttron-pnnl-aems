{"version":3,"file":"static/js/810.58c9f073.chunk.js","mappings":"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","sources":["routes/Account/Account.tsx","routes/Account/index.tsx"],"sourcesContent":["import \"./style.scss\";\n\nimport {\n  Button,\n  Card,\n  Checkbox,\n  Icon,\n  InputGroup,\n  Intent,\n  Label,\n} from \"@blueprintjs/core\";\n\nimport { DeepPartial } from \"../../utils/types\";\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\nimport {\n  flatten,\n  get,\n  isArray,\n  isEqual,\n  merge,\n  mergeWith,\n  omit,\n  uniq,\n  xor,\n  xorWith,\n} from \"lodash\";\nimport {\n  IUser,\n  createUser,\n  readUsers,\n  selectUsers,\n  filterUsers,\n  selectFilterUsers,\n  IFilter,\n  updateUser,\n  deleteUser,\n} from \"controllers/users/action\";\nimport { updateUser as updateCurrent } from \"controllers/user/action\";\nimport { RoleType } from \"common\";\nimport { selectUser } from \"controllers/user/action\";\nimport { zxcvbn, zxcvbnOptions } from \"@zxcvbn-ts/core\";\nimport * as zxcvbnCommonPackage from \"@zxcvbn-ts/language-common\";\nimport * as zxcvbnEnPackage from \"@zxcvbn-ts/language-en\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { IUnit, readUnits, selectReadUnits } from \"controllers/units/action\";\n\nconst options = {\n  dictionary: {\n    ...zxcvbnCommonPackage.dictionary,\n    ...zxcvbnEnPackage.dictionary,\n  },\n  graphs: zxcvbnCommonPackage.adjacencyGraphs,\n  translations: zxcvbnEnPackage.translations,\n};\nzxcvbnOptions.setOptions(options);\n\ninterface AccountProps extends RootProps {\n  readUsers: () => void;\n  readUnits: () => void;\n  filterUsers: (payload: IFilter) => void;\n  createUser: (payload: DeepPartial<IUser>) => void;\n  updateUser: (payload: DeepPartial<IUser>) => void;\n  deleteUser: (payload: string) => void;\n  updateCurrent: (payload: DeepPartial<IUser>) => void;\n  user?: IUser;\n  accounts?: IUser[];\n  filtered?: IUser[];\n  units?: IUnit[];\n}\n\ninterface AccountState {\n  name: string;\n  email: string;\n  role: string;\n  password: string;\n  verify: string;\n  units: { id: number }[];\n  editing: (DeepPartial<IUser> & { password: string; verify: string }) | null;\n  show: \"create-pw\" | \"create-pwv\" | \"edit-pw\" | \"edit-pwv\" | null;\n}\n\nconst customizer = (v: any, s: any): any => (isArray(s) ? s : v);\n\nclass Account extends React.Component<AccountProps, AccountState> {\n  constructor(props: AccountProps) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      units: [],\n      editing: null,\n      show: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    if (this.isAdmin()) {\n      this.props.readUsers();\n    } else {\n      this.setState({\n        editing: user ? { id: user.id, password: \"\", verify: \"\" } : null,\n      });\n    }\n    this.props.readUnits();\n  }\n\n  handleChange = (field: keyof AccountState, account?: DeepPartial<IUser>) => {\n    return (value: string | number) => {\n      const { editing } = this.state;\n      switch (field) {\n        // @ts-expect-error\n        case \"role\":\n          const role =\n            account === undefined\n              ? this.state.role\n              : get(editing, \"role\", account?.role ?? \"\");\n          value = xor(role.split(\" \"), [value]).join(\" \");\n        // eslint-disable-next-line no-fallthrough\n        case \"name\":\n        case \"email\":\n        case \"password\":\n        case \"verify\":\n          return this.setState(\n            // @ts-expect-error\n            account === undefined\n              ? { [field]: value }\n              : { editing: merge(editing, { [field]: value }) }\n          );\n        case \"units\":\n          return this.setState(\n            // @ts-expect-error\n            account === undefined\n              ? { units: xorWith(this.state.units, [{ id: value }], isEqual) }\n              : {\n                  editing: mergeWith(\n                    {},\n                    editing,\n                    {\n                      units: xorWith(\n                        editing?.units ?? account.units ?? [],\n                        [{ id: value as number }],\n                        isEqual\n                      ),\n                    },\n                    customizer\n                  ),\n                }\n          );\n        default:\n          throw new Error(`Unhandled field passed to handleChange function.`);\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { name, email, role, password } = this.state;\n    this.props.createUser({ name, email, role, password });\n    this.setState({\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      units: [],\n      editing: null,\n      show: null,\n    });\n  };\n\n  handleEdit = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    this.setState({ editing: { id, password: \"\", verify: \"\" } });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { user } = this.props;\n    const account = omit(this.state?.editing, [\n      \"verify\",\n      ...(this.state?.editing?.password ? [] : [\"password\"]),\n    ]);\n    if (this.isAdmin()) {\n      if (account) {\n        this.props.updateUser(account);\n      }\n      this.setState({ editing: null });\n    } else {\n      if (account) {\n        this.props.updateCurrent(account);\n      }\n      this.setState({\n        editing: user ? { id: user.id, password: \"\", verify: \"\" } : null,\n      });\n    }\n  };\n\n  handleDelete = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    if (id !== undefined) {\n      this.props.deleteUser(id);\n    }\n  };\n\n  isCreate() {\n    const { name, email, role, password, verify } = this.state;\n    if (!(name && email && password)) {\n      return false;\n    }\n    const errors = this.getErrors(name, email, role, password, verify);\n    const isErrors =\n      errors.email ||\n      errors.name ||\n      errors.verify ||\n      errors.password?.feedback.warning;\n    return !isErrors;\n  }\n\n  isSave(account: IUser) {\n    const { editing } = this.state;\n    const { name, email, role, password, verify } = mergeWith(\n      {},\n      account,\n      this.state.editing,\n      customizer\n    );\n    const errors = this.getErrors(name, email, role, password, verify);\n    const updated = mergeWith({}, account, editing, customizer);\n    const isErrors =\n      errors.email ||\n      errors.name ||\n      errors.verify ||\n      errors.password?.feedback.warning;\n    const isUpdated = !isEqual(\n      merge({ password: \"\" }, account),\n      omit(updated, [\"verify\"])\n    );\n    return !isErrors && isUpdated;\n  }\n\n  isAdmin() {\n    const { user } = this.props;\n    return RoleType.Admin.granted(...(user?.role.split(\" \") ?? [\"\"]));\n  }\n\n  parseRole(role: string) {\n    const roles = role\n      .split(\" \")\n      .map((v) => RoleType.parse(v)?.name)\n      .filter((v): v is string => !!v);\n    const grants = uniq(\n      flatten(role.split(\" \").map((v) => RoleType.parse(v)?.grants))\n    ).filter((v): v is string => !!v);\n    return { roles, grants };\n  }\n\n  getUnits(ids?: { id: number }[]) {\n    const { units } = this.props;\n    return (units?.filter((v) => !!ids?.find((u) => v.id === u.id)) ?? []).sort(\n      (a, b) => a.label.localeCompare(b.label)\n    );\n  }\n\n  getErrors(\n    name: string,\n    email: string,\n    role: string,\n    password: string | undefined,\n    verify: string\n  ) {\n    const errorName =\n      name !== \"\" && name.length < 2 ? \"User name must be specified.\" : null;\n    const errorEmail =\n      email !== \"\" && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/i.test(email)\n        ? \"Valid email must be specified.\"\n        : null;\n    const errorPw =\n      password === \"\" ? null : zxcvbn(password ?? \"\", [name, email]);\n    const errorPwv =\n      password === \"\" || password === verify\n        ? null\n        : \"New password and verify password must match.\";\n    return {\n      name: errorName,\n      email: errorEmail,\n      password: errorPw,\n      verify: errorPwv,\n    };\n  }\n\n  renderAccount(account?: IUser) {\n    const { units } = this.props;\n    const { show } = this.state;\n    const {\n      name,\n      email,\n      role,\n      password,\n      verify,\n      units: unitIds,\n    } = account\n      ? mergeWith({}, account, this.state.editing, customizer)\n      : this.state;\n    const { roles, grants } = this.parseRole(role);\n    const checked = this.getUnits(unitIds);\n    const showPw = account ? \"edit-pw\" : \"create-pw\";\n    const showPwv = account ? \"edit-pwv\" : \"create-pwv\";\n    const errors = this.getErrors(name, email, role, password, verify);\n    return (\n      <>\n        <div>\n          <Label>\n            <b>Name</b>\n            <InputGroup\n              type=\"text\"\n              value={name}\n              onChange={(e) =>\n                this.handleChange(\"name\", account)(e.target.value)\n              }\n              readOnly={!this.isAdmin()}\n              intent={errors.name ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.name && (\n                    <Tooltip2 content={errors.name}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Email</b>\n            <InputGroup\n              type=\"text\"\n              value={email}\n              onChange={(e) =>\n                this.handleChange(\"email\", account)(e.target.value)\n              }\n              readOnly={!this.isAdmin()}\n              intent={errors.email ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.email && (\n                    <Tooltip2 content={errors.email}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>New Password</b>\n            <InputGroup\n              type={show === showPw ? \"text\" : \"password\"}\n              autoComplete=\"new-password\"\n              value={password}\n              onChange={(e) =>\n                this.handleChange(\"password\", account)(e.target.value)\n              }\n              intent={\n                errors.password &&\n                (errors.password.feedback.warning ||\n                  errors.password.feedback.suggestions.length > 0)\n                  ? errors.password.feedback.warning\n                    ? Intent.DANGER\n                    : Intent.WARNING\n                  : undefined\n              }\n              rightElement={\n                <div className=\"icons\">\n                  {errors.password &&\n                    (errors.password.feedback.warning ||\n                      errors.password.feedback.suggestions.length > 0) && (\n                      <Tooltip2\n                        content={\n                          errors.password.feedback.warning ||\n                          errors.password.feedback.suggestions.join(\" \\n\")\n                        }\n                      >\n                        <Icon\n                          className=\"icon\"\n                          icon={IconNames.INFO_SIGN}\n                          intent={\n                            errors.password.feedback.warning\n                              ? Intent.DANGER\n                              : Intent.WARNING\n                          }\n                        />\n                      </Tooltip2>\n                    )}\n                  <Button\n                    minimal\n                    icon={\n                      show === showPw ? IconNames.EYE_OFF : IconNames.EYE_OPEN\n                    }\n                    onClick={() =>\n                      this.setState({ show: show === showPw ? null : showPw })\n                    }\n                  />\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Verify Password</b>\n            <InputGroup\n              type={show === showPwv ? \"text\" : \"password\"}\n              value={verify}\n              onChange={(e) =>\n                this.handleChange(\"verify\", account)(e.target.value)\n              }\n              intent={\n                errors.verify\n                  ? Intent.DANGER\n                  : errors.verify === undefined\n                  ? undefined\n                  : Intent.NONE\n              }\n              rightElement={\n                <div className=\"icons\">\n                  {errors.verify && (\n                    <Tooltip2 content={errors.verify}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                  <Button\n                    minimal\n                    icon={\n                      show === showPwv ? IconNames.EYE_OFF : IconNames.EYE_OPEN\n                    }\n                    onClick={() =>\n                      this.setState({ show: show === showPwv ? null : showPwv })\n                    }\n                  />\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>Roles</b>\n            {RoleType.values.map((v) => (\n              <Checkbox\n                key={`cb-role-${v.name}`}\n                id={v.name}\n                label={`${v.label} Role`}\n                checked={roles.includes(v.name)}\n                indeterminate={\n                  !roles.includes(v.name) && grants.includes(v.name)\n                }\n                onChange={() => this.handleChange(\"role\", account)(v.name)}\n                disabled={!this.isAdmin()}\n              />\n            ))}\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>Units</b>\n            {units?.map((v) => (\n              <Checkbox\n                key={`cb-unit-${v.id}`}\n                id={String(v.id)}\n                label={v.label}\n                checked={!!checked.find((u) => u.id === v.id)}\n                onChange={() =>\n                  this.handleChange(\"units\", account)(v.id as number)\n                }\n                disabled={!this.isAdmin()}\n              />\n            ))}\n          </Label>\n        </div>\n      </>\n    );\n  }\n\n  renderMyAccount() {\n    const { user } = this.props;\n    if (this.isAdmin() || !user) {\n      return null;\n    }\n    return (\n      <>\n        <h2>My Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount(user)}\n            <div>\n              <Button\n                icon={IconNames.FLOPPY_DISK}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleSave}\n                disabled={!this.isSave(user)}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderCreateAccount() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    return (\n      <>\n        <h2>Create Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount()}\n            <div>\n              <Button\n                icon={IconNames.ADD_TO_ARTIFACT}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleCreate}\n                disabled={!this.isCreate()}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderAccountList() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    return (\n      <>\n        <h1>Accounts</h1>\n        <div className=\"list\">\n          {filtered?.map((account, i) => {\n            return account.id === editing?.id ? (\n              <Card key={account.id || i} interactive>\n                {this.renderAccount(account)}\n                <div>\n                  <Button\n                    icon={IconNames.FLOPPY_DISK}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleSave()}\n                    disabled={!this.isSave(account)}\n                  />\n                  <Button\n                    icon={IconNames.CROSS}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleCancel()}\n                  />\n                </div>\n              </Card>\n            ) : (\n              <Card key={account.id || i} interactive>\n                <div>{account.name}</div>\n                <div>{account.email}</div>\n                <div>{account.role}</div>\n                <div>\n                  <Button\n                    icon={IconNames.EDIT}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleEdit(account)}\n                  />\n                  <Button\n                    icon={IconNames.TRASH}\n                    intent={Intent.WARNING}\n                    minimal\n                    onClick={() => this.handleDelete(account)}\n                  />\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className={\"account\"}>\n        <Header {...this.props} />\n        {this.renderMyAccount()}\n        {this.renderCreateAccount()}\n        {this.renderAccountList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  user: selectUser(state),\n  accounts: selectUsers(state),\n  filtered: selectFilterUsers(state),\n  units: selectReadUnits(state),\n});\n\nconst mapActionToProps = {\n  readUsers,\n  readUnits,\n  filterUsers,\n  createUser,\n  updateUser,\n  deleteUser,\n  updateCurrent,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(Account);\n","import Account from \"./Account\";\nimport RouteBase from \"routes/RouteBase\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Account {...p} />} />;\n\nexport default Root;\n"],"names":["options","dictionary","zxcvbnCommonPackage","zxcvbnEnPackage","graphs","translations","zxcvbnOptions","customizer","v","s","isArray","Account","props","handleChange","field","account","value","editing","state","role","undefined","get","xor","split","join","setState","merge","units","xorWith","id","isEqual","mergeWith","Error","handleCreate","name","email","password","createUser","verify","show","handleEdit","handleCancel","handleSave","user","omit","isAdmin","updateUser","updateCurrent","handleDelete","deleteUser","this","readUsers","readUnits","errors","getErrors","feedback","warning","updated","isErrors","isUpdated","RoleType","granted","roles","map","filter","grants","uniq","flatten","ids","find","u","sort","a","b","label","localeCompare","length","test","zxcvbn","unitIds","parseRole","checked","getUnits","showPw","showPwv","type","onChange","e","target","readOnly","intent","Intent","rightElement","className","content","icon","IconNames","autoComplete","suggestions","minimal","onClick","includes","indeterminate","disabled","String","interactive","renderAccount","isSave","isCreate","filtered","i","renderMyAccount","renderCreateAccount","renderAccountList","React","mapActionToProps","filterUsers","connect","selectUser","accounts","selectUsers","selectFilterUsers","selectReadUnits","RouteBase","renderRoute","p"],"sourceRoot":""}