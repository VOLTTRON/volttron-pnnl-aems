{"version":3,"file":"static/js/29.04227ac1.chunk.js","mappings":"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","sources":["routes/Schedule/Schedule.tsx","routes/Schedule/index.tsx","routes/Schedule/util.ts"],"sourcesContent":["import \"./style.scss\";\n\nimport { Button, Card, Checkbox, Classes, Intent, NumberRange, RangeSlider } from \"@blueprintjs/core\";\nimport {\n  END_TIME_DEFAULT,\n  END_TIME_MAX,\n  START_TIME_DEFAULT,\n  START_TIME_MIN,\n  TIME_PADDING,\n  createScheduleLabel,\n  isScheduleDelete,\n  toDataFormat,\n  toMinutes,\n  toTimeFormat,\n} from \"./util\";\nimport {\n  IFilter,\n  ISchedule,\n  createSchedule,\n  deleteSchedule,\n  filterSchedules,\n  readSchedules,\n  selectFilterSchedules,\n  selectReadSchedules,\n  updateSchedule,\n} from \"controllers/schedules/action\";\nimport { clamp, merge } from \"lodash\";\n\nimport { DeepPartial } from \"../../utils/types\";\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\n\ninterface ScheduleProps extends RootProps {\n  readSchedules: () => void;\n  filterSchedules: (payload: IFilter) => void;\n  createSchedule: (payload: DeepPartial<ISchedule>) => void;\n  updateSchedule: (payload: DeepPartial<ISchedule>) => void;\n  deleteSchedule: (payload: number) => void;\n  schedules?: ISchedule[];\n  filtered?: ISchedule[];\n}\n\nclass Schedule extends React.Component<ScheduleProps, any> {\n  constructor(props: ScheduleProps) {\n    super(props);\n    this.state = {\n      label: createScheduleLabel(\"all\", { startTime: START_TIME_DEFAULT, endTime: END_TIME_DEFAULT }),\n      startTime: START_TIME_DEFAULT,\n      endTime: END_TIME_DEFAULT,\n      occupied: true,\n      editing: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.readSchedules();\n  }\n\n  handleChange = (field: \"label\" | \"occupied\" | \"value\", schedule?: DeepPartial<ISchedule>) => {\n    return (value: string | boolean | NumberRange) => {\n      const { editing } = this.state;\n      switch (field) {\n        case \"label\":\n          return this.setState(\n            schedule === undefined ? { label: value } : { editing: merge(editing, { label: value }) }\n          );\n        case \"occupied\":\n          return this.setState(\n            schedule === undefined ? { occupied: value } : { editing: merge(editing, { occupied: value }) }\n          );\n        case \"value\":\n          const startTime = clamp(\n            (value as NumberRange)[0],\n            START_TIME_MIN,\n            Math.min((value as NumberRange)[1], END_TIME_MAX) - TIME_PADDING\n          );\n          const endTime = clamp(\n            (value as NumberRange)[1],\n            Math.max((value as NumberRange)[0], START_TIME_MIN) + TIME_PADDING,\n            END_TIME_MAX\n          );\n          return this.setState(\n            schedule === undefined\n              ? { label: createScheduleLabel(\"all\", { startTime, endTime }), startTime, endTime }\n              : {\n                  editing: merge(editing, {\n                    label: createScheduleLabel(\"all\", { startTime, endTime }),\n                    startTime,\n                    endTime,\n                  }),\n                }\n          );\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { label, startTime, endTime, occupied } = this.state;\n    this.props.createSchedule({ label, startTime: toDataFormat(startTime), endTime: toDataFormat(endTime), occupied });\n    this.setState({\n      label: createScheduleLabel(\"all\", {\n        startTime: START_TIME_DEFAULT,\n        endTime: END_TIME_DEFAULT,\n      }),\n      startTime: START_TIME_DEFAULT,\n      endTime: END_TIME_DEFAULT,\n      occupied: true,\n      editing: null,\n    });\n  };\n\n  handleEdit = (schedule: DeepPartial<ISchedule>) => {\n    const { id, label, startTime, endTime, occupied } = schedule;\n    this.setState({\n      editing: {\n        id,\n        label,\n        startTime: toMinutes(startTime, false),\n        endTime: toMinutes(endTime, true),\n        occupied,\n      },\n    });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { id, label, startTime, endTime, occupied } = this.state?.editing || {};\n    this.props.updateSchedule({\n      id,\n      label,\n      startTime: toDataFormat(startTime),\n      endTime: toDataFormat(endTime),\n      occupied,\n    });\n    this.setState({ editing: null });\n  };\n\n  handleDelete = (schedule: DeepPartial<ISchedule>) => {\n    const { id } = schedule;\n    if (id !== undefined) {\n      this.props.deleteSchedule(id);\n    }\n  };\n\n  render() {\n    const { filtered } = this.props;\n    const { label, startTime, endTime, occupied, editing } = this.state;\n    return (\n      <div className={\"schedule\"}>\n        <Header {...this.props} />\n        <h2>Create Schedule</h2>\n        <div className=\"create\">\n          <Card interactive>\n            <div>\n              <input\n                className={Classes.INPUT}\n                type=\"text\"\n                value={label}\n                onChange={(e) => this.handleChange(\"label\")(e.target.value)}\n              />\n            </div>\n            <div>\n              <RangeSlider\n                min={START_TIME_MIN}\n                max={END_TIME_MAX}\n                stepSize={5}\n                labelStepSize={240}\n                value={occupied ? [startTime, endTime] : [START_TIME_MIN, START_TIME_MIN]}\n                onChange={this.handleChange(\"value\")}\n                labelRenderer={(v, o) => (o?.isHandleTooltip || (v > 0 && v < 24 * 60) ? toTimeFormat(v) : \"\")}\n                disabled={!occupied}\n              />\n            </div>\n            <div>\n              <Checkbox\n                label=\"Unoccupied\"\n                checked={!occupied}\n                onClick={() => this.handleChange(\"occupied\")(!occupied)}\n              />\n            </div>\n            <div>\n              <Button icon={IconNames.ADD_TO_ARTIFACT} intent={Intent.PRIMARY} onClick={this.handleCreate} minimal />\n            </div>\n          </Card>\n        </div>\n        <h1>Schedules</h1>\n        <div className=\"list\">\n          {filtered?.map((schedule, i) => {\n            return schedule.id === editing?.id ? (\n              <Card key={schedule.id || i} interactive>\n                <div>\n                  <input\n                    className={Classes.INPUT}\n                    type=\"text\"\n                    value={editing.label}\n                    onChange={(e) => this.handleChange(\"label\", schedule)(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <RangeSlider\n                    min={START_TIME_MIN}\n                    max={END_TIME_MAX}\n                    stepSize={5}\n                    labelStepSize={120}\n                    value={editing.occupied ? [editing.startTime, editing.endTime] : [START_TIME_MIN, START_TIME_MIN]}\n                    onChange={this.handleChange(\"value\", schedule)}\n                    labelRenderer={toTimeFormat}\n                    disabled={!editing.occupied}\n                  />\n                </div>\n                <div>\n                  <Checkbox\n                    label=\"Unoccupied\"\n                    checked={!editing.occupied}\n                    onClick={() => this.handleChange(\"occupied\", schedule)(!editing.occupied)}\n                  />\n                </div>\n                <div>\n                  <Button\n                    icon={IconNames.FLOPPY_DISK}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleSave()}\n                  />\n                  <Button icon={IconNames.CROSS} intent={Intent.PRIMARY} minimal onClick={() => this.handleCancel()} />\n                </div>\n              </Card>\n            ) : (\n              <Card key={schedule.id || i} interactive>\n                <div>{schedule.label}</div>\n                <div>\n                  <RangeSlider\n                    min={START_TIME_MIN}\n                    max={END_TIME_MAX}\n                    stepSize={5}\n                    labelStepSize={120}\n                    value={\n                      schedule.occupied\n                        ? [toMinutes(schedule.startTime, false), toMinutes(schedule.endTime, true)]\n                        : [START_TIME_MIN, START_TIME_MIN]\n                    }\n                    labelRenderer={toTimeFormat}\n                    disabled={!schedule.occupied}\n                  />\n                </div>\n                <div>\n                  <Checkbox label=\"Unoccupied\" checked={!schedule.occupied} />\n                </div>\n                <div>\n                  <Button\n                    icon={IconNames.EDIT}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleEdit(schedule)}\n                  />\n                  <Button\n                    icon={IconNames.TRASH}\n                    intent={Intent.WARNING}\n                    minimal\n                    onClick={() => this.handleDelete(schedule)}\n                    disabled={!isScheduleDelete(schedule)}\n                  />\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  schedules: selectReadSchedules(state),\n  filtered: selectFilterSchedules(state),\n});\n\nconst mapActionToProps = { readSchedules, filterSchedules, createSchedule, updateSchedule, deleteSchedule };\n\nexport default connect(mapStateToProps, mapActionToProps)(Schedule);\n","import RouteBase from \"routes/RouteBase\";\nimport Schedule from \"./Schedule\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Schedule {...p} />} />;\n\nexport default Root;\n","import { isNumber, sum } from \"lodash\";\n\nimport { ISchedule } from \"controllers/schedules/action\";\nimport moment from \"moment\";\nimport { DeepPartial } from \"../../utils/types\";\n\nconst TIME_PADDING = 120;\nconst START_TIME_MIN = 0 * 60;\nconst START_TIME_DEFAULT = 8 * 60;\nconst END_TIME_MAX = 24 * 60;\nconst END_TIME_DEFAULT = 18 * 60;\nconst DATA_FORMAT = \"HH:mm\";\nconst TIME_FORMAT = \"h:mm\\xa0a\";\n\ntype Required = \"startTime\" | \"endTime\";\n\nconst toDataFormat = (value: number) =>\n  moment(\"00:00\", [DATA_FORMAT])\n    .add(Math.trunc(value / 60), \"hours\")\n    .add(value % 60, \"minutes\")\n    .format(DATA_FORMAT);\n\nconst toTimeFormat = (value: number) =>\n  moment(\"00:00\", [DATA_FORMAT])\n    .add(Math.trunc(value / 60), \"hours\")\n    .add(value % 60, \"minutes\")\n    .format(TIME_FORMAT);\n\nconst toUpperBound = (value: number, boundary: number, upper?: boolean) => (upper && value === 0 ? boundary : value);\n\nconst toMinutes = (value?: string, upper?: boolean) =>\n  toUpperBound(moment(value, [DATA_FORMAT, TIME_FORMAT]).hours(), 24, upper) * 60 +\n  moment(value, [DATA_FORMAT, TIME_FORMAT]).minutes();\n\nconst createScheduleLabel = (\n  type: \"all\" | Required,\n  schedule:\n    | (DeepPartial<ISchedule> & Pick<ISchedule, Required>)\n    | { occupied?: boolean; startTime: number; endTime: number }\n): string => {\n  const occupied = schedule?.occupied === undefined ? true : schedule.occupied;\n  const startTime = isNumber(schedule.startTime) ? schedule.startTime : toMinutes(schedule.startTime, false);\n  const endTime = isNumber(schedule.endTime) ? schedule.endTime : toMinutes(schedule.endTime, true);\n  switch (type) {\n    case \"startTime\":\n      return `${toTimeFormat(startTime)}`;\n    case \"endTime\":\n      return `${toTimeFormat(endTime)}`;\n    case \"all\":\n    default:\n      return occupied\n        ? startTime === 0 && endTime === 1440\n          ? \"Occupied All Day\"\n          : `Occupied From Start Time: ${toTimeFormat(startTime)} To End Time: ${toTimeFormat(endTime)}`\n        : \"Unoccupied All Day\";\n  }\n};\n\nconst getScheduleMessage = (schedule: DeepPartial<ISchedule> & Pick<ISchedule, Required>): string | undefined => {\n  return undefined;\n};\n\nconst isScheduleValid = (schedule: DeepPartial<ISchedule> & Pick<ISchedule, Required>): boolean => {\n  return getScheduleMessage(schedule) === undefined;\n};\n\nconst isScheduleDelete = (schedule: DeepPartial<ISchedule>) => {\n  return sum(Object.values(schedule?._count || {})) === 0;\n};\n\nexport {\n  TIME_PADDING,\n  START_TIME_MIN,\n  START_TIME_DEFAULT,\n  END_TIME_MAX,\n  END_TIME_DEFAULT,\n  DATA_FORMAT,\n  TIME_FORMAT,\n  toDataFormat,\n  toTimeFormat,\n  toMinutes,\n  createScheduleLabel,\n  getScheduleMessage,\n  isScheduleValid,\n  isScheduleDelete,\n};\n"],"names":["Schedule","props","handleChange","field","schedule","value","editing","state","setState","undefined","label","merge","occupied","startTime","clamp","START_TIME_MIN","Math","min","END_TIME_MAX","TIME_PADDING","endTime","max","createScheduleLabel","handleCreate","createSchedule","toDataFormat","START_TIME_DEFAULT","END_TIME_DEFAULT","handleEdit","id","toMinutes","handleCancel","handleSave","updateSchedule","handleDelete","deleteSchedule","this","readSchedules","filtered","className","interactive","Classes","type","onChange","e","target","stepSize","labelStepSize","labelRenderer","v","o","isHandleTooltip","toTimeFormat","disabled","checked","onClick","icon","IconNames","intent","Intent","minimal","map","i","isScheduleDelete","React","mapActionToProps","filterSchedules","connect","schedules","selectReadSchedules","selectFilterSchedules","RouteBase","renderRoute","p","DATA_FORMAT","TIME_FORMAT","moment","add","trunc","format","upper","boundary","toUpperBound","hours","minutes","isNumber","sum","Object","values","_count"],"sourceRoot":""}