{"version":3,"file":"static/js/854.58182779.chunk.js","mappings":"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","sources":["routes/Setpoint/Setpoint.tsx","routes/Setpoint/index.tsx","routes/Setpoint/util.ts"],"sourcesContent":["import \"./style.scss\";\n\nimport { Button, Card, Classes, Intent, RangeSlider } from \"@blueprintjs/core\";\nimport {\n  COOLING_DEFAULT,\n  COOLING_MAX,\n  DEADBAND_DEFAULT,\n  DEADBAND_MAX,\n  DEADBAND_MIN,\n  HEATING_DEFAULT,\n  HEATING_MIN,\n  SETPOINT_DEFAULT,\n  SETPOINT_MAX,\n  SETPOINT_MIN,\n  createSetpointLabel,\n  isSetpointDelete,\n} from \"./util\";\nimport {\n  IFilter,\n  ISetpoint,\n  createSetpoint,\n  deleteSetpoint,\n  filterSetpoints,\n  readSetpoints,\n  selectFilterSetpoints,\n  selectReadSetpoints,\n  updateSetpoint,\n} from \"controllers/setpoints/action\";\nimport { get, merge } from \"lodash\";\n\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\nimport { DeepPartial } from \"../../utils/types\";\n\ninterface SetpointProps extends RootProps {\n  readSetpoints: () => void;\n  filterSetpoints: (payload: IFilter) => void;\n  createSetpoint: (payload: DeepPartial<ISetpoint>) => void;\n  updateSetpoint: (payload: DeepPartial<ISetpoint>) => void;\n  deleteSetpoint: (payload: number) => void;\n  setpoints?: ISetpoint[];\n  filtered?: ISetpoint[];\n}\n\nclass Setpoint extends React.Component<SetpointProps, any> {\n  constructor(props: SetpointProps) {\n    super(props);\n    this.state = {\n      label: createSetpointLabel(\"all\", {\n        setpoint: SETPOINT_DEFAULT,\n        deadband: DEADBAND_DEFAULT,\n        heating: HEATING_DEFAULT,\n        cooling: COOLING_DEFAULT,\n      }),\n      setpoint: SETPOINT_DEFAULT,\n      deadband: DEADBAND_DEFAULT,\n      heating: HEATING_DEFAULT,\n      cooling: COOLING_DEFAULT,\n      editing: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.readSetpoints();\n  }\n\n  handleChange = (field: \"label\" | \"setpoint\" | \"deadband\" | \"value\", setpoint?: DeepPartial<ISetpoint>) => {\n    return (value: any) => {\n      const { editing } = this.state;\n      switch (field) {\n        case \"label\":\n          return this.setState(\n            setpoint === undefined ? { label: value } : { editing: merge(editing, { label: value }) }\n          );\n        case \"setpoint\":\n          return this.setState(\n            setpoint === undefined\n              ? {\n                  label: createSetpointLabel(\"all\", {\n                    setpoint: (value[0] + value[1]) / 2,\n                    deadband: get(editing, \"deadband\", get(setpoint, \"deadband\")),\n                    heating: get(editing, \"heating\", get(setpoint, \"heating\")),\n                    cooling: get(editing, \"cooling\", get(setpoint, \"cooling\")),\n                  }),\n                  setpoint: (value[0] + value[1]) / 2,\n                }\n              : {\n                  editing: merge(editing, {\n                    label: createSetpointLabel(\"all\", {\n                      setpoint: (value[0] + value[1]) / 2,\n                      deadband: get(editing, \"deadband\", get(setpoint, \"deadband\")),\n                      heating: get(editing, \"heating\", get(setpoint, \"heating\")),\n                      cooling: get(editing, \"cooling\", get(setpoint, \"cooling\")),\n                    }),\n                    setpoint: (value[0] + value[1]) / 2,\n                  }),\n                }\n          );\n        case \"deadband\":\n          return this.setState(\n            setpoint === undefined\n              ? {\n                  label: createSetpointLabel(\"all\", {\n                    setpoint: get(editing, \"setpoint\", get(setpoint, \"setpoint\")),\n                    deadband: value,\n                    heating: get(editing, \"heating\", get(setpoint, \"heating\")),\n                    cooling: get(editing, \"cooling\", get(setpoint, \"cooling\")),\n                  }),\n                  deadband: value,\n                }\n              : {\n                  editing: merge(editing, {\n                    label: createSetpointLabel(\"all\", {\n                      setpoint: get(editing, \"setpoint\", get(setpoint, \"setpoint\")),\n                      deadband: value,\n                      heating: get(editing, \"heating\", get(setpoint, \"heating\")),\n                      cooling: get(editing, \"cooling\", get(setpoint, \"cooling\")),\n                    }),\n                    deadband: value,\n                  }),\n                }\n          );\n        case \"value\":\n          return this.setState(\n            setpoint === undefined\n              ? {\n                  label: createSetpointLabel(\"all\", {\n                    setpoint: get(editing, \"setpoint\", get(setpoint, \"setpoint\")),\n                    deadband: get(editing, \"deadband\", get(setpoint, \"deadband\")),\n                    heating: value[0],\n                    cooling: value[1],\n                  }),\n                  heating: value[0],\n                  cooling: value[1],\n                }\n              : {\n                  editing: merge(editing, {\n                    label: createSetpointLabel(\"all\", {\n                      setpoint: get(editing, \"setpoint\", get(setpoint, \"setpoint\")),\n                      deadband: get(editing, \"deadband\", get(setpoint, \"deadband\")),\n                      heating: value[0],\n                      cooling: value[1],\n                    }),\n                    heating: value[0],\n                    cooling: value[1],\n                  }),\n                }\n          );\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { label, heating, cooling } = this.state;\n    this.props.createSetpoint({ label, heating, cooling });\n    this.setState({\n      label: createSetpointLabel(\"all\", {\n        setpoint: SETPOINT_DEFAULT,\n        deadband: DEADBAND_DEFAULT,\n        heating: HEATING_DEFAULT,\n        cooling: COOLING_DEFAULT,\n      }),\n      setpoint: SETPOINT_DEFAULT,\n      deadband: DEADBAND_DEFAULT,\n      heating: HEATING_DEFAULT,\n      cooling: COOLING_DEFAULT,\n      editing: null,\n    });\n  };\n\n  handleEdit = (setpoint: DeepPartial<ISetpoint>) => {\n    const { id, label, heating, cooling } = setpoint;\n    this.setState({ editing: { id, label, heating, cooling } });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { id, label, heating, cooling } = this.state?.editing || {};\n    this.props.updateSetpoint({ id, label, heating, cooling });\n    this.setState({ editing: null });\n  };\n\n  handleDelete = (setpoint: DeepPartial<ISetpoint>) => {\n    const { id } = setpoint;\n    if (id !== undefined) {\n      this.props.deleteSetpoint(id);\n    }\n  };\n\n  render() {\n    const { filtered } = this.props;\n    const { label, setpoint, deadband, heating, cooling, editing } = this.state;\n    return (\n      <div className={\"setpoint\"}>\n        <Header {...this.props} />\n        <h2>Create Setpoint</h2>\n        <div className=\"create\">\n          <Card interactive>\n            <div>\n              <input\n                className={Classes.INPUT}\n                type=\"text\"\n                value={label}\n                onChange={(e) => this.handleChange(\"label\")(e.target.value)}\n              />\n            </div>\n            <div>\n              <input\n                className={Classes.INPUT}\n                type=\"number\"\n                min={DEADBAND_MIN}\n                max={DEADBAND_MAX}\n                value={deadband}\n                onChange={(e) => this.handleChange(\"deadband\")(e.target.value)}\n              />\n            </div>\n            <div>\n              <RangeSlider\n                min={SETPOINT_MIN}\n                max={SETPOINT_MAX}\n                stepSize={0.5}\n                labelStepSize={5}\n                value={[setpoint - deadband / 2, setpoint + deadband / 2]}\n                onChange={this.handleChange(\"setpoint\")}\n              />\n            </div>\n            <div>\n              <RangeSlider\n                min={HEATING_MIN}\n                max={COOLING_MAX}\n                stepSize={1}\n                labelStepSize={5}\n                value={[heating, cooling]}\n                onChange={this.handleChange(\"value\")}\n              />\n            </div>\n            <div>\n              <Button icon={IconNames.ADD_TO_ARTIFACT} intent={Intent.PRIMARY} minimal onClick={this.handleCreate} />\n            </div>\n          </Card>\n        </div>\n        <h1>Setpoints</h1>\n        <div className=\"list\">\n          {filtered?.map((setpoint, i) => {\n            return setpoint.id === editing?.id ? (\n              <Card key={setpoint.id || i} interactive>\n                <div>\n                  <input\n                    className={Classes.INPUT}\n                    type=\"text\"\n                    value={editing.label}\n                    onChange={(e) => this.handleChange(\"label\", setpoint)(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <input\n                    className={Classes.INPUT}\n                    type=\"number\"\n                    value={editing.deadband}\n                    onChange={(e) => this.handleChange(\"deadband\", setpoint)(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <RangeSlider\n                    min={SETPOINT_MIN}\n                    max={SETPOINT_MAX}\n                    stepSize={0.5}\n                    labelStepSize={5}\n                    value={[editing.setpoint - deadband / 2, editing.setpoint + deadband / 2]}\n                    onChange={this.handleChange(\"setpoint\", setpoint)}\n                  />\n                </div>\n                <div>\n                  <RangeSlider\n                    min={HEATING_MIN}\n                    max={COOLING_MAX}\n                    stepSize={1}\n                    labelStepSize={5}\n                    value={[editing.heating, editing.cooling]}\n                    onChange={this.handleChange(\"value\", setpoint)}\n                  />\n                </div>\n                <div>\n                  <Button\n                    icon={IconNames.FLOPPY_DISK}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleSave()}\n                  />\n                  <Button icon={IconNames.CROSS} intent={Intent.PRIMARY} minimal onClick={() => this.handleCancel()} />\n                </div>\n              </Card>\n            ) : (\n              <Card key={setpoint.id || i} interactive>\n                <div>{setpoint.label}</div>\n                <div>\n                  <input className={Classes.INPUT} type=\"number\" value={setpoint.deadband} />\n                </div>\n                <div>\n                  <RangeSlider\n                    min={HEATING_MIN}\n                    max={COOLING_MAX}\n                    stepSize={0.5}\n                    labelStepSize={5}\n                    value={[setpoint.setpoint - setpoint.deadband / 2, setpoint.setpoint + setpoint.deadband / 2]}\n                  />\n                </div>\n                <div>\n                  <RangeSlider\n                    min={HEATING_MIN}\n                    max={COOLING_MAX}\n                    stepSize={1}\n                    labelStepSize={5}\n                    value={[setpoint.heating, setpoint.cooling]}\n                  />\n                </div>\n                <div>\n                  <Button\n                    icon={IconNames.EDIT}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleEdit(setpoint)}\n                  />\n                  <Button\n                    icon={IconNames.TRASH}\n                    intent={Intent.WARNING}\n                    minimal\n                    onClick={() => this.handleDelete(setpoint)}\n                    disabled={!isSetpointDelete(setpoint)}\n                  />\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  setpoints: selectReadSetpoints(state),\n  filtered: selectFilterSetpoints(state),\n});\n\nconst mapActionToProps = { readSetpoints, filterSetpoints, createSetpoint, updateSetpoint, deleteSetpoint };\n\nexport default connect(mapStateToProps, mapActionToProps)(Setpoint);\n","import RouteBase from \"routes/RouteBase\";\nimport Setpoint from \"./Setpoint\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Setpoint {...p} />} />;\n\nexport default Root;\n","import { isNumber, sum } from \"lodash\";\n\nimport { ISetpoint } from \"controllers/setpoints/action\";\nimport { ValidateType } from \"common\";\nimport { DeepPartial } from \"../../utils/types\";\n\nconst SETPOINT_PADDING = parseInt(process.env.REACT_APP_SETPOINT_PADDING || \"2\");\nconst DEADBAND_MIN = (ValidateType.DeadbandType.options?.min as number) || 2;\nconst DEADBAND_MAX = (ValidateType.DeadbandType.options?.max as number) || 6;\nconst DEADBAND_DEFAULT = (ValidateType.DeadbandType.options?.default as number) || 4;\nconst HEATING_MIN = (ValidateType.HeatingType.options?.min as number) || 55;\nconst HEATING_DEFAULT = (ValidateType.HeatingType.options?.default as number) || 60;\nconst COOLING_MAX = (ValidateType.CoolingType.options?.max as number) || 85;\nconst COOLING_DEFAULT = (ValidateType.CoolingType.options?.default as number) || 80;\nconst SETPOINT_MIN = HEATING_MIN;\nconst SETPOINT_MAX = COOLING_MAX;\nconst SETPOINT_DEFAULT = (ValidateType.SetpointType.options?.default as number) || 70;\n\ntype Required = \"setpoint\" | \"deadband\" | \"heating\" | \"cooling\";\n\nconst createSetpointLabel = (\n  type: \"all\" | Required,\n  setpoint: DeepPartial<ISetpoint> & Pick<ISetpoint, Required>\n): string => {\n  switch (type) {\n    case \"all\":\n      return `Occupied Setpoint: ${createSetpointLabel(\"setpoint\", setpoint)} Deadband: ${createSetpointLabel(\n        \"deadband\",\n        setpoint\n      )} Unoccupied Heating: ${createSetpointLabel(\"heating\", setpoint)} Cooling: ${createSetpointLabel(\n        \"cooling\",\n        setpoint\n      )}`;\n    case \"setpoint\":\n    case \"deadband\":\n    case \"heating\":\n    case \"cooling\":\n    default:\n      return `${setpoint[type]}º\\xa0F`;\n  }\n};\n\nconst getSetpointMessage = (setpoint: DeepPartial<ISetpoint> & Pick<ISetpoint, Required>): string | undefined => {\n  if (setpoint.deadband < DEADBAND_MIN || setpoint.deadband > DEADBAND_MAX) {\n    return `Deadband must be in the range [${DEADBAND_MIN},${DEADBAND_MAX}].`;\n  } else if (\n    setpoint.setpoint < setpoint.heating + SETPOINT_PADDING + setpoint.deadband / 2 ||\n    setpoint.setpoint > setpoint.cooling - SETPOINT_PADDING - setpoint.deadband / 2\n  ) {\n    return `Occupied setpoint must be in the range [${setpoint.heating + SETPOINT_PADDING + setpoint.deadband / 2},${\n      setpoint.cooling - SETPOINT_PADDING - setpoint.deadband / 2\n    }]`;\n  } else if (setpoint.heating < HEATING_MIN || setpoint.cooling > COOLING_MAX) {\n    return `Unoccupied heating and cooling must be in the range [${HEATING_MIN},${COOLING_MAX}]`;\n  } else if (setpoint.setpoint % 0.5 !== 0) {\n    return \"Occupied setpoint must be a whole or half degree.\";\n  } else if (setpoint.deadband % 1 !== 0) {\n    return \"Deadband must be a whole degree.\";\n  } else if (setpoint.heating % 0.5 !== 0 || setpoint.cooling % 0.5 !== 0) {\n    return \"Unoccupied heating or cooling must be a whole or half degree.\";\n  }\n};\n\nconst isSetpointValid = (setpoint: DeepPartial<ISetpoint> | undefined): boolean => {\n  if (\n    !setpoint ||\n    !isNumber(setpoint.setpoint) ||\n    !isNumber(setpoint.deadband) ||\n    !isNumber(setpoint.heating) ||\n    !isNumber(setpoint.cooling)\n  ) {\n    return false;\n  }\n  return getSetpointMessage(setpoint as DeepPartial<ISetpoint> & Pick<ISetpoint, Required>) === undefined;\n};\n\nconst isSetpointDelete = (setpoint: DeepPartial<ISetpoint>) => {\n  return sum(Object.values(setpoint?._count || {})) === 0;\n};\n\nexport {\n  SETPOINT_PADDING,\n  DEADBAND_MIN,\n  DEADBAND_MAX,\n  DEADBAND_DEFAULT,\n  HEATING_MIN,\n  HEATING_DEFAULT,\n  COOLING_MAX,\n  COOLING_DEFAULT,\n  SETPOINT_MIN,\n  SETPOINT_MAX,\n  SETPOINT_DEFAULT,\n  createSetpointLabel,\n  getSetpointMessage,\n  isSetpointValid,\n  isSetpointDelete,\n};\n"],"names":["Setpoint","props","handleChange","field","setpoint","value","editing","state","setState","undefined","label","merge","createSetpointLabel","deadband","get","heating","cooling","handleCreate","createSetpoint","SETPOINT_DEFAULT","DEADBAND_DEFAULT","HEATING_DEFAULT","COOLING_DEFAULT","handleEdit","id","handleCancel","handleSave","updateSetpoint","handleDelete","deleteSetpoint","this","readSetpoints","filtered","className","interactive","Classes","type","onChange","e","target","min","DEADBAND_MIN","max","DEADBAND_MAX","SETPOINT_MIN","SETPOINT_MAX","stepSize","labelStepSize","HEATING_MIN","COOLING_MAX","icon","IconNames","intent","Intent","minimal","onClick","map","i","disabled","isSetpointDelete","React","mapActionToProps","filterSetpoints","connect","setpoints","selectReadSetpoints","selectFilterSetpoints","RouteBase","renderRoute","p","SETPOINT_PADDING","parseInt","process","ValidateType","default","getSetpointMessage","isSetpointValid","isNumber","sum","Object","values","_count"],"sourceRoot":""}