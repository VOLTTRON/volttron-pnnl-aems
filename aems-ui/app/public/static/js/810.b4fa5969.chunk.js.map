{"version":3,"file":"static/js/810.b4fa5969.chunk.js","mappings":"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","sources":["routes/Account/Account.tsx","routes/Account/index.tsx"],"sourcesContent":["import \"./style.scss\";\n\nimport { Button, Card, Checkbox, Icon, InputGroup, Intent, Label } from \"@blueprintjs/core\";\n\nimport { DeepPartial } from \"../../utils/types\";\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\nimport { flatten, get, isEqual, merge, omit, uniq, xor } from \"lodash\";\nimport {\n  IUser,\n  createUser,\n  readUsers,\n  selectUsers,\n  filterUsers,\n  selectFilterUsers,\n  IFilter,\n  updateUser,\n  deleteUser,\n} from \"controllers/users/action\";\nimport { updateUser as updateCurrent } from \"controllers/user/action\";\nimport { RoleType } from \"common\";\nimport { selectUser } from \"controllers/user/action\";\nimport { zxcvbn, zxcvbnOptions } from \"@zxcvbn-ts/core\";\nimport * as zxcvbnCommonPackage from \"@zxcvbn-ts/language-common\";\nimport * as zxcvbnEnPackage from \"@zxcvbn-ts/language-en\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nconst options = {\n  dictionary: {\n    ...zxcvbnCommonPackage.dictionary,\n    ...zxcvbnEnPackage.dictionary,\n  },\n  graphs: zxcvbnCommonPackage.adjacencyGraphs,\n  translations: zxcvbnEnPackage.translations,\n};\nzxcvbnOptions.setOptions(options);\n\ninterface AccountProps extends RootProps {\n  readUsers: () => void;\n  filterUsers: (payload: IFilter) => void;\n  createUser: (payload: DeepPartial<IUser>) => void;\n  updateUser: (payload: DeepPartial<IUser>) => void;\n  deleteUser: (payload: string) => void;\n  updateCurrent: (payload: DeepPartial<IUser>) => void;\n  user?: IUser;\n  accounts?: IUser[];\n  filtered?: IUser[];\n}\n\ninterface AccountState {\n  name: string;\n  email: string;\n  role: string;\n  password: string;\n  verify: string;\n  editing: (DeepPartial<IUser> & { password: string; verify: string }) | null;\n  show: \"create-pw\" | \"create-pwv\" | \"edit-pw\" | \"edit-pwv\" | null;\n}\n\nclass Account extends React.Component<AccountProps, AccountState> {\n  constructor(props: AccountProps) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      editing: null,\n      show: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    if (this.isAdmin()) {\n      this.props.readUsers();\n    } else {\n      this.setState({ editing: user ? { id: user.id, password: \"\", verify: \"\" } : null });\n    }\n  }\n\n  handleChange = (field: keyof AccountState, account?: DeepPartial<IUser>) => {\n    return (value: string) => {\n      const { editing } = this.state;\n      switch (field) {\n        // @ts-expect-error\n        case \"role\":\n          const role = account === undefined ? this.state.role : get(editing, \"role\", account?.role ?? \"\");\n          value = xor(role.split(\" \"), [value]).join(\" \");\n        case \"name\":\n        case \"email\":\n        case \"password\":\n        case \"verify\":\n          return this.setState(\n            // @ts-expect-error\n            account === undefined ? { [field]: value } : { editing: merge(editing, { [field]: value }) }\n          );\n        default:\n          throw new Error(`Unhandled field passed to handleChange function.`);\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { name, email, role, password } = this.state;\n    this.props.createUser({ name, email, role, password });\n    this.setState({\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      editing: null,\n      show: null,\n    });\n  };\n\n  handleEdit = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    this.setState({ editing: { id, password: \"\", verify: \"\" } });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { user } = this.props;\n    const account = omit(this.state?.editing, [\"verify\", ...(this.state?.editing?.password ? [] : [\"password\"])]);\n    if (this.isAdmin()) {\n      if (account) {\n        this.props.updateUser(account);\n      }\n      this.setState({ editing: null });\n    } else {\n      if (account) {\n        this.props.updateCurrent(account);\n      }\n      this.setState({ editing: user ? { id: user.id, password: \"\", verify: \"\" } : null });\n    }\n  };\n\n  handleDelete = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    if (id !== undefined) {\n      this.props.deleteUser(id);\n    }\n  };\n\n  isCreate() {\n    const { name, email, role, password, verify } = this.state;\n    if (!(name && email && password)) {\n      return false;\n    }\n    const errors = this.getErrors(name, email, role, password, verify);\n    const isErrors = errors.email || errors.name || errors.verify || errors.password?.feedback.warning;\n    return !isErrors;\n  }\n\n  isSave(account: IUser) {\n    const { editing } = this.state;\n    const { name, email, role, password, verify } = merge({ verify: \"\" }, account, this.state.editing);\n    const errors = this.getErrors(name, email, role, password, verify);\n    const updated = merge({}, account, editing);\n    const isErrors = errors.email || errors.name || errors.verify || errors.password?.feedback.warning;\n    const isUpdated = !isEqual(merge({ password: \"\" }, account), omit(updated, [\"verify\"]));\n    return !isErrors && isUpdated;\n  }\n\n  isAdmin() {\n    const { user } = this.props;\n    return RoleType.Admin.granted(...(user?.role.split(\" \") ?? [\"\"]));\n  }\n\n  parseRole(role: string) {\n    const roles = role\n      .split(\" \")\n      .map((v) => RoleType.parse(v)?.name)\n      .filter((v): v is string => !!v);\n    const grants = uniq(flatten(role.split(\" \").map((v) => RoleType.parse(v)?.grants))).filter((v): v is string => !!v);\n    return { roles, grants };\n  }\n\n  getErrors(name: string, email: string, role: string, password: string | undefined, verify: string) {\n    const errorName = name !== \"\" && name.length < 2 ? \"User name must be specified.\" : null;\n    const errorEmail =\n      email !== \"\" && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/i.test(email) ? \"Valid email must be specified.\" : null;\n    const errorPw = password === \"\" ? null : zxcvbn(password ?? \"\", [name, email]);\n    const errorPwv = password === \"\" || password === verify ? null : \"New password and verify password must match.\";\n    return { name: errorName, email: errorEmail, password: errorPw, verify: errorPwv };\n  }\n\n  renderAccount(account?: IUser) {\n    const { show } = this.state;\n    const { name, email, role, password, verify } = account\n      ? merge({ verify: \"\" }, account, this.state.editing)\n      : this.state;\n    const { roles, grants } = this.parseRole(role);\n    const showPw = account ? \"edit-pw\" : \"create-pw\";\n    const showPwv = account ? \"edit-pwv\" : \"create-pwv\";\n    const errors = this.getErrors(name, email, role, password, verify);\n    return (\n      <>\n        <div>\n          <Label>\n            <b>Name</b>\n            <InputGroup\n              type=\"text\"\n              value={name}\n              onChange={(e) => this.handleChange(\"name\", account)(e.target.value)}\n              readOnly={!this.isAdmin()}\n              intent={errors.name ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.name && (\n                    <Tooltip2 content={errors.name}>\n                      <Icon className=\"icon\" icon={IconNames.INFO_SIGN} intent={Intent.DANGER} />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Email</b>\n            <InputGroup\n              type=\"text\"\n              value={email}\n              onChange={(e) => this.handleChange(\"email\", account)(e.target.value)}\n              readOnly={!this.isAdmin()}\n              intent={errors.email ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.email && (\n                    <Tooltip2 content={errors.email}>\n                      <Icon className=\"icon\" icon={IconNames.INFO_SIGN} intent={Intent.DANGER} />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>New Password</b>\n            <InputGroup\n              type={show === showPw ? \"text\" : \"password\"}\n              autoComplete=\"new-password\"\n              value={password}\n              onChange={(e) => this.handleChange(\"password\", account)(e.target.value)}\n              intent={\n                errors.password && (errors.password.feedback.warning || errors.password.feedback.suggestions.length > 0)\n                  ? errors.password.feedback.warning\n                    ? Intent.DANGER\n                    : Intent.WARNING\n                  : undefined\n              }\n              rightElement={\n                <div className=\"icons\">\n                  {errors.password &&\n                    (errors.password.feedback.warning || errors.password.feedback.suggestions.length > 0) && (\n                      <Tooltip2\n                        content={errors.password.feedback.warning || errors.password.feedback.suggestions.join(\" \\n\")}\n                      >\n                        <Icon\n                          className=\"icon\"\n                          icon={IconNames.INFO_SIGN}\n                          intent={errors.password.feedback.warning ? Intent.DANGER : Intent.WARNING}\n                        />\n                      </Tooltip2>\n                    )}\n                  <Button\n                    minimal\n                    icon={show === showPw ? IconNames.EYE_OFF : IconNames.EYE_OPEN}\n                    onClick={() => this.setState({ show: show === showPw ? null : showPw })}\n                  />\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Verify Password</b>\n            <InputGroup\n              type={show === showPwv ? \"text\" : \"password\"}\n              value={verify}\n              onChange={(e) => this.handleChange(\"verify\", account)(e.target.value)}\n              intent={errors.verify ? Intent.DANGER : errors.verify === undefined ? undefined : Intent.NONE}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.verify && (\n                    <Tooltip2 content={errors.verify}>\n                      <Icon className=\"icon\" icon={IconNames.INFO_SIGN} intent={Intent.DANGER} />\n                    </Tooltip2>\n                  )}\n                  <Button\n                    minimal\n                    icon={show === showPwv ? IconNames.EYE_OFF : IconNames.EYE_OPEN}\n                    onClick={() => this.setState({ show: show === showPwv ? null : showPwv })}\n                  />\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>Roles</b>\n            {RoleType.values.map((v) => (\n              <Checkbox\n                key={`checkbox-${v.name}`}\n                id={v.name}\n                label={`${v.label} Role`}\n                checked={roles.includes(v.name)}\n                indeterminate={!roles.includes(v.name) && grants.includes(v.name)}\n                onChange={() => this.handleChange(\"role\", account)(v.name)}\n                disabled={!this.isAdmin()}\n              />\n            ))}\n          </Label>\n        </div>\n      </>\n    );\n  }\n\n  renderMyAccount() {\n    const { user } = this.props;\n    if (this.isAdmin() || !user) {\n      return null;\n    }\n    return (\n      <>\n        <h2>My Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount(user)}\n            <div>\n              <Button\n                icon={IconNames.FLOPPY_DISK}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleSave}\n                disabled={!this.isSave(user)}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderCreateAccount() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    return (\n      <>\n        <h2>Create Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount()}\n            <div>\n              <Button\n                icon={IconNames.ADD_TO_ARTIFACT}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleCreate}\n                disabled={!this.isCreate()}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderAccountList() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    return (\n      <>\n        <h1>Accounts</h1>\n        <div className=\"list\">\n          {filtered?.map((account, i) => {\n            return account.id === editing?.id ? (\n              <Card key={account.id || i} interactive>\n                {this.renderAccount(account)}\n                <div>\n                  <Button\n                    icon={IconNames.FLOPPY_DISK}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleSave()}\n                    disabled={!this.isSave(account)}\n                  />\n                  <Button icon={IconNames.CROSS} intent={Intent.PRIMARY} minimal onClick={() => this.handleCancel()} />\n                </div>\n              </Card>\n            ) : (\n              <Card key={account.id || i} interactive>\n                <div>{account.name}</div>\n                <div>{account.email}</div>\n                <div>{account.role}</div>\n                <div>\n                  <Button\n                    icon={IconNames.EDIT}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleEdit(account)}\n                  />\n                  <Button\n                    icon={IconNames.TRASH}\n                    intent={Intent.WARNING}\n                    minimal\n                    onClick={() => this.handleDelete(account)}\n                  />\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className={\"account\"}>\n        <Header {...this.props} />\n        {this.renderMyAccount()}\n        {this.renderCreateAccount()}\n        {this.renderAccountList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  user: selectUser(state),\n  accounts: selectUsers(state),\n  filtered: selectFilterUsers(state),\n});\n\nconst mapActionToProps = {\n  readUsers,\n  filterUsers,\n  createUser,\n  updateUser,\n  deleteUser,\n  updateCurrent,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(Account);\n","import Account from \"./Account\";\nimport RouteBase from \"routes/RouteBase\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Account {...p} />} />;\n\nexport default Root;\n"],"names":["options","dictionary","zxcvbnCommonPackage","zxcvbnEnPackage","graphs","translations","zxcvbnOptions","Account","props","handleChange","field","account","value","editing","state","role","undefined","get","xor","split","join","setState","merge","Error","handleCreate","name","email","password","createUser","verify","show","handleEdit","id","handleCancel","handleSave","user","omit","isAdmin","updateUser","updateCurrent","handleDelete","deleteUser","this","readUsers","errors","getErrors","feedback","warning","updated","isErrors","isUpdated","isEqual","RoleType","granted","roles","map","v","filter","grants","uniq","flatten","length","test","zxcvbn","parseRole","showPw","showPwv","type","onChange","e","target","readOnly","intent","Intent","rightElement","className","content","icon","IconNames","autoComplete","suggestions","minimal","onClick","label","checked","includes","indeterminate","disabled","interactive","renderAccount","isSave","isCreate","filtered","i","renderMyAccount","renderCreateAccount","renderAccountList","React","mapActionToProps","filterUsers","connect","selectUser","accounts","selectUsers","selectFilterUsers","RouteBase","renderRoute","p"],"sourceRoot":""}