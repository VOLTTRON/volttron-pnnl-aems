{"version":3,"file":"static/js/740.a9ccc512.chunk.js","mappings":"gYAuCMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAYC,GAAkB,IAAD,yBAC3B,cAAMA,IAcRC,aAAe,SAACC,EAAqCC,GACnD,OAAO,SAACC,GACN,IAAQC,EAAY,EAAKC,MAAjBD,QACR,MACO,UADCH,EAEG,EAAKK,cAAiBC,IAARL,EAAoB,CAAEM,MAAOL,GAAU,CAAEC,SAASK,EAAAA,EAAAA,OAAML,EAAS,CAAEI,MAAOL,MAIxF,EAAKG,cACFC,IAARL,GAAA,UAAuBD,EAAQE,GAAU,CAAEC,SAASK,EAAAA,EAAAA,OAAML,GAAD,UAAaH,EAAQE,QAzB3D,EA+B7BO,aAAe,WACb,MAAoC,EAAKL,MAAjCM,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAAUC,EAAxB,EAAwBA,QACxB,EAAKd,MAAMe,UAAU,CAAEH,KAAAA,EAAMC,SAAAA,EAAUC,QAAAA,IACvC,EAAKP,SAAS,CAAEK,KAAMI,EAAAA,GAAAA,WAAAA,MAA0BH,cAAUL,EAAWM,QAAS,MAlCnD,EAqC7BG,WAAa,SAACd,GACZ,IAAQe,EAAsBf,EAAtBe,GAAIN,EAAkBT,EAAlBS,KAAME,EAAYX,EAAZW,QAClB,EAAKP,SAAS,CAAEF,QAAS,CAAEa,GAAAA,EAAIN,KAAAA,EAAME,QAAAA,MAvCV,EA0C7BK,aAAe,WACb,EAAKZ,SAAS,CAAEF,QAAS,QA3CE,EA8C7Be,WAAa,WAAO,IAAD,EACjB,GAA8B,YAAKd,aAAL,eAAYD,UAAW,GAA7Ca,EAAR,EAAQA,GAAIN,EAAZ,EAAYA,KAAME,EAAlB,EAAkBA,QAClB,EAAKd,MAAMqB,UAAU,CAAEH,GAAAA,EAAIN,KAAAA,EAAME,QAAAA,IACjC,EAAKP,SAAS,CAAEF,QAAS,QAjDE,EAoD7BiB,aAAe,SAACnB,GACd,IAAQe,EAAOf,EAAPe,QACGV,IAAPU,GACF,EAAKlB,MAAMuB,UAAUL,IArDvB,EAAKZ,MAAQ,CAAEM,KAAMI,EAAAA,GAAAA,WAAAA,MAA0BH,cAAUL,EAAWM,QAAS,IAFlD,EA0K5B,OAvKA,yCAED,WACEU,KAAKxB,MAAMyB,SAAS,CAAEb,KAAM,QAC5BY,KAAKxB,MAAM0B,aAAaC,EAAAA,MACzB,kCAED,WACEH,KAAKxB,MAAMyB,SAAS,CAAEb,KAAMI,EAAAA,GAAAA,WAAAA,QAC5BQ,KAAKxB,MAAM0B,aAAaC,EAAAA,MACzB,oBA8CD,WAAU,IAAD,OACCC,EAAaJ,KAAKxB,MAAlB4B,SACR,EAA6BJ,KAAKlB,MAA1BQ,EAAR,EAAQA,QAAST,EAAjB,EAAiBA,QACjB,OACE,iBAAKwB,UAAW,MAAhB,WACE,SAAC,MAAD,UAAYL,KAAKxB,SACjB,4CACA,gBAAK6B,UAAU,SAAf,UACE,UAAC,KAAD,CAAMC,aAAW,EAAjB,WACE,oBACA,0BACE,sCAEF,0BACE,kBACED,UAAWE,EAAAA,IACXnB,KAAK,OACLR,MAAOU,EACPkB,SAAU,SAACC,GAAD,OAAO,EAAKhC,aAAa,UAAlB,CAA6BgC,EAAEC,OAAO9B,aAG3D,0BACE,SAAC,KAAD,CAAQ+B,KAAMC,EAAAA,IAA2BC,OAAQC,EAAAA,EAAAA,QAAgBC,SAAO,EAACC,QAAShB,KAAKb,uBAI7F,kCACA,gBAAKkB,UAAU,OAAf,gBACGD,QADH,IACGA,OADH,EACGA,EACGa,QAAO,SAACC,GAAD,OAAOA,EAAE9B,OAASI,EAAAA,GAAAA,WAAAA,SAC1B2B,KAAI,SAACxC,EAAKyC,GACT,OAAOC,EAAAA,EAAAA,UAAS1C,EAAIe,KAAOf,EAAIe,MAAJ,OAAWb,QAAX,IAAWA,OAAX,EAAWA,EAASa,KAC7C,UAAC,KAAD,CAAwCY,aAAW,EAAnD,WACE,oBACA,0BACE,SAAC,IAAD,CACEgB,SACE,SAAC,KAAD,UACG9B,EAAAA,GAAAA,OAAAA,QACS,SAAC+B,GAAD,OAAOA,EAAEtC,QAAUO,EAAAA,GAAAA,WAAAA,SAC1B2B,KAAI,SAACI,GAAD,OACH,SAAC,KAAD,CAEEC,KAAMD,EAAEtC,MACR+B,QAAS,kBAAM,EAAKvC,aAAa,OAAQE,EAA1B,CAA+B4C,EAAEtC,SAF3CsC,EAAEE,WAOjBC,UAAU,aAdZ,UAgBE,SAAC,KAAD,CAAQC,UAAWf,EAAAA,IAAsBG,SAAO,EAAhD,SACGpC,EAAIS,YAIX,0BACE,kBACEiB,UAAWE,EAAAA,IACXnB,KAAK,OACLR,MAAOC,EAAQS,QACfkB,SAAU,SAACC,GAAD,OAAO,EAAKhC,aAAa,UAAWE,EAA7B,CAAkC8B,EAAEC,OAAO9B,aAGhE,4BACE,SAAC,KAAD,CACE+B,KAAMC,EAAAA,IACNC,OAAQC,EAAAA,EAAAA,QACRC,SAAO,EACPC,QAAS,kBAAM,EAAKpB,iBAEtB,SAAC,KAAD,CACEe,KAAMC,EAAAA,IACNC,OAAQC,EAAAA,EAAAA,QACRC,SAAO,EACPC,QAAS,kBAAM,EAAKrB,uBA3CfhB,EAAIe,IAAMf,EAAIiD,UAAYR,IAgDrC,UAAC,KAAD,CAAwCd,aAAW,EAAnD,WACE,+BAAOuB,GAAAA,CAAOlD,EAAImD,WAAWC,OAAO,eAApC,QACA,0BACE,uBAAIpD,EAAIS,UAEV,mCAAST,EAAIW,SAAb,SAA2B,OAAHX,QAAG,IAAHA,OAAA,EAAAA,EAAKqD,QAAS,GAAK,EAApB,YAA6BrD,EAAIqD,MAAjC,KAA4C,OACnE,4BACGX,EAAAA,EAAAA,UAAS1C,EAAIe,MACZ,SAAC,KAAD,CACEiB,KAAMC,EAAAA,IACNC,OAAQC,EAAAA,EAAAA,QACRC,SAAO,EACPC,QAAS,kBAAM,EAAKvB,WAAWd,OAGlC0C,EAAAA,EAAAA,UAAS1C,EAAIe,MACZ,SAAC,KAAD,CACEiB,KAAMC,EAAAA,IACNC,OAAQC,EAAAA,EAAAA,QACRC,SAAO,EACPC,QAAS,kBAAM,EAAKlB,aAAanB,IACjCsD,SAAUtD,EAAIS,OAASI,EAAAA,GAAAA,WAAAA,aArBpBb,EAAIe,IAAMf,EAAIiD,UAAYR,eA+BlD,EA3KG7C,CAAY2D,EAAAA,WAmLZC,EAAmB,CAAElC,SAAAA,EAAAA,GAAUC,aAAAA,EAAAA,GAAckC,WAAAA,EAAAA,GAAY7C,UAAAA,EAAAA,GAAWM,UAAAA,EAAAA,GAAWE,UAAAA,EAAAA,IAErF,GAAesC,EAAAA,EAAAA,KAPS,SAACvD,GAAD,MAAiB,CACvCwD,MAAMC,EAAAA,EAAAA,IAAezD,GACrBsB,UAAUoC,EAAAA,EAAAA,IAAiB1D,MAKWqD,EAAxC,CAA0D5D,G,UCvN1D,EAFa,SAACC,GAAD,OAAgB,SAACiE,EAAA,GAAD,kBAAejE,GAAf,IAAsBkE,YAAa,SAACC,GAAD,OAAO,SAAC,GAAD,UAASA","sources":["routes/Log/Log.tsx","routes/Log/index.tsx"],"sourcesContent":["import \"./style.scss\";\n\nimport { Button, Card, Classes, Intent, Menu, MenuItem } from \"@blueprintjs/core\";\nimport {\n  IFilter,\n  ILog,\n  createLog,\n  deleteLog,\n  filterLogs,\n  readLogs,\n  readLogsPoll,\n  selectFilterLogs,\n  selectReadLogs,\n  updateLog,\n} from \"controllers/logs/action\";\nimport { isFinite, merge } from \"lodash\";\n\nimport { DeepPartial } from \"../../utils/types\";\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { LogType } from \"common\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\nimport { fastPollInterval } from \"controllers/poll/action\";\nimport moment from \"moment\";\n\ninterface LogProps extends RootProps {\n  readLogs: (query?: { type: string }) => void;\n  readLogsPoll: (payload?: number) => void;\n  filterLogs: (payload: IFilter) => void;\n  createLog: (payload: DeepPartial<ILog>) => void;\n  updateLog: (payload: DeepPartial<ILog>) => void;\n  deleteLog: (payload: number) => void;\n  logs?: ILog[];\n  filtered?: ILog[];\n}\n\nclass Log extends React.Component<LogProps, any> {\n  constructor(props: LogProps) {\n    super(props);\n    this.state = { type: LogType.BannerType.label, duration: undefined, message: \"\" };\n  }\n\n  componentDidMount() {\n    this.props.readLogs({ type: \"All\" });\n    this.props.readLogsPoll(fastPollInterval);\n  }\n\n  componentWillUnmount() {\n    this.props.readLogs({ type: LogType.BannerType.label });\n    this.props.readLogsPoll(fastPollInterval);\n  }\n\n  handleChange = (field: \"label\" | \"type\" | \"message\", log?: DeepPartial<ILog>) => {\n    return (value: any) => {\n      const { editing } = this.state;\n      switch (field) {\n        case \"label\":\n          return this.setState(log === undefined ? { label: value } : { editing: merge(editing, { label: value }) });\n        case \"type\":\n        case \"message\":\n        default:\n          return this.setState(\n            log === undefined ? { [field]: value } : { editing: merge(editing, { [field]: value }) }\n          );\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { type, duration, message } = this.state;\n    this.props.createLog({ type, duration, message });\n    this.setState({ type: LogType.BannerType.label, duration: undefined, message: \"\" });\n  };\n\n  handleEdit = (log: DeepPartial<ILog>) => {\n    const { id, type, message } = log;\n    this.setState({ editing: { id, type, message } });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { id, type, message } = this.state?.editing || {};\n    this.props.updateLog({ id, type, message });\n    this.setState({ editing: null });\n  };\n\n  handleDelete = (log: DeepPartial<ILog>) => {\n    const { id } = log;\n    if (id !== undefined) {\n      this.props.deleteLog(id);\n    }\n  };\n\n  render() {\n    const { filtered } = this.props;\n    const { message, editing } = this.state;\n    return (\n      <div className={\"log\"}>\n        <Header {...this.props} />\n        <h2>Display Banner</h2>\n        <div className=\"create\">\n          <Card interactive>\n            <div></div>\n            <div>\n              <b>Message</b>\n            </div>\n            <div>\n              <input\n                className={Classes.INPUT}\n                type=\"text\"\n                value={message}\n                onChange={(e) => this.handleChange(\"message\")(e.target.value)}\n              />\n            </div>\n            <div>\n              <Button icon={IconNames.ADD_TO_ARTIFACT} intent={Intent.PRIMARY} minimal onClick={this.handleCreate} />\n            </div>\n          </Card>\n        </div>\n        <h1>Logs</h1>\n        <div className=\"list\">\n          {filtered\n            ?.filter((l) => l.type !== LogType.BannerType.label)\n            .map((log, i) => {\n              return isFinite(log.id) && log.id === editing?.id ? (\n                <Card key={log.id || log.sequence || i} interactive>\n                  <div></div>\n                  <div>\n                    <Popover2\n                      content={\n                        <Menu>\n                          {LogType.values\n                            .filter((t) => t.label !== LogType.BannerType.label)\n                            .map((t) => (\n                              <MenuItem\n                                key={t.name}\n                                text={t.label}\n                                onClick={() => this.handleChange(\"type\", log)(t.label)}\n                              />\n                            ))}\n                        </Menu>\n                      }\n                      placement=\"bottom-end\"\n                    >\n                      <Button rightIcon={IconNames.CARET_DOWN} minimal>\n                        {log.type}\n                      </Button>\n                    </Popover2>\n                  </div>\n                  <div>\n                    <input\n                      className={Classes.INPUT}\n                      type=\"text\"\n                      value={editing.message}\n                      onChange={(e) => this.handleChange(\"message\", log)(e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Button\n                      icon={IconNames.FLOPPY_DISK}\n                      intent={Intent.PRIMARY}\n                      minimal\n                      onClick={() => this.handleSave()}\n                    />\n                    <Button\n                      icon={IconNames.CROSS}\n                      intent={Intent.PRIMARY}\n                      minimal\n                      onClick={() => this.handleCancel()}\n                    />\n                  </div>\n                </Card>\n              ) : (\n                <Card key={log.id || log.sequence || i} interactive>\n                  <div>[{moment(log.updatedAt).format(\"y-m-d H:m:s\")}]</div>\n                  <div>\n                    <b>{log.type}</b>\n                  </div>\n                  <div>{`${log.message}${(log?.count || 0) > 1 ? ` (${log.count})` : \"\"}`}</div>\n                  <div>\n                    {isFinite(log.id) && (\n                      <Button\n                        icon={IconNames.EDIT}\n                        intent={Intent.PRIMARY}\n                        minimal\n                        onClick={() => this.handleEdit(log)}\n                      />\n                    )}\n                    {isFinite(log.id) && (\n                      <Button\n                        icon={IconNames.TRASH}\n                        intent={Intent.WARNING}\n                        minimal\n                        onClick={() => this.handleDelete(log)}\n                        disabled={log.type === LogType.BannerType.label}\n                      />\n                    )}\n                  </div>\n                </Card>\n              );\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  logs: selectReadLogs(state),\n  filtered: selectFilterLogs(state),\n});\n\nconst mapActionToProps = { readLogs, readLogsPoll, filterLogs, createLog, updateLog, deleteLog };\n\nexport default connect(mapStateToProps, mapActionToProps)(Log);\n","import Log from \"./Log\";\nimport RouteBase from \"routes/RouteBase\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Log {...p} />} />;\n\nexport default Root;\n"],"names":["Log","props","handleChange","field","log","value","editing","state","setState","undefined","label","merge","handleCreate","type","duration","message","createLog","LogType","handleEdit","id","handleCancel","handleSave","updateLog","handleDelete","deleteLog","this","readLogs","readLogsPoll","fastPollInterval","filtered","className","interactive","Classes","onChange","e","target","icon","IconNames","intent","Intent","minimal","onClick","filter","l","map","i","isFinite","content","t","text","name","placement","rightIcon","sequence","moment","updatedAt","format","count","disabled","React","mapActionToProps","filterLogs","connect","logs","selectReadLogs","selectFilterLogs","RouteBase","renderRoute","p"],"sourceRoot":""}