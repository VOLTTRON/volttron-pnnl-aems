{"version":3,"file":"static/js/810.6d364444.chunk.js","mappings":"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","sources":["routes/Account/Account.tsx","routes/Account/index.tsx"],"sourcesContent":["import \"./style.scss\";\n\nimport {\n  Button,\n  Card,\n  Checkbox,\n  Icon,\n  InputGroup,\n  Intent,\n  Label,\n} from \"@blueprintjs/core\";\n\nimport { DeepPartial } from \"../../utils/types\";\nimport { Header } from \"components\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { connect } from \"react-redux\";\nimport { flatten, get, isEqual, merge, omit, uniq, xor } from \"lodash\";\nimport {\n  IUser,\n  createUser,\n  readUsers,\n  selectUsers,\n  filterUsers,\n  selectFilterUsers,\n  IFilter,\n  updateUser,\n  deleteUser,\n} from \"controllers/users/action\";\nimport { updateUser as updateCurrent } from \"controllers/user/action\";\nimport { RoleType } from \"common\";\nimport { selectUser } from \"controllers/user/action\";\nimport { zxcvbn, zxcvbnOptions } from \"@zxcvbn-ts/core\";\nimport * as zxcvbnCommonPackage from \"@zxcvbn-ts/language-common\";\nimport * as zxcvbnEnPackage from \"@zxcvbn-ts/language-en\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { IUnit, selectReadUnits } from \"controllers/units/action\";\n\nconst options = {\n  dictionary: {\n    ...zxcvbnCommonPackage.dictionary,\n    ...zxcvbnEnPackage.dictionary,\n  },\n  graphs: zxcvbnCommonPackage.adjacencyGraphs,\n  translations: zxcvbnEnPackage.translations,\n};\nzxcvbnOptions.setOptions(options);\n\ninterface AccountProps extends RootProps {\n  readUsers: () => void;\n  filterUsers: (payload: IFilter) => void;\n  createUser: (payload: DeepPartial<IUser>) => void;\n  updateUser: (payload: DeepPartial<IUser>) => void;\n  deleteUser: (payload: string) => void;\n  updateCurrent: (payload: DeepPartial<IUser>) => void;\n  user?: IUser;\n  accounts?: IUser[];\n  filtered?: IUser[];\n  units?: IUnit[];\n}\n\ninterface AccountState {\n  name: string;\n  email: string;\n  role: string;\n  password: string;\n  verify: string;\n  units: { id: number }[];\n  editing: (DeepPartial<IUser> & { password: string; verify: string }) | null;\n  show: \"create-pw\" | \"create-pwv\" | \"edit-pw\" | \"edit-pwv\" | null;\n}\n\nclass Account extends React.Component<AccountProps, AccountState> {\n  constructor(props: AccountProps) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      units: [],\n      editing: null,\n      show: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    if (this.isAdmin()) {\n      this.props.readUsers();\n    } else {\n      this.setState({\n        editing: user ? { id: user.id, password: \"\", verify: \"\" } : null,\n      });\n    }\n  }\n\n  handleChange = (field: keyof AccountState, account?: DeepPartial<IUser>) => {\n    return (value: string | number) => {\n      const { editing } = this.state;\n      switch (field) {\n        // @ts-expect-error\n        case \"role\":\n          const role =\n            account === undefined\n              ? this.state.role\n              : get(editing, \"role\", account?.role ?? \"\");\n          value = xor(role.split(\" \"), [value]).join(\" \");\n        case \"name\":\n        case \"email\":\n        case \"password\":\n        case \"verify\":\n          return this.setState(\n            // @ts-expect-error\n            account === undefined\n              ? { [field]: value }\n              : { editing: merge(editing, { [field]: value }) }\n          );\n        case \"units\":\n          return this.setState(\n            // @ts-expect-error\n            account === undefined\n              ? { units: xor(this.state.units, [{ id: value }]) }\n              : {\n                  editing: merge(editing, {\n                    units: xor(editing?.units ?? [], [{ id: value as number }]),\n                  }),\n                }\n          );\n        default:\n          throw new Error(`Unhandled field passed to handleChange function.`);\n      }\n    };\n  };\n\n  handleCreate = () => {\n    const { name, email, role, password } = this.state;\n    this.props.createUser({ name, email, role, password });\n    this.setState({\n      name: \"\",\n      email: \"\",\n      role: \"\",\n      password: \"\",\n      verify: \"\",\n      units: [],\n      editing: null,\n      show: null,\n    });\n  };\n\n  handleEdit = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    this.setState({ editing: { id, password: \"\", verify: \"\" } });\n  };\n\n  handleCancel = () => {\n    this.setState({ editing: null });\n  };\n\n  handleSave = () => {\n    const { user } = this.props;\n    const account = omit(this.state?.editing, [\n      \"verify\",\n      ...(this.state?.editing?.password ? [] : [\"password\"]),\n    ]);\n    if (this.isAdmin()) {\n      if (account) {\n        this.props.updateUser(account);\n      }\n      this.setState({ editing: null });\n    } else {\n      if (account) {\n        this.props.updateCurrent(account);\n      }\n      this.setState({\n        editing: user ? { id: user.id, password: \"\", verify: \"\" } : null,\n      });\n    }\n  };\n\n  handleDelete = (account: DeepPartial<IUser>) => {\n    const { id } = account;\n    if (id !== undefined) {\n      this.props.deleteUser(id);\n    }\n  };\n\n  isCreate() {\n    const { name, email, role, password, verify } = this.state;\n    if (!(name && email && password)) {\n      return false;\n    }\n    const errors = this.getErrors(name, email, role, password, verify);\n    const isErrors =\n      errors.email ||\n      errors.name ||\n      errors.verify ||\n      errors.password?.feedback.warning;\n    return !isErrors;\n  }\n\n  isSave(account: IUser) {\n    const { editing } = this.state;\n    const { name, email, role, password, verify } = merge(\n      { verify: \"\" },\n      account,\n      this.state.editing\n    );\n    const errors = this.getErrors(name, email, role, password, verify);\n    const updated = merge({}, account, editing);\n    const isErrors =\n      errors.email ||\n      errors.name ||\n      errors.verify ||\n      errors.password?.feedback.warning;\n    const isUpdated = !isEqual(\n      merge({ password: \"\" }, account),\n      omit(updated, [\"verify\"])\n    );\n    return !isErrors && isUpdated;\n  }\n\n  isAdmin() {\n    const { user } = this.props;\n    return RoleType.Admin.granted(...(user?.role.split(\" \") ?? [\"\"]));\n  }\n\n  parseRole(role: string) {\n    const roles = role\n      .split(\" \")\n      .map((v) => RoleType.parse(v)?.name)\n      .filter((v): v is string => !!v);\n    const grants = uniq(\n      flatten(role.split(\" \").map((v) => RoleType.parse(v)?.grants))\n    ).filter((v): v is string => !!v);\n    return { roles, grants };\n  }\n\n  getUnits(user: IUser) {\n    const { units } = this.props;\n    return units?.filter((v) => !!user.units?.find((u) => v.id === u.id)) ?? [];\n  }\n\n  getErrors(\n    name: string,\n    email: string,\n    role: string,\n    password: string | undefined,\n    verify: string\n  ) {\n    const errorName =\n      name !== \"\" && name.length < 2 ? \"User name must be specified.\" : null;\n    const errorEmail =\n      email !== \"\" && !/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/i.test(email)\n        ? \"Valid email must be specified.\"\n        : null;\n    const errorPw =\n      password === \"\" ? null : zxcvbn(password ?? \"\", [name, email]);\n    const errorPwv =\n      password === \"\" || password === verify\n        ? null\n        : \"New password and verify password must match.\";\n    return {\n      name: errorName,\n      email: errorEmail,\n      password: errorPw,\n      verify: errorPwv,\n    };\n  }\n\n  renderAccount(account?: IUser) {\n    const { units } = this.props;\n    const { show } = this.state;\n    const { name, email, role, password, verify } = account\n      ? merge({ verify: \"\" }, account, this.state.editing)\n      : this.state;\n    const { roles, grants } = this.parseRole(role);\n    const checked = account ? this.getUnits(account) : [];\n    const showPw = account ? \"edit-pw\" : \"create-pw\";\n    const showPwv = account ? \"edit-pwv\" : \"create-pwv\";\n    const errors = this.getErrors(name, email, role, password, verify);\n    return (\n      <>\n        <div>\n          <Label>\n            <b>Name</b>\n            <InputGroup\n              type=\"text\"\n              value={name}\n              onChange={(e) =>\n                this.handleChange(\"name\", account)(e.target.value)\n              }\n              readOnly={!this.isAdmin()}\n              intent={errors.name ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.name && (\n                    <Tooltip2 content={errors.name}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Email</b>\n            <InputGroup\n              type=\"text\"\n              value={email}\n              onChange={(e) =>\n                this.handleChange(\"email\", account)(e.target.value)\n              }\n              readOnly={!this.isAdmin()}\n              intent={errors.email ? Intent.DANGER : undefined}\n              rightElement={\n                <div className=\"icons\">\n                  {errors.email && (\n                    <Tooltip2 content={errors.email}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>New Password</b>\n            <InputGroup\n              type={show === showPw ? \"text\" : \"password\"}\n              autoComplete=\"new-password\"\n              value={password}\n              onChange={(e) =>\n                this.handleChange(\"password\", account)(e.target.value)\n              }\n              intent={\n                errors.password &&\n                (errors.password.feedback.warning ||\n                  errors.password.feedback.suggestions.length > 0)\n                  ? errors.password.feedback.warning\n                    ? Intent.DANGER\n                    : Intent.WARNING\n                  : undefined\n              }\n              rightElement={\n                <div className=\"icons\">\n                  {errors.password &&\n                    (errors.password.feedback.warning ||\n                      errors.password.feedback.suggestions.length > 0) && (\n                      <Tooltip2\n                        content={\n                          errors.password.feedback.warning ||\n                          errors.password.feedback.suggestions.join(\" \\n\")\n                        }\n                      >\n                        <Icon\n                          className=\"icon\"\n                          icon={IconNames.INFO_SIGN}\n                          intent={\n                            errors.password.feedback.warning\n                              ? Intent.DANGER\n                              : Intent.WARNING\n                          }\n                        />\n                      </Tooltip2>\n                    )}\n                  <Button\n                    minimal\n                    icon={\n                      show === showPw ? IconNames.EYE_OFF : IconNames.EYE_OPEN\n                    }\n                    onClick={() =>\n                      this.setState({ show: show === showPw ? null : showPw })\n                    }\n                  />\n                </div>\n              }\n            />\n          </Label>\n          <Label>\n            <b>Verify Password</b>\n            <InputGroup\n              type={show === showPwv ? \"text\" : \"password\"}\n              value={verify}\n              onChange={(e) =>\n                this.handleChange(\"verify\", account)(e.target.value)\n              }\n              intent={\n                errors.verify\n                  ? Intent.DANGER\n                  : errors.verify === undefined\n                  ? undefined\n                  : Intent.NONE\n              }\n              rightElement={\n                <div className=\"icons\">\n                  {errors.verify && (\n                    <Tooltip2 content={errors.verify}>\n                      <Icon\n                        className=\"icon\"\n                        icon={IconNames.INFO_SIGN}\n                        intent={Intent.DANGER}\n                      />\n                    </Tooltip2>\n                  )}\n                  <Button\n                    minimal\n                    icon={\n                      show === showPwv ? IconNames.EYE_OFF : IconNames.EYE_OPEN\n                    }\n                    onClick={() =>\n                      this.setState({ show: show === showPwv ? null : showPwv })\n                    }\n                  />\n                </div>\n              }\n            />\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>Roles</b>\n            {RoleType.values.map((v) => (\n              <Checkbox\n                key={`cb-role-${v.name}`}\n                id={v.name}\n                label={`${v.label} Role`}\n                checked={roles.includes(v.name)}\n                indeterminate={\n                  !roles.includes(v.name) && grants.includes(v.name)\n                }\n                onChange={() => this.handleChange(\"role\", account)(v.name)}\n                disabled={!this.isAdmin()}\n              />\n            ))}\n          </Label>\n        </div>\n        <div>\n          <Label>\n            <b>Units</b>\n            {units?.map((v) => (\n              <Checkbox\n                key={`cb-unit-${v.id}`}\n                id={String(v.id)}\n                label={v.label}\n                checked={!!checked.find((u) => u.id === v.id)}\n                onChange={() =>\n                  this.handleChange(\"units\", account)(v.id as number)\n                }\n                disabled={!this.isAdmin()}\n              />\n            ))}\n          </Label>\n        </div>\n      </>\n    );\n  }\n\n  renderMyAccount() {\n    const { user } = this.props;\n    if (this.isAdmin() || !user) {\n      return null;\n    }\n    return (\n      <>\n        <h2>My Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount(user)}\n            <div>\n              <Button\n                icon={IconNames.FLOPPY_DISK}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleSave}\n                disabled={!this.isSave(user)}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderCreateAccount() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    return (\n      <>\n        <h2>Create Account</h2>\n        <div className=\"create\">\n          <Card interactive>\n            {this.renderAccount()}\n            <div>\n              <Button\n                icon={IconNames.ADD_TO_ARTIFACT}\n                intent={Intent.PRIMARY}\n                minimal\n                onClick={this.handleCreate}\n                disabled={!this.isCreate()}\n              />\n            </div>\n          </Card>\n        </div>\n      </>\n    );\n  }\n\n  renderAccountList() {\n    if (!this.isAdmin()) {\n      return null;\n    }\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    return (\n      <>\n        <h1>Accounts</h1>\n        <div className=\"list\">\n          {filtered?.map((account, i) => {\n            return account.id === editing?.id ? (\n              <Card key={account.id || i} interactive>\n                {this.renderAccount(account)}\n                <div>\n                  <Button\n                    icon={IconNames.FLOPPY_DISK}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleSave()}\n                    disabled={!this.isSave(account)}\n                  />\n                  <Button\n                    icon={IconNames.CROSS}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleCancel()}\n                  />\n                </div>\n              </Card>\n            ) : (\n              <Card key={account.id || i} interactive>\n                <div>{account.name}</div>\n                <div>{account.email}</div>\n                <div>{account.role}</div>\n                <div>\n                  <Button\n                    icon={IconNames.EDIT}\n                    intent={Intent.PRIMARY}\n                    minimal\n                    onClick={() => this.handleEdit(account)}\n                  />\n                  <Button\n                    icon={IconNames.TRASH}\n                    intent={Intent.WARNING}\n                    minimal\n                    onClick={() => this.handleDelete(account)}\n                  />\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    return (\n      <div className={\"account\"}>\n        <Header {...this.props} />\n        {this.renderMyAccount()}\n        {this.renderCreateAccount()}\n        {this.renderAccountList()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  user: selectUser(state),\n  accounts: selectUsers(state),\n  filtered: selectFilterUsers(state),\n  units: selectReadUnits(state),\n});\n\nconst mapActionToProps = {\n  readUsers,\n  filterUsers,\n  createUser,\n  updateUser,\n  deleteUser,\n  updateCurrent,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(Account);\n","import Account from \"./Account\";\nimport RouteBase from \"routes/RouteBase\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Account {...p} />} />;\n\nexport default Root;\n"],"names":["options","dictionary","zxcvbnCommonPackage","zxcvbnEnPackage","graphs","translations","zxcvbnOptions","Account","props","handleChange","field","account","value","editing","state","role","undefined","get","xor","split","join","setState","merge","units","id","Error","handleCreate","name","email","password","createUser","verify","show","handleEdit","handleCancel","handleSave","user","omit","isAdmin","updateUser","updateCurrent","handleDelete","deleteUser","this","readUsers","errors","getErrors","feedback","warning","updated","isErrors","isUpdated","isEqual","RoleType","granted","roles","map","v","filter","grants","uniq","flatten","find","u","length","test","zxcvbn","parseRole","checked","getUnits","showPw","showPwv","type","onChange","e","target","readOnly","intent","Intent","rightElement","className","content","icon","IconNames","autoComplete","suggestions","minimal","onClick","label","includes","indeterminate","disabled","String","interactive","renderAccount","isSave","isCreate","filtered","i","renderMyAccount","renderCreateAccount","renderAccountList","React","mapActionToProps","filterUsers","connect","selectUser","accounts","selectUsers","selectFilterUsers","selectReadUnits","RouteBase","renderRoute","p"],"sourceRoot":""}