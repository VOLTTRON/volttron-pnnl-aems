/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}": typeof types.BannerFieldsFragmentDoc,
    "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}": typeof types.CurrentFragmentFragmentDoc,
    "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}": typeof types.ReadFeedbackDocument,
    "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}": typeof types.ReadFileDocument,
    "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}": typeof types.GeographyFieldsFragmentDoc,
    "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}": typeof types.LogFieldsFragmentDoc,
    "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}": typeof types.UserFieldsFragmentDoc,
};
const documents: Documents = {
    "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}": types.BannerFieldsFragmentDoc,
    "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}": types.CurrentFragmentFragmentDoc,
    "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}": types.ReadFeedbackDocument,
    "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}": types.ReadFileDocument,
    "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}": types.GeographyFieldsFragmentDoc,
    "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}": types.LogFieldsFragmentDoc,
    "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}": types.UserFieldsFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}"): (typeof documents)["fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}"): (typeof documents)["query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}"): (typeof documents)["query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}"): (typeof documents)["fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}"): (typeof documents)["fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}"): (typeof documents)["fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;