{"version":3,"file":"static/js/803.b6a2b96e.chunk.js","mappings":"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","sources":["../node_modules/@zxcvbn-ts/core/src/helper.ts","../node_modules/@zxcvbn-ts/core/src/data/const.ts","../node_modules/@zxcvbn-ts/core/src/data/dateSplits.ts","../node_modules/@zxcvbn-ts/core/src/matcher/date/matching.ts","../node_modules/fastest-levenshtein/esm/mod.js","../node_modules/@zxcvbn-ts/core/src/levenshtein.ts","../node_modules/@zxcvbn-ts/core/src/data/l33tTable.ts","../node_modules/@zxcvbn-ts/core/src/data/translationKeys.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/TrieNode.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode.ts","../node_modules/@zxcvbn-ts/core/src/Options.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/reverse.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/getCleanPasswords.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/l33t.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/matching.ts","../node_modules/@zxcvbn-ts/core/src/matcher/regex/matching.ts","../node_modules/@zxcvbn-ts/core/src/scoring/utils.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/scoring/uppercase.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/scoring/l33t.ts","../node_modules/@zxcvbn-ts/core/src/matcher/spatial/scoring.ts","../node_modules/@zxcvbn-ts/core/src/scoring/estimate.ts","../node_modules/@zxcvbn-ts/core/src/matcher/bruteforce/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/date/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/regex/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/repeat/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/sequence/scoring.ts","../node_modules/@zxcvbn-ts/core/src/matcher/separator/scoring.ts","../node_modules/@zxcvbn-ts/core/src/scoring/index.ts","../node_modules/@zxcvbn-ts/core/src/matcher/repeat/matching.ts","../node_modules/@zxcvbn-ts/core/src/matcher/sequence/matching.ts","../node_modules/@zxcvbn-ts/core/src/matcher/spatial/matching.ts","../node_modules/@zxcvbn-ts/core/src/matcher/separator/matching.ts","../node_modules/@zxcvbn-ts/core/src/Matching.ts","../node_modules/@zxcvbn-ts/core/src/TimeEstimates.ts","../node_modules/@zxcvbn-ts/core/src/matcher/bruteforce/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/date/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/dictionary/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/regex/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/repeat/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/sequence/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/spatial/feedback.ts","../node_modules/@zxcvbn-ts/core/src/matcher/separator/feedback.ts","../node_modules/@zxcvbn-ts/core/src/Feedback.ts","../node_modules/@zxcvbn-ts/core/src/index.ts","../node_modules/@zxcvbn-ts/language-common/src/index.ts","../node_modules/@zxcvbn-ts/language-en/src/index.ts","../node_modules/@zxcvbn-ts/language-en/src/translations.ts"],"sourcesContent":["export const empty = (obj) => Object.keys(obj).length === 0;\nexport const extend = (listToExtend, list) => \n// eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\nexport const translate = (string, chrMap) => {\n    let newString = string;\n    Object.entries(chrMap).forEach(([key, value]) => {\n        const escapedKey = key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        const regex = new RegExp(escapedKey, 'g');\n        newString = newString.replace(regex, value);\n    });\n    return newString;\n};\n// mod implementation that works for negative numbers\nexport const mod = (n, m) => ((n % m) + m) % m;\n// sort on i primary, j secondary\nexport const sorted = (matches) => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nexport const buildRankedDictionary = (orderedList) => {\n    const result = {};\n    let counter = 1; // rank starts at 1, not 0\n    orderedList.forEach((word) => {\n        result[word] = counter;\n        counter += 1;\n    });\n    return result;\n};\n//# sourceMappingURL=helper.js.map","import dateSplits from './dateSplits';\nexport const DATE_MAX_YEAR = 2050;\nexport const DATE_MIN_YEAR = 1000;\nexport const DATE_SPLITS = dateSplits;\nexport const BRUTEFORCE_CARDINALITY = 10;\nexport const MIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nexport const MIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nexport const MIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nexport const MIN_YEAR_SPACE = 20;\n// \\xbf-\\xdf is a range for almost all special uppercase letter like Ä and so on\nexport const START_UPPER = /^[A-Z\\xbf-\\xdf][^A-Z\\xbf-\\xdf]+$/;\nexport const END_UPPER = /^[^A-Z\\xbf-\\xdf]+[A-Z\\xbf-\\xdf]$/;\n// \\xdf-\\xff is a range for almost all special lowercase letter like ä and so on\nexport const ALL_UPPER = /^[A-Z\\xbf-\\xdf]+$/;\nexport const ALL_UPPER_INVERTED = /^[^a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER = /^[a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER_INVERTED = /^[^A-Z\\xbf-\\xdf]+$/;\nexport const ONE_LOWER = /[a-z\\xdf-\\xff]/;\nexport const ONE_UPPER = /[A-Z\\xbf-\\xdf]/;\nexport const ALPHA_INVERTED = /[^A-Za-z\\xbf-\\xdf]/gi;\nexport const ALL_DIGIT = /^\\d+$/;\nexport const REFERENCE_YEAR = new Date().getFullYear();\nexport const REGEXEN = { recentYear: /19\\d\\d|200\\d|201\\d|202\\d/g };\n/* Separators */\nexport const SEPERATOR_CHARS = [\n    ' ',\n    ',',\n    ';',\n    ':',\n    '|',\n    '/',\n    '\\\\',\n    '_',\n    '.',\n    '-',\n];\nexport const SEPERATOR_CHAR_COUNT = SEPERATOR_CHARS.length;\n//# sourceMappingURL=const.js.map","export default {\n    4: [\n        // for length-4 strings, eg 1191 or 9111, two ways to split:\n        [1, 2],\n        [2, 3], // 91 1 1\n    ],\n    5: [\n        [1, 3],\n        [2, 3],\n        //  [2, 3], // 91 1 11    <- duplicate previous one\n        [2, 4], // 91 11 1    <- New and must be added as bug fix\n    ],\n    6: [\n        [1, 2],\n        [2, 4],\n        [4, 5], // 1991 1 1\n    ],\n    //  1111991\n    7: [\n        [1, 3],\n        [2, 3],\n        [4, 5],\n        [4, 6], // 1991 11 1\n    ],\n    8: [\n        [2, 4],\n        [4, 6], // 1991 11 11\n    ],\n};\n//# sourceMappingURL=dateSplits.js.map","import { DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, REFERENCE_YEAR, } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  date matching ----------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchDate {\n    /*\n     * a \"date\" is recognized as:\n     *   any 3-tuple that starts or ends with a 2- or 4-digit year,\n     *   with 2 or 0 separator chars (1.1.91 or 1191),\n     *   maybe zero-padded (01-01-91 vs 1-1-91),\n     *   a month between 1 and 12,\n     *   a day between 1 and 31.\n     *\n     * note: this isn't true date parsing in that \"feb 31st\" is allowed,\n     * this doesn't check for leap years, etc.\n     *\n     * recipe:\n     * start with regex to find maybe-dates, then attempt to map the integers\n     * onto month-day-year to filter the maybe-dates into dates.\n     * finally, remove matches that are substrings of other matches to reduce noise.\n     *\n     * note: instead of using a lazy or greedy regex to find many dates over the full string,\n     * this uses a ^...$ regex against every substring of the password -- less performant but leads\n     * to every possible date match.\n     */\n    match({ password }) {\n        const matches = [\n            ...this.getMatchesWithoutSeparator(password),\n            ...this.getMatchesWithSeparator(password),\n        ];\n        const filteredMatches = this.filterNoise(matches);\n        return sorted(filteredMatches);\n    }\n    getMatchesWithSeparator(password) {\n        const matches = [];\n        const maybeDateWithSeparator = /^(\\d{1,4})([\\s/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n        // # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n        for (let i = 0; i <= Math.abs(password.length - 6); i += 1) {\n            for (let j = i + 5; j <= i + 9; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                const regexMatch = maybeDateWithSeparator.exec(token);\n                if (regexMatch != null) {\n                    const dmy = this.mapIntegersToDayMonthYear([\n                        parseInt(regexMatch[1], 10),\n                        parseInt(regexMatch[3], 10),\n                        parseInt(regexMatch[4], 10),\n                    ]);\n                    if (dmy != null) {\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: regexMatch[2],\n                            year: dmy.year,\n                            month: dmy.month,\n                            day: dmy.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-statements\n    getMatchesWithoutSeparator(password) {\n        const matches = [];\n        const maybeDateNoSeparator = /^\\d{4,8}$/;\n        const metric = (candidate) => Math.abs(candidate.year - REFERENCE_YEAR);\n        // # dates without separators are between length 4 '1191' and 8 '11111991'\n        for (let i = 0; i <= Math.abs(password.length - 4); i += 1) {\n            for (let j = i + 3; j <= i + 7; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                if (maybeDateNoSeparator.exec(token)) {\n                    const candidates = [];\n                    const index = token.length;\n                    const splittedDates = DATE_SPLITS[index];\n                    splittedDates.forEach(([k, l]) => {\n                        const dmy = this.mapIntegersToDayMonthYear([\n                            parseInt(token.slice(0, k), 10),\n                            parseInt(token.slice(k, l), 10),\n                            parseInt(token.slice(l), 10),\n                        ]);\n                        if (dmy != null) {\n                            candidates.push(dmy);\n                        }\n                    });\n                    if (candidates.length > 0) {\n                        /*\n                         * at this point: different possible dmy mappings for the same i,j substring.\n                         * match the candidate date that likely takes the fewest guesses: a year closest\n                         * to 2000.\n                         * (scoring.REFERENCE_YEAR).\n                         *\n                         * ie, considering '111504', prefer 11-15-04 to 1-1-1504\n                         * (interpreting '04' as 2004)\n                         */\n                        let bestCandidate = candidates[0];\n                        let minDistance = metric(candidates[0]);\n                        candidates.slice(1).forEach((candidate) => {\n                            const distance = metric(candidate);\n                            if (distance < minDistance) {\n                                bestCandidate = candidate;\n                                minDistance = distance;\n                            }\n                        });\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: '',\n                            year: bestCandidate.year,\n                            month: bestCandidate.month,\n                            day: bestCandidate.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /*\n     * matches now contains all valid date strings in a way that is tricky to capture\n     * with regexes only. while thorough, it will contain some unintuitive noise:\n     *\n     * '2015_06_04', in addition to matching 2015_06_04, will also contain\n     * 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n     *\n     * to reduce noise, remove date matches that are strict substrings of others\n     */\n    filterNoise(matches) {\n        return matches.filter((match) => {\n            let isSubmatch = false;\n            const matchesLength = matches.length;\n            for (let o = 0; o < matchesLength; o += 1) {\n                const otherMatch = matches[o];\n                if (match !== otherMatch) {\n                    if (otherMatch.i <= match.i && otherMatch.j >= match.j) {\n                        isSubmatch = true;\n                        break;\n                    }\n                }\n            }\n            return !isSubmatch;\n        });\n    }\n    /*\n     * given a 3-tuple, discard if:\n     *   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n     *   middle int is zero\n     *   any int is over the max allowable year\n     *   any int is over two digits but under the min allowable year\n     *   2 integers are over 31, the max allowable day\n     *   2 integers are zero\n     *   all integers are over 12, the max allowable month\n     */\n    // eslint-disable-next-line complexity, max-statements\n    mapIntegersToDayMonthYear(integers) {\n        if (integers[1] > 31 || integers[1] <= 0) {\n            return null;\n        }\n        let over12 = 0;\n        let over31 = 0;\n        let under1 = 0;\n        for (let o = 0, len1 = integers.length; o < len1; o += 1) {\n            const int = integers[o];\n            if ((int > 99 && int < DATE_MIN_YEAR) || int > DATE_MAX_YEAR) {\n                return null;\n            }\n            if (int > 31) {\n                over31 += 1;\n            }\n            if (int > 12) {\n                over12 += 1;\n            }\n            if (int <= 0) {\n                under1 += 1;\n            }\n        }\n        if (over31 >= 2 || over12 === 3 || under1 >= 2) {\n            return null;\n        }\n        return this.getDayMonth(integers);\n    }\n    // eslint-disable-next-line max-statements\n    getDayMonth(integers) {\n        // first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n        const possibleYearSplits = [\n            [integers[2], integers.slice(0, 2)],\n            [integers[0], integers.slice(1, 3)], // year first\n        ];\n        const possibleYearSplitsLength = possibleYearSplits.length;\n        for (let j = 0; j < possibleYearSplitsLength; j += 1) {\n            const [y, rest] = possibleYearSplits[j];\n            if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n                const dm = this.mapIntegersToDayMonth(rest);\n                if (dm != null) {\n                    return {\n                        year: y,\n                        month: dm.month,\n                        day: dm.day,\n                    };\n                }\n                /*\n                 * for a candidate that includes a four-digit year,\n                 * when the remaining integers don't match to a day and month,\n                 * it is not a date.\n                 */\n                return null;\n            }\n        }\n        // given no four-digit year, two digit years are the most flexible int to match, so\n        // try to parse a day-month out of integers[0..1] or integers[1..0]\n        for (let k = 0; k < possibleYearSplitsLength; k += 1) {\n            const [y, rest] = possibleYearSplits[k];\n            const dm = this.mapIntegersToDayMonth(rest);\n            if (dm != null) {\n                return {\n                    year: this.twoToFourDigitYear(y),\n                    month: dm.month,\n                    day: dm.day,\n                };\n            }\n        }\n        return null;\n    }\n    mapIntegersToDayMonth(integers) {\n        const temp = [integers, integers.slice().reverse()];\n        for (let i = 0; i < temp.length; i += 1) {\n            const data = temp[i];\n            const day = data[0];\n            const month = data[1];\n            if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {\n                return {\n                    day,\n                    month,\n                };\n            }\n        }\n        return null;\n    }\n    twoToFourDigitYear(year) {\n        if (year > 99) {\n            return year;\n        }\n        if (year > 50) {\n            // 87 -> 1987\n            return year + 1900;\n        }\n        // 15 -> 2015\n        return year + 2000;\n    }\n}\nexport default MatchDate;\n//# sourceMappingURL=matching.js.map","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","import { distance } from 'fastest-levenshtein';\nconst getUsedThreshold = (password, entry, threshold) => {\n    const isPasswordToShort = password.length <= entry.length;\n    const isThresholdLongerThanPassword = password.length <= threshold;\n    const shouldUsePasswordLength = isPasswordToShort || isThresholdLongerThanPassword;\n    // if password is too small use the password length divided by 4 while the threshold needs to be at least 1\n    return shouldUsePasswordLength ? Math.ceil(password.length / 4) : threshold;\n};\nconst findLevenshteinDistance = (password, rankedDictionary, threshold) => {\n    let foundDistance = 0;\n    const found = Object.keys(rankedDictionary).find((entry) => {\n        const usedThreshold = getUsedThreshold(password, entry, threshold);\n        if (Math.abs(password.length - entry.length) > usedThreshold) {\n            return false;\n        }\n        const foundEntryDistance = distance(password, entry);\n        const isInThreshold = foundEntryDistance <= usedThreshold;\n        if (isInThreshold) {\n            foundDistance = foundEntryDistance;\n        }\n        return isInThreshold;\n    });\n    if (found) {\n        return {\n            levenshteinDistance: foundDistance,\n            levenshteinDistanceEntry: found,\n        };\n    }\n    return {};\n};\nexport default findLevenshteinDistance;\n//# sourceMappingURL=levenshtein.js.map","export default {\n    a: ['4', '@'],\n    b: ['8'],\n    c: ['(', '{', '[', '<'],\n    d: ['6', '|)'],\n    e: ['3'],\n    f: ['#'],\n    g: ['6', '9', '&'],\n    h: ['#', '|-|'],\n    i: ['1', '!', '|'],\n    k: ['<', '|<'],\n    l: ['!', '1', '|', '7'],\n    m: ['^^', 'nn', '2n', '/\\\\\\\\/\\\\\\\\'],\n    n: ['//'],\n    o: ['0', '()'],\n    q: ['9'],\n    u: ['|_|'],\n    s: ['$', '5'],\n    t: ['+', '7'],\n    v: ['<', '>', '/'],\n    w: ['^/', 'uu', 'vv', '2u', '2v', '\\\\\\\\/\\\\\\\\/'],\n    x: ['%', '><'],\n    z: ['2'],\n};\n//# sourceMappingURL=l33tTable.js.map","export default {\n    warnings: {\n        straightRow: 'straightRow',\n        keyPattern: 'keyPattern',\n        simpleRepeat: 'simpleRepeat',\n        extendedRepeat: 'extendedRepeat',\n        sequences: 'sequences',\n        recentYears: 'recentYears',\n        dates: 'dates',\n        topTen: 'topTen',\n        topHundred: 'topHundred',\n        common: 'common',\n        similarToCommon: 'similarToCommon',\n        wordByItself: 'wordByItself',\n        namesByThemselves: 'namesByThemselves',\n        commonNames: 'commonNames',\n        userInputs: 'userInputs',\n        pwned: 'pwned',\n    },\n    suggestions: {\n        l33t: 'l33t',\n        reverseWords: 'reverseWords',\n        allUppercase: 'allUppercase',\n        capitalization: 'capitalization',\n        dates: 'dates',\n        recentYears: 'recentYears',\n        associatedYears: 'associatedYears',\n        sequences: 'sequences',\n        repeated: 'repeated',\n        longerKeyboardPattern: 'longerKeyboardPattern',\n        anotherWord: 'anotherWord',\n        useWords: 'useWords',\n        noNeed: 'noNeed',\n        pwned: 'pwned',\n    },\n    timeEstimation: {\n        ltSecond: 'ltSecond',\n        second: 'second',\n        seconds: 'seconds',\n        minute: 'minute',\n        minutes: 'minutes',\n        hour: 'hour',\n        hours: 'hours',\n        day: 'day',\n        days: 'days',\n        month: 'month',\n        months: 'months',\n        year: 'year',\n        years: 'years',\n        centuries: 'centuries',\n    },\n};\n//# sourceMappingURL=translationKeys.js.map","export default class TrieNode {\n    constructor(parents = []) {\n        this.parents = parents;\n        // eslint-disable-next-line no-use-before-define\n        this.children = new Map();\n    }\n    addSub(key, ...subs) {\n        const firstChar = key.charAt(0);\n        if (!this.children.has(firstChar)) {\n            this.children.set(firstChar, new TrieNode([...this.parents, firstChar]));\n        }\n        let cur = this.children.get(firstChar);\n        for (let i = 1; i < key.length; i += 1) {\n            const c = key.charAt(i);\n            if (!cur.hasChild(c)) {\n                cur.addChild(c);\n            }\n            cur = cur.getChild(c);\n        }\n        cur.subs = (cur.subs || []).concat(subs);\n        return this;\n    }\n    getChild(child) {\n        return this.children.get(child);\n    }\n    isTerminal() {\n        return !!this.subs;\n    }\n    addChild(child) {\n        if (!this.hasChild(child)) {\n            this.children.set(child, new TrieNode([...this.parents, child]));\n        }\n    }\n    hasChild(child) {\n        return this.children.has(child);\n    }\n}\n//# sourceMappingURL=TrieNode.js.map","export default (l33tTable, triNode) => {\n    Object.entries(l33tTable).forEach(([letter, substitutions]) => {\n        substitutions.forEach((substitution) => {\n            triNode.addSub(substitution, letter);\n        });\n    });\n    return triNode;\n};\n//# sourceMappingURL=l33tTableToTrieNode.js.map","import { buildRankedDictionary } from './helper';\nimport l33tTable from './data/l33tTable';\nimport translationKeys from './data/translationKeys';\nimport TrieNode from './matcher/dictionary/variants/matching/unmunger/TrieNode';\nimport l33tTableToTrieNode from './matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode';\nexport class Options {\n    constructor() {\n        this.matchers = {};\n        this.l33tTable = l33tTable;\n        this.trieNodeRoot = l33tTableToTrieNode(l33tTable, new TrieNode());\n        this.dictionary = {\n            userInputs: [],\n        };\n        this.rankedDictionaries = {};\n        this.rankedDictionariesMaxWordSize = {};\n        this.translations = translationKeys;\n        this.graphs = {};\n        this.useLevenshteinDistance = false;\n        this.levenshteinThreshold = 2;\n        this.l33tMaxSubstitutions = 100;\n        this.maxLength = 256;\n        this.setRankedDictionaries();\n    }\n    // eslint-disable-next-line max-statements,complexity\n    setOptions(options = {}) {\n        if (options.l33tTable) {\n            this.l33tTable = options.l33tTable;\n            this.trieNodeRoot = l33tTableToTrieNode(options.l33tTable, new TrieNode());\n        }\n        if (options.dictionary) {\n            this.dictionary = options.dictionary;\n            this.setRankedDictionaries();\n        }\n        if (options.translations) {\n            this.setTranslations(options.translations);\n        }\n        if (options.graphs) {\n            this.graphs = options.graphs;\n        }\n        if (options.useLevenshteinDistance !== undefined) {\n            this.useLevenshteinDistance = options.useLevenshteinDistance;\n        }\n        if (options.levenshteinThreshold !== undefined) {\n            this.levenshteinThreshold = options.levenshteinThreshold;\n        }\n        if (options.l33tMaxSubstitutions !== undefined) {\n            this.l33tMaxSubstitutions = options.l33tMaxSubstitutions;\n        }\n        if (options.maxLength !== undefined) {\n            this.maxLength = options.maxLength;\n        }\n    }\n    setTranslations(translations) {\n        if (this.checkCustomTranslations(translations)) {\n            this.translations = translations;\n        }\n        else {\n            throw new Error('Invalid translations object fallback to keys');\n        }\n    }\n    checkCustomTranslations(translations) {\n        let valid = true;\n        Object.keys(translationKeys).forEach((type) => {\n            if (type in translations) {\n                const translationType = type;\n                Object.keys(translationKeys[translationType]).forEach((key) => {\n                    if (!(key in translations[translationType])) {\n                        valid = false;\n                    }\n                });\n            }\n            else {\n                valid = false;\n            }\n        });\n        return valid;\n    }\n    setRankedDictionaries() {\n        const rankedDictionaries = {};\n        const rankedDictionariesMaxWorkSize = {};\n        Object.keys(this.dictionary).forEach((name) => {\n            rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name]);\n            rankedDictionariesMaxWorkSize[name] =\n                this.getRankedDictionariesMaxWordSize(this.dictionary[name]);\n        });\n        this.rankedDictionaries = rankedDictionaries;\n        this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize;\n    }\n    getRankedDictionariesMaxWordSize(list) {\n        const data = list.map((el) => {\n            if (typeof el !== 'string') {\n                return el.toString().length;\n            }\n            return el.length;\n        });\n        // do not use Math.max(...data) because it can result in max stack size error because every entry will be used as an argument\n        if (data.length === 0) {\n            return 0;\n        }\n        return data.reduce((a, b) => Math.max(a, b), -Infinity);\n    }\n    buildSanitizedRankedDictionary(list) {\n        const sanitizedInputs = [];\n        list.forEach((input) => {\n            const inputType = typeof input;\n            if (inputType === 'string' ||\n                inputType === 'number' ||\n                inputType === 'boolean') {\n                sanitizedInputs.push(input.toString().toLowerCase());\n            }\n        });\n        return buildRankedDictionary(sanitizedInputs);\n    }\n    extendUserInputsDictionary(dictionary) {\n        if (!this.dictionary.userInputs) {\n            this.dictionary.userInputs = [];\n        }\n        const newList = [...this.dictionary.userInputs, ...dictionary];\n        this.rankedDictionaries.userInputs =\n            this.buildSanitizedRankedDictionary(newList);\n        this.rankedDictionariesMaxWordSize.userInputs =\n            this.getRankedDictionariesMaxWordSize(newList);\n    }\n    addMatcher(name, matcher) {\n        if (this.matchers[name]) {\n            console.info(`Matcher ${name} already exists`);\n        }\n        else {\n            this.matchers[name] = matcher;\n        }\n    }\n}\nexport const zxcvbnOptions = new Options();\n//# sourceMappingURL=Options.js.map","/*\n * -------------------------------------------------------------------------------\n *  Dictionary reverse matching --------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchReverse {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    match({ password }) {\n        const passwordReversed = password.split('').reverse().join('');\n        return this.defaultMatch({\n            password: passwordReversed,\n        }).map((match) => ({\n            ...match,\n            token: match.token.split('').reverse().join(''),\n            reversed: true,\n            // map coordinates back to original string\n            i: password.length - 1 - match.j,\n            j: password.length - 1 - match.i,\n        }));\n    }\n}\nexport default MatchReverse;\n//# sourceMappingURL=reverse.js.map","class CleanPasswords {\n    constructor({ substr, limit, trieRoot }) {\n        this.buffer = [];\n        this.finalPasswords = [];\n        this.substr = substr;\n        this.limit = limit;\n        this.trieRoot = trieRoot;\n    }\n    getAllPossibleSubsAtIndex(index) {\n        const nodes = [];\n        let cur = this.trieRoot;\n        for (let i = index; i < this.substr.length; i += 1) {\n            const character = this.substr.charAt(i);\n            cur = cur.getChild(character);\n            if (!cur) {\n                break;\n            }\n            nodes.push(cur);\n        }\n        return nodes;\n    }\n    // eslint-disable-next-line complexity,max-statements\n    helper({ onlyFullSub, isFullSub, index, subIndex, changes, lastSubLetter, consecutiveSubCount, }) {\n        if (this.finalPasswords.length >= this.limit) {\n            return;\n        }\n        if (index === this.substr.length) {\n            if (onlyFullSub === isFullSub) {\n                this.finalPasswords.push({ password: this.buffer.join(''), changes });\n            }\n            return;\n        }\n        // first, exhaust all possible substitutions at this index\n        const nodes = [...this.getAllPossibleSubsAtIndex(index)];\n        let hasSubs = false;\n        // iterate backward to get wider substitutions first\n        for (let i = index + nodes.length - 1; i >= index; i -= 1) {\n            const cur = nodes[i - index];\n            if (cur.isTerminal()) {\n                // Skip if this would be a 4th or more consecutive substitution of the same letter\n                // this should work in all language as there shouldn't be the same letter more than four times in a row\n                // So we can ignore the rest to save calculation time\n                if (lastSubLetter === cur.parents.join('') &&\n                    consecutiveSubCount >= 3) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n                hasSubs = true;\n                const subs = cur.subs;\n                // eslint-disable-next-line no-restricted-syntax\n                for (const sub of subs) {\n                    this.buffer.push(sub);\n                    const newSubs = changes.concat({\n                        i: subIndex,\n                        letter: sub,\n                        substitution: cur.parents.join(''),\n                    });\n                    // recursively build the rest of the string\n                    this.helper({\n                        onlyFullSub,\n                        isFullSub,\n                        index: i + 1,\n                        subIndex: subIndex + sub.length,\n                        changes: newSubs,\n                        lastSubLetter: cur.parents.join(''),\n                        consecutiveSubCount: lastSubLetter === cur.parents.join('')\n                            ? consecutiveSubCount + 1\n                            : 1,\n                    });\n                    // backtrack by ignoring the added postfix\n                    this.buffer.pop();\n                    if (this.finalPasswords.length >= this.limit) {\n                        return;\n                    }\n                }\n            }\n        }\n        // next, generate all combos without doing a substitution at this index\n        // if a partial substitution is requested or there are no substitutions at this index\n        if (!onlyFullSub || !hasSubs) {\n            const firstChar = this.substr.charAt(index);\n            this.buffer.push(firstChar);\n            this.helper({\n                onlyFullSub,\n                isFullSub: isFullSub && !hasSubs,\n                index: index + 1,\n                subIndex: subIndex + 1,\n                changes,\n                lastSubLetter,\n                consecutiveSubCount,\n            });\n            this.buffer.pop();\n        }\n    }\n    getAll() {\n        // only full substitution\n        this.helper({\n            onlyFullSub: true,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        // only partial substitution\n        this.helper({\n            onlyFullSub: false,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        return this.finalPasswords;\n    }\n}\nconst getCleanPasswords = (password, limit, trieRoot) => {\n    const helper = new CleanPasswords({\n        substr: password,\n        limit,\n        trieRoot,\n    });\n    return helper.getAll();\n};\nexport default getCleanPasswords;\n//# sourceMappingURL=getCleanPasswords.js.map","import { zxcvbnOptions } from '../../../../Options';\nimport getCleanPasswords from './unmunger/getCleanPasswords';\nconst getExtras = (passwordWithSubs, i, j) => {\n    const previousChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i < i;\n    });\n    const iUnsubbed = previousChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, i);\n    const usedChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i >= i && changes.i <= j;\n    });\n    const jUnsubbed = usedChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, j - i + iUnsubbed);\n    const filtered = [];\n    const subDisplay = [];\n    usedChanges.forEach((value) => {\n        const existingIndex = filtered.findIndex((t) => {\n            return t.letter === value.letter && t.substitution === value.substitution;\n        });\n        if (existingIndex < 0) {\n            filtered.push({\n                letter: value.letter,\n                substitution: value.substitution,\n            });\n            subDisplay.push(`${value.substitution} -> ${value.letter}`);\n        }\n    });\n    return {\n        i: iUnsubbed,\n        j: jUnsubbed,\n        subs: filtered,\n        subDisplay: subDisplay.join(', '),\n    };\n};\n/*\n * -------------------------------------------------------------------------------\n *  Dictionary l33t matching -----------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchL33t {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    isAlreadyIncluded(matches, newMatch) {\n        return matches.some((l33tMatch) => {\n            return Object.entries(l33tMatch).every(([key, value]) => {\n                return key === 'subs' || value === newMatch[key];\n            });\n        });\n    }\n    match({ password }) {\n        const matches = [];\n        const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\n        let hasFullMatch = false;\n        let isFullSubstitution = true;\n        subbedPasswords.forEach((subbedPassword) => {\n            if (hasFullMatch) {\n                return;\n            }\n            const matchedDictionary = this.defaultMatch({\n                password: subbedPassword.password,\n                useLevenshtein: isFullSubstitution,\n            });\n            // only the first entry has a full substitution\n            isFullSubstitution = false;\n            matchedDictionary.forEach((match) => {\n                if (!hasFullMatch) {\n                    hasFullMatch = match.i === 0 && match.j === password.length - 1;\n                }\n                const extras = getExtras(subbedPassword, match.i, match.j);\n                const token = password.slice(extras.i, +extras.j + 1 || 9e9);\n                const newMatch = {\n                    ...match,\n                    l33t: true,\n                    token,\n                    ...extras,\n                };\n                const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\n                // only return the matches that contain an actual substitution\n                if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\n                    matches.push(newMatch);\n                }\n            });\n        });\n        // filter single-character l33t matches to reduce noise.\n        // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n        // with low dictionary rank.\n        return matches.filter((match) => match.token.length > 1);\n    }\n}\nexport default MatchL33t;\n//# sourceMappingURL=l33t.js.map","import findLevenshteinDistance from '../../levenshtein';\nimport { sorted } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\nimport Reverse from './variants/matching/reverse';\nimport L33t from './variants/matching/l33t';\nclass MatchDictionary {\n    constructor() {\n        this.l33t = new L33t(this.defaultMatch);\n        this.reverse = new Reverse(this.defaultMatch);\n    }\n    match({ password }) {\n        const matches = [\n            ...this.defaultMatch({\n                password,\n            }),\n            ...this.reverse.match({ password }),\n            ...this.l33t.match({ password }),\n        ];\n        return sorted(matches);\n    }\n    defaultMatch({ password, useLevenshtein = true }) {\n        const matches = [];\n        const passwordLength = password.length;\n        const passwordLower = password.toLowerCase();\n        // eslint-disable-next-line complexity,max-statements\n        Object.keys(zxcvbnOptions.rankedDictionaries).forEach((dictionaryName) => {\n            const rankedDict = zxcvbnOptions.rankedDictionaries[dictionaryName];\n            const longestDictionaryWordSize = zxcvbnOptions.rankedDictionariesMaxWordSize[dictionaryName];\n            const searchWidth = Math.min(longestDictionaryWordSize, passwordLength);\n            for (let i = 0; i < passwordLength; i += 1) {\n                const searchEnd = Math.min(i + searchWidth, passwordLength);\n                for (let j = i; j < searchEnd; j += 1) {\n                    const usedPassword = passwordLower.slice(i, +j + 1 || 9e9);\n                    const isInDictionary = usedPassword in rankedDict;\n                    let foundLevenshteinDistance = {};\n                    // only use levenshtein distance on full password to minimize the performance drop\n                    // and because otherwise there would be to many false positives\n                    const isFullPassword = i === 0 && j === passwordLength - 1;\n                    if (zxcvbnOptions.useLevenshteinDistance &&\n                        isFullPassword &&\n                        !isInDictionary &&\n                        useLevenshtein) {\n                        foundLevenshteinDistance = findLevenshteinDistance(usedPassword, rankedDict, zxcvbnOptions.levenshteinThreshold);\n                    }\n                    const isLevenshteinMatch = Object.keys(foundLevenshteinDistance).length !== 0;\n                    if (isInDictionary || isLevenshteinMatch) {\n                        const usedRankPassword = isLevenshteinMatch\n                            ? foundLevenshteinDistance.levenshteinDistanceEntry\n                            : usedPassword;\n                        const rank = rankedDict[usedRankPassword];\n                        matches.push({\n                            pattern: 'dictionary',\n                            i,\n                            j,\n                            token: password.slice(i, +j + 1 || 9e9),\n                            matchedWord: usedPassword,\n                            rank,\n                            dictionaryName: dictionaryName,\n                            reversed: false,\n                            l33t: false,\n                            ...foundLevenshteinDistance,\n                        });\n                    }\n                }\n            }\n        });\n        return matches;\n    }\n}\nexport default MatchDictionary;\n//# sourceMappingURL=matching.js.map","import { REGEXEN } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  regex matching ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchRegex {\n    match({ password, regexes = REGEXEN }) {\n        const matches = [];\n        Object.keys(regexes).forEach((name) => {\n            const regex = regexes[name];\n            regex.lastIndex = 0; // keeps regexMatch stateless\n            let regexMatch;\n            // eslint-disable-next-line no-cond-assign\n            while ((regexMatch = regex.exec(password))) {\n                if (regexMatch) {\n                    const token = regexMatch[0];\n                    matches.push({\n                        pattern: 'regex',\n                        token,\n                        i: regexMatch.index,\n                        j: regexMatch.index + regexMatch[0].length - 1,\n                        regexName: name,\n                        regexMatch,\n                    });\n                }\n            }\n        });\n        return sorted(matches);\n    }\n}\nexport default MatchRegex;\n//# sourceMappingURL=matching.js.map","export default {\n    // binomial coefficients\n    // src: http://blog.plover.com/math/choose.html\n    nCk(n, k) {\n        let count = n;\n        if (k > count) {\n            return 0;\n        }\n        if (k === 0) {\n            return 1;\n        }\n        let coEff = 1;\n        for (let i = 1; i <= k; i += 1) {\n            coEff *= count;\n            coEff /= i;\n            count -= 1;\n        }\n        return coEff;\n    },\n    log10(n) {\n        if (n === 0)\n            return 0;\n        return Math.log(n) / Math.log(10); // IE doesn't support Math.log10 :(\n    },\n    log2(n) {\n        return Math.log(n) / Math.log(2);\n    },\n    factorial(num) {\n        let rval = 1;\n        for (let i = 2; i <= num; i += 1)\n            rval *= i;\n        return rval;\n    },\n};\n//# sourceMappingURL=utils.js.map","import utils from '../../../../scoring/utils';\nimport { START_UPPER, END_UPPER, ALL_UPPER_INVERTED, ALL_LOWER_INVERTED, ONE_LOWER, ONE_UPPER, ALPHA_INVERTED, } from '../../../../data/const';\nconst getVariations = (cleanedWord) => {\n    const wordArray = cleanedWord.split('');\n    const upperCaseCount = wordArray.filter((char) => char.match(ONE_UPPER)).length;\n    const lowerCaseCount = wordArray.filter((char) => char.match(ONE_LOWER)).length;\n    let variations = 0;\n    const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n    for (let i = 1; i <= variationLength; i += 1) {\n        variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n    }\n    return variations;\n};\nexport default (word) => {\n    // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n    const cleanedWord = word.replace(ALPHA_INVERTED, '');\n    if (cleanedWord.match(ALL_LOWER_INVERTED) ||\n        cleanedWord.toLowerCase() === cleanedWord) {\n        return 1;\n    }\n    // a capitalized word is the most common capitalization scheme,\n    // so it only doubles the search space (uncapitalized + capitalized).\n    // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n    const commonCasesLength = commonCases.length;\n    for (let i = 0; i < commonCasesLength; i += 1) {\n        const regex = commonCases[i];\n        if (cleanedWord.match(regex)) {\n            return 2;\n        }\n    }\n    // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    // the number of ways to lowercase U+L letters with L lowercase letters or less.\n    return getVariations(cleanedWord);\n};\n//# sourceMappingURL=uppercase.js.map","import utils from '../../../../scoring/utils';\nconst countSubstring = (string, substring) => {\n    let count = 0;\n    let pos = string.indexOf(substring);\n    while (pos >= 0) {\n        count += 1;\n        pos = string.indexOf(substring, pos + substring.length);\n    }\n    return count;\n};\nconst getCounts = ({ sub, token }) => {\n    // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n    const tokenLower = token.toLowerCase();\n    // num of subbed chars\n    const subbedCount = countSubstring(tokenLower, sub.substitution);\n    // num of unsubbed chars\n    const unsubbedCount = countSubstring(tokenLower, sub.letter);\n    return {\n        subbedCount,\n        unsubbedCount,\n    };\n};\nexport default ({ l33t, subs, token }) => {\n    if (!l33t) {\n        return 1;\n    }\n    let variations = 1;\n    subs.forEach((sub) => {\n        const { subbedCount, unsubbedCount } = getCounts({ sub, token });\n        if (subbedCount === 0 || unsubbedCount === 0) {\n            // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n            // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n            // unsubbed.)\n            variations *= 2;\n        }\n        else {\n            // this case is similar to capitalization:\n            // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n            const p = Math.min(unsubbedCount, subbedCount);\n            let possibilities = 0;\n            for (let i = 1; i <= p; i += 1) {\n                possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n            }\n            variations *= possibilities;\n        }\n    });\n    return variations;\n};\n//# sourceMappingURL=l33t.js.map","import utils from '../../scoring/utils';\nimport { zxcvbnOptions } from '../../Options';\nconst calcAverageDegree = (graph) => {\n    let average = 0;\n    Object.keys(graph).forEach((key) => {\n        const neighbors = graph[key];\n        average += neighbors.filter((entry) => !!entry).length;\n    });\n    average /= Object.entries(graph).length;\n    return average;\n};\nconst estimatePossiblePatterns = ({ token, graph, turns, }) => {\n    const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\n    const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\n    let guesses = 0;\n    const tokenLength = token.length;\n    // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n    for (let i = 2; i <= tokenLength; i += 1) {\n        const possibleTurns = Math.min(turns, i - 1);\n        for (let j = 1; j <= possibleTurns; j += 1) {\n            guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n        }\n    }\n    return guesses;\n};\nexport default ({ graph, token, shiftedCount, turns, }) => {\n    let guesses = estimatePossiblePatterns({ token, graph, turns });\n    // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    // math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if (shiftedCount) {\n        const unShiftedCount = token.length - shiftedCount;\n        if (shiftedCount === 0 || unShiftedCount === 0) {\n            guesses *= 2;\n        }\n        else {\n            let shiftedVariations = 0;\n            for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n                shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n            }\n            guesses *= shiftedVariations;\n        }\n    }\n    return Math.round(guesses);\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../data/const';\nimport utils from './utils';\nimport { zxcvbnOptions } from '../Options';\nimport bruteforceMatcher from '../matcher/bruteforce/scoring';\nimport dateMatcher from '../matcher/date/scoring';\nimport dictionaryMatcher from '../matcher/dictionary/scoring';\nimport regexMatcher from '../matcher/regex/scoring';\nimport repeatMatcher from '../matcher/repeat/scoring';\nimport sequenceMatcher from '../matcher/sequence/scoring';\nimport spatialMatcher from '../matcher/spatial/scoring';\nimport separatorMatcher from '../matcher/separator/scoring';\nconst getMinGuesses = (match, password) => {\n    let minGuesses = 1;\n    if (match.token.length < password.length) {\n        if (match.token.length === 1) {\n            minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR;\n        }\n        else {\n            minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n        }\n    }\n    return minGuesses;\n};\nconst matchers = {\n    bruteforce: bruteforceMatcher,\n    date: dateMatcher,\n    dictionary: dictionaryMatcher,\n    regex: regexMatcher,\n    repeat: repeatMatcher,\n    sequence: sequenceMatcher,\n    spatial: spatialMatcher,\n    separator: separatorMatcher,\n};\nconst getScoring = (name, match) => {\n    if (matchers[name]) {\n        return matchers[name](match);\n    }\n    if (zxcvbnOptions.matchers[name] &&\n        'scoring' in zxcvbnOptions.matchers[name]) {\n        return zxcvbnOptions.matchers[name].scoring(match);\n    }\n    return 0;\n};\n// ------------------------------------------------------------------------------\n// guess estimation -- one function per match pattern ---------------------------\n// ------------------------------------------------------------------------------\n// eslint-disable-next-line complexity, max-statements\nexport default (match, password) => {\n    const extraData = {};\n    // a match's guess estimate doesn't change. cache it.\n    if ('guesses' in match && match.guesses != null) {\n        return match;\n    }\n    const minGuesses = getMinGuesses(match, password);\n    const estimationResult = getScoring(match.pattern, match);\n    let guesses = 0;\n    if (typeof estimationResult === 'number') {\n        guesses = estimationResult;\n    }\n    else if (match.pattern === 'dictionary') {\n        guesses = estimationResult.calculation;\n        extraData.baseGuesses = estimationResult.baseGuesses;\n        extraData.uppercaseVariations = estimationResult.uppercaseVariations;\n        extraData.l33tVariations = estimationResult.l33tVariations;\n    }\n    const matchGuesses = Math.max(guesses, minGuesses);\n    return {\n        ...match,\n        ...extraData,\n        guesses: matchGuesses,\n        guessesLog10: utils.log10(matchGuesses),\n    };\n};\n//# sourceMappingURL=estimate.js.map","import { BRUTEFORCE_CARDINALITY, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../../data/const';\nexport default ({ token }) => {\n    let guesses = BRUTEFORCE_CARDINALITY ** token.length;\n    if (guesses === Number.POSITIVE_INFINITY) {\n        guesses = Number.MAX_VALUE;\n    }\n    let minGuesses;\n    // small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    // submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    if (token.length === 1) {\n        minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1;\n    }\n    else {\n        minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    }\n    return Math.max(guesses, minGuesses);\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ year, separator }) => {\n    // base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    const yearSpace = Math.max(Math.abs(year - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    let guesses = yearSpace * 365;\n    // add factor of 4 for separator selection (one of ~4 choices)\n    if (separator) {\n        guesses *= 4;\n    }\n    return guesses;\n};\n//# sourceMappingURL=scoring.js.map","import uppercaseVariant from './variants/scoring/uppercase';\nimport l33tVariant from './variants/scoring/l33t';\nexport default ({ rank, reversed, l33t, subs, token, dictionaryName, }) => {\n    const baseGuesses = rank; // keep these as properties for display purposes\n    const uppercaseVariations = uppercaseVariant(token);\n    const l33tVariations = l33tVariant({ l33t, subs, token });\n    const reversedVariations = (reversed && 2) || 1;\n    let calculation;\n    if (dictionaryName === 'diceware') {\n        // diceware dictionaries are special, so we get a simple scoring of 1/2 of 6^5 (6 digits on 5 dice)\n        // to get fix entropy of ~12.9 bits for every entry https://en.wikipedia.org/wiki/Diceware#:~:text=The%20level%20of,bits\n        calculation = 6 ** 5 / 2;\n    }\n    else {\n        calculation =\n            baseGuesses * uppercaseVariations * l33tVariations * reversedVariations;\n    }\n    return {\n        baseGuesses,\n        uppercaseVariations,\n        l33tVariations,\n        calculation,\n    };\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ regexName, regexMatch, token, }) => {\n    const charClassBases = {\n        alphaLower: 26,\n        alphaUpper: 26,\n        alpha: 52,\n        alphanumeric: 62,\n        digits: 10,\n        symbols: 33,\n    };\n    if (regexName in charClassBases) {\n        return (charClassBases[regexName] ** token.length);\n    }\n    // TODO add more regex types for example special dates like 09.11\n    // eslint-disable-next-line default-case\n    switch (regexName) {\n        case 'recentYear':\n            // conservative estimate of year space: num years from REFERENCE_YEAR.\n            // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n            return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    }\n    return 0;\n};\n//# sourceMappingURL=scoring.js.map","export default ({ baseGuesses, repeatCount }) => baseGuesses * repeatCount;\n//# sourceMappingURL=scoring.js.map","export default ({ token, ascending }) => {\n    const firstChr = token.charAt(0);\n    let baseGuesses = 0;\n    const startingPoints = ['a', 'A', 'z', 'Z', '0', '1', '9'];\n    // lower guesses for obvious starting points\n    if (startingPoints.includes(firstChr)) {\n        baseGuesses = 4;\n    }\n    else if (firstChr.match(/\\d/)) {\n        baseGuesses = 10; // digits\n    }\n    else {\n        // could give a higher base for uppercase,\n        // assigning 26 to both upper and lower sequences is more conservative.\n        baseGuesses = 26;\n    }\n    // need to try a descending sequence in addition to every ascending sequence ->\n    // 2x guesses\n    if (!ascending) {\n        baseGuesses *= 2;\n    }\n    return baseGuesses * token.length;\n};\n//# sourceMappingURL=scoring.js.map","import { SEPERATOR_CHAR_COUNT } from '../../data/const';\nexport default () => {\n    return SEPERATOR_CHAR_COUNT;\n};\n//# sourceMappingURL=scoring.js.map","import utils from './utils';\nimport estimateGuesses from './estimate';\nimport { MIN_GUESSES_BEFORE_GROWING_SEQUENCE } from '../data/const';\nconst scoringHelper = {\n    password: '',\n    optimal: {},\n    excludeAdditive: false,\n    separatorRegex: undefined,\n    fillArray(size, valueType) {\n        const result = [];\n        for (let i = 0; i < size; i += 1) {\n            let value = [];\n            if (valueType === 'object') {\n                value = {};\n            }\n            result.push(value);\n        }\n        return result;\n    },\n    // helper: make bruteforce match objects spanning i to j, inclusive.\n    makeBruteforceMatch(i, j) {\n        return {\n            pattern: 'bruteforce',\n            token: this.password.slice(i, +j + 1 || 9e9),\n            i,\n            j,\n        };\n    },\n    // helper: considers whether a length-sequenceLength\n    // sequence ending at match m is better (fewer guesses)\n    // than previously encountered sequences, updating state if so.\n    update(match, sequenceLength) {\n        const k = match.j;\n        const estimatedMatch = estimateGuesses(match, this.password);\n        let pi = estimatedMatch.guesses;\n        if (sequenceLength > 1) {\n            // we're considering a length-sequenceLength sequence ending with match m:\n            // obtain the product term in the minimization function by multiplying m's guesses\n            // by the product of the length-(sequenceLength-1)\n            // sequence ending just before m, at m.i - 1.\n            pi *= this.optimal.pi[estimatedMatch.i - 1][sequenceLength - 1];\n        }\n        // calculate the minimization func\n        let g = utils.factorial(sequenceLength) * pi;\n        if (!this.excludeAdditive) {\n            g += MIN_GUESSES_BEFORE_GROWING_SEQUENCE ** (sequenceLength - 1);\n        }\n        // update state if new best.\n        // first see if any competing sequences covering this prefix,\n        // with sequenceLength or fewer matches,\n        // fare better than this sequence. if so, skip it and return.\n        let shouldSkip = false;\n        Object.keys(this.optimal.g[k]).forEach((competingPatternLength) => {\n            const competingMetricMatch = this.optimal.g[k][competingPatternLength];\n            if (parseInt(competingPatternLength, 10) <= sequenceLength) {\n                if (competingMetricMatch <= g) {\n                    shouldSkip = true;\n                }\n            }\n        });\n        if (!shouldSkip) {\n            // this sequence might be part of the final optimal sequence.\n            this.optimal.g[k][sequenceLength] = g;\n            this.optimal.m[k][sequenceLength] = estimatedMatch;\n            this.optimal.pi[k][sequenceLength] = pi;\n        }\n    },\n    // helper: evaluate bruteforce matches ending at passwordCharIndex.\n    bruteforceUpdate(passwordCharIndex) {\n        // see if a single bruteforce match spanning the passwordCharIndex-prefix is optimal.\n        let match = this.makeBruteforceMatch(0, passwordCharIndex);\n        this.update(match, 1);\n        for (let i = 1; i <= passwordCharIndex; i += 1) {\n            // generate passwordCharIndex bruteforce matches, spanning from (i=1, j=passwordCharIndex) up to (i=passwordCharIndex, j=passwordCharIndex).\n            // see if adding these new matches to any of the sequences in optimal[i-1]\n            // leads to new bests.\n            match = this.makeBruteforceMatch(i, passwordCharIndex);\n            const tmp = this.optimal.m[i - 1];\n            // eslint-disable-next-line no-loop-func\n            Object.keys(tmp).forEach((sequenceLength) => {\n                const lastMatch = tmp[sequenceLength];\n                // corner: an optimal sequence will never have two adjacent bruteforce matches.\n                // it is strictly better to have a single bruteforce match spanning the same region:\n                // same contribution to the guess product with a lower length.\n                // --> safe to skip those cases.\n                if (lastMatch.pattern !== 'bruteforce') {\n                    // try adding m to this length-sequenceLength sequence.\n                    this.update(match, parseInt(sequenceLength, 10) + 1);\n                }\n            });\n        }\n    },\n    // helper: step backwards through optimal.m starting at the end,\n    // constructing the final optimal match sequence.\n    unwind(passwordLength) {\n        const optimalMatchSequence = [];\n        let k = passwordLength - 1;\n        // find the final best sequence length and score\n        let sequenceLength = 0;\n        // eslint-disable-next-line no-loss-of-precision\n        let g = 2e308;\n        const temp = this.optimal.g[k];\n        // safety check for empty passwords\n        if (temp) {\n            Object.keys(temp).forEach((candidateSequenceLength) => {\n                const candidateMetricMatch = temp[candidateSequenceLength];\n                if (candidateMetricMatch < g) {\n                    sequenceLength = parseInt(candidateSequenceLength, 10);\n                    g = candidateMetricMatch;\n                }\n            });\n        }\n        while (k >= 0) {\n            const match = this.optimal.m[k][sequenceLength];\n            optimalMatchSequence.unshift(match);\n            k = match.i - 1;\n            sequenceLength -= 1;\n        }\n        return optimalMatchSequence;\n    },\n};\nexport default {\n    // ------------------------------------------------------------------------------\n    // search --- most guessable match sequence -------------------------------------\n    // ------------------------------------------------------------------------------\n    //\n    // takes a sequence of overlapping matches, returns the non-overlapping sequence with\n    // minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n    // for a length-n password with m candidate matches. l_max is the maximum optimal\n    // sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n    // search terminates rapidly.\n    //\n    // the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n    // minimizes the following function:\n    //\n    //    g = sequenceLength! * Product(m.guesses for m in sequence) + D^(sequenceLength - 1)\n    //\n    // where sequenceLength is the length of the sequence.\n    //\n    // the factorial term is the number of ways to order sequenceLength patterns.\n    //\n    // the D^(sequenceLength-1) term is another length penalty, roughly capturing the idea that an\n    // attacker will try lower-length sequences first before trying length-sequenceLength sequences.\n    //\n    // for example, consider a sequence that is date-repeat-dictionary.\n    //  - an attacker would need to try other date-repeat-dictionary combinations,\n    //    hence the product term.\n    //  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n    //    ..., hence the factorial term.\n    //  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n    //    sequences before length-3. assuming at minimum D guesses per pattern type,\n    //    D^(sequenceLength-1) approximates Sum(D^i for i in [1..sequenceLength-1]\n    //\n    // ------------------------------------------------------------------------------\n    mostGuessableMatchSequence(password, matches, excludeAdditive = false) {\n        scoringHelper.password = password;\n        scoringHelper.excludeAdditive = excludeAdditive;\n        const passwordLength = password.length;\n        // partition matches into sublists according to ending index j\n        let matchesByCoordinateJ = scoringHelper.fillArray(passwordLength, 'array');\n        matches.forEach((match) => {\n            matchesByCoordinateJ[match.j].push(match);\n        });\n        // small detail: for deterministic output, sort each sublist by i.\n        matchesByCoordinateJ = matchesByCoordinateJ.map((match) => match.sort((m1, m2) => m1.i - m2.i));\n        scoringHelper.optimal = {\n            // optimal.m[k][sequenceLength] holds final match in the best length-sequenceLength\n            // match sequence covering the\n            // password prefix up to k, inclusive.\n            // if there is no length-sequenceLength sequence that scores better (fewer guesses) than\n            // a shorter match sequence spanning the same prefix,\n            // optimal.m[k][sequenceLength] is undefined.\n            m: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n            // optimal.pi allows for fast (non-looping) updates to the minimization function.\n            pi: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the overall metric.\n            g: scoringHelper.fillArray(passwordLength, 'object'),\n        };\n        for (let k = 0; k < passwordLength; k += 1) {\n            matchesByCoordinateJ[k].forEach((match) => {\n                if (match.i > 0) {\n                    Object.keys(scoringHelper.optimal.m[match.i - 1]).forEach((sequenceLength) => {\n                        scoringHelper.update(match, parseInt(sequenceLength, 10) + 1);\n                    });\n                }\n                else {\n                    scoringHelper.update(match, 1);\n                }\n            });\n            scoringHelper.bruteforceUpdate(k);\n        }\n        const optimalMatchSequence = scoringHelper.unwind(passwordLength);\n        const optimalSequenceLength = optimalMatchSequence.length;\n        const guesses = this.getGuesses(password, optimalSequenceLength);\n        return {\n            password,\n            guesses,\n            guessesLog10: utils.log10(guesses),\n            sequence: optimalMatchSequence,\n        };\n    },\n    getGuesses(password, optimalSequenceLength) {\n        const passwordLength = password.length;\n        let guesses = 0;\n        if (password.length === 0) {\n            guesses = 1;\n        }\n        else {\n            guesses =\n                scoringHelper.optimal.g[passwordLength - 1][optimalSequenceLength];\n        }\n        return guesses;\n    },\n};\n//# sourceMappingURL=index.js.map","import scoring from '../../scoring';\n/*\n *-------------------------------------------------------------------------------\n * repeats (aaa, abcabcabc) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchRepeat {\n    // eslint-disable-next-line max-statements\n    match({ password, omniMatch }) {\n        const matches = [];\n        let lastIndex = 0;\n        while (lastIndex < password.length) {\n            const greedyMatch = this.getGreedyMatch(password, lastIndex);\n            const lazyMatch = this.getLazyMatch(password, lastIndex);\n            if (greedyMatch == null) {\n                break;\n            }\n            const { match, baseToken } = this.setMatchToken(greedyMatch, lazyMatch);\n            if (match) {\n                const j = match.index + match[0].length - 1;\n                const baseGuesses = this.getBaseGuesses(baseToken, omniMatch);\n                matches.push(this.normalizeMatch(baseToken, j, match, baseGuesses));\n                lastIndex = j + 1;\n            }\n        }\n        const hasPromises = matches.some((match) => {\n            return match instanceof Promise;\n        });\n        if (hasPromises) {\n            return Promise.all(matches);\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-params\n    normalizeMatch(baseToken, j, match, baseGuesses) {\n        const baseMatch = {\n            pattern: 'repeat',\n            i: match.index,\n            j,\n            token: match[0],\n            baseToken,\n            baseGuesses: 0,\n            repeatCount: match[0].length / baseToken.length,\n        };\n        if (baseGuesses instanceof Promise) {\n            return baseGuesses.then((resolvedBaseGuesses) => {\n                return {\n                    ...baseMatch,\n                    baseGuesses: resolvedBaseGuesses,\n                };\n            });\n        }\n        return {\n            ...baseMatch,\n            baseGuesses,\n        };\n    }\n    getGreedyMatch(password, lastIndex) {\n        const greedy = /(.+)\\1+/g;\n        greedy.lastIndex = lastIndex;\n        return greedy.exec(password);\n    }\n    getLazyMatch(password, lastIndex) {\n        const lazy = /(.+?)\\1+/g;\n        lazy.lastIndex = lastIndex;\n        return lazy.exec(password);\n    }\n    setMatchToken(greedyMatch, lazyMatch) {\n        const lazyAnchored = /^(.+?)\\1+$/;\n        let match;\n        let baseToken = '';\n        if (lazyMatch && greedyMatch[0].length > lazyMatch[0].length) {\n            // greedy beats lazy for 'aabaab'\n            // greedy: [aabaab, aab]\n            // lazy:   [aa,     a]\n            match = greedyMatch;\n            // greedy's repeated string might itself be repeated, eg.\n            // aabaab in aabaabaabaab.\n            // run an anchored lazy match on greedy's repeated string\n            // to find the shortest repeated string\n            const temp = lazyAnchored.exec(match[0]);\n            if (temp) {\n                baseToken = temp[1];\n            }\n        }\n        else {\n            // lazy beats greedy for 'aaaaa'\n            // greedy: [aaaa,  aa]\n            // lazy:   [aaaaa, a]\n            match = lazyMatch;\n            if (match) {\n                baseToken = match[1];\n            }\n        }\n        return {\n            match,\n            baseToken,\n        };\n    }\n    getBaseGuesses(baseToken, omniMatch) {\n        const matches = omniMatch.match(baseToken);\n        if (matches instanceof Promise) {\n            return matches.then((resolvedMatches) => {\n                const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, resolvedMatches);\n                return baseAnalysis.guesses;\n            });\n        }\n        const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, matches);\n        return baseAnalysis.guesses;\n    }\n}\nexport default MatchRepeat;\n//# sourceMappingURL=matching.js.map","import { ALL_UPPER, ALL_LOWER, ALL_DIGIT } from '../../data/const';\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n    constructor() {\n        this.MAX_DELTA = 5;\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        /*\n         * Identifies sequences by looking for repeated differences in unicode codepoint.\n         * this allows skipping, such as 9753, and also matches some extended unicode sequences\n         * such as Greek and Cyrillic alphabets.\n         *\n         * for example, consider the input 'abcdb975zy'\n         *\n         * password: a   b   c   d   b    9   7   5   z   y\n         * index:    0   1   2   3   4    5   6   7   8   9\n         * delta:      1   1   1  -2  -41  -2  -2  69   1\n         *\n         * expected result:\n         * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n         */\n        const result = [];\n        if (password.length === 1) {\n            return [];\n        }\n        let i = 0;\n        let lastDelta = null;\n        const passwordLength = password.length;\n        for (let k = 1; k < passwordLength; k += 1) {\n            const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n            if (lastDelta == null) {\n                lastDelta = delta;\n            }\n            if (delta !== lastDelta) {\n                const j = k - 1;\n                this.update({\n                    i,\n                    j,\n                    delta: lastDelta,\n                    password,\n                    result,\n                });\n                i = j;\n                lastDelta = delta;\n            }\n        }\n        this.update({\n            i,\n            j: passwordLength - 1,\n            delta: lastDelta,\n            password,\n            result,\n        });\n        return result;\n    }\n    update({ i, j, delta, password, result }) {\n        if (j - i > 1 || Math.abs(delta) === 1) {\n            const absoluteDelta = Math.abs(delta);\n            if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n                const token = password.slice(i, +j + 1 || 9e9);\n                const { sequenceName, sequenceSpace } = this.getSequence(token);\n                return result.push({\n                    pattern: 'sequence',\n                    i,\n                    j,\n                    token: password.slice(i, +j + 1 || 9e9),\n                    sequenceName,\n                    sequenceSpace,\n                    ascending: delta > 0,\n                });\n            }\n        }\n        return null;\n    }\n    getSequence(token) {\n        // TODO conservatively stick with roman alphabet size.\n        //  (this could be improved)\n        let sequenceName = 'unicode';\n        let sequenceSpace = 26;\n        if (ALL_LOWER.test(token)) {\n            sequenceName = 'lower';\n            sequenceSpace = 26;\n        }\n        else if (ALL_UPPER.test(token)) {\n            sequenceName = 'upper';\n            sequenceSpace = 26;\n        }\n        else if (ALL_DIGIT.test(token)) {\n            sequenceName = 'digits';\n            sequenceSpace = 10;\n        }\n        return {\n            sequenceName,\n            sequenceSpace,\n        };\n    }\n}\nexport default MatchSequence;\n//# sourceMappingURL=matching.js.map","import { sorted, extend } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\n/*\n * ------------------------------------------------------------------------------\n * spatial match (qwerty/dvorak/keypad and so on) -----------------------------------------\n * ------------------------------------------------------------------------------\n */\nclass MatchSpatial {\n    constructor() {\n        this.SHIFTED_RX = /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/;\n    }\n    match({ password }) {\n        const matches = [];\n        Object.keys(zxcvbnOptions.graphs).forEach((graphName) => {\n            const graph = zxcvbnOptions.graphs[graphName];\n            extend(matches, this.helper(password, graph, graphName));\n        });\n        return sorted(matches);\n    }\n    checkIfShifted(graphName, password, index) {\n        if (!graphName.includes('keypad') &&\n            // initial character is shifted\n            this.SHIFTED_RX.test(password.charAt(index))) {\n            return 1;\n        }\n        return 0;\n    }\n    // eslint-disable-next-line complexity, max-statements\n    helper(password, graph, graphName) {\n        let shiftedCount;\n        const matches = [];\n        let i = 0;\n        const passwordLength = password.length;\n        while (i < passwordLength - 1) {\n            let j = i + 1;\n            let lastDirection = null;\n            let turns = 0;\n            shiftedCount = this.checkIfShifted(graphName, password, i);\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const prevChar = password.charAt(j - 1);\n                const adjacents = graph[prevChar] || [];\n                let found = false;\n                let foundDirection = -1;\n                let curDirection = -1;\n                // consider growing pattern by one character if j hasn't gone over the edge.\n                if (j < passwordLength) {\n                    const curChar = password.charAt(j);\n                    const adjacentsLength = adjacents.length;\n                    for (let k = 0; k < adjacentsLength; k += 1) {\n                        const adjacent = adjacents[k];\n                        curDirection += 1;\n                        // eslint-disable-next-line max-depth\n                        if (adjacent) {\n                            const adjacentIndex = adjacent.indexOf(curChar);\n                            // eslint-disable-next-line max-depth\n                            if (adjacentIndex !== -1) {\n                                found = true;\n                                foundDirection = curDirection;\n                                // eslint-disable-next-line max-depth\n                                if (adjacentIndex === 1) {\n                                    // # index 1 in the adjacency means the key is shifted,\n                                    // # 0 means unshifted: A vs a, % vs 5, etc.\n                                    // # for example, 'q' is adjacent to the entry '2@'.\n                                    // # @ is shifted w/ index 1, 2 is unshifted.\n                                    shiftedCount += 1;\n                                }\n                                // eslint-disable-next-line max-depth\n                                if (lastDirection !== foundDirection) {\n                                    // # adding a turn is correct even in the initial\n                                    // case when last_direction is null:\n                                    // # every spatial pattern starts with a turn.\n                                    turns += 1;\n                                    lastDirection = foundDirection;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                // if the current pattern continued, extend j and try to grow again\n                if (found) {\n                    j += 1;\n                    // otherwise push the pattern discovered so far, if any...\n                }\n                else {\n                    // don't consider length 1 or 2 chains.\n                    if (j - i > 2) {\n                        matches.push({\n                            pattern: 'spatial',\n                            i,\n                            j: j - 1,\n                            token: password.slice(i, j),\n                            graph: graphName,\n                            turns,\n                            shiftedCount,\n                        });\n                    }\n                    // ...and then start a new search for the rest of the password.\n                    i = j;\n                    break;\n                }\n            }\n        }\n        return matches;\n    }\n}\nexport default MatchSpatial;\n//# sourceMappingURL=matching.js.map","import { SEPERATOR_CHARS } from '../../data/const';\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\n/*\n *-------------------------------------------------------------------------------\n * separators (any semi-repeated special character) -----------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSeparator {\n    static getMostUsedSeparatorChar(password) {\n        const mostUsedSeperators = [\n            ...password\n                .split('')\n                .filter((c) => separatorRegex.test(c))\n                .reduce((memo, c) => {\n                const m = memo.get(c);\n                if (m) {\n                    memo.set(c, m + 1);\n                }\n                else {\n                    memo.set(c, 1);\n                }\n                return memo;\n            }, new Map())\n                .entries(),\n        ].sort(([_a, a], [_b, b]) => b - a);\n        if (!mostUsedSeperators.length)\n            return undefined;\n        const match = mostUsedSeperators[0];\n        // If the special character is only used once, don't treat it like a separator\n        if (match[1] < 2)\n            return undefined;\n        return match[0];\n    }\n    static getSeparatorRegex(separator) {\n        return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\n        // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\n        // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n        // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        const result = [];\n        if (password.length === 0)\n            return result;\n        const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\n        if (mostUsedSpecial === undefined)\n            return result;\n        const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\n        // eslint-disable-next-line no-restricted-syntax\n        for (const match of password.matchAll(isSeparator)) {\n            // eslint-disable-next-line no-continue\n            if (match.index === undefined)\n                continue;\n            // add one to the index because we changed the regex from negative lookbehind to something simple.\n            // this simple approach uses the first character before the separater too but we only need the index of the separater\n            // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n            const i = match.index + 1;\n            result.push({\n                pattern: 'separator',\n                token: mostUsedSpecial,\n                i,\n                j: i,\n            });\n        }\n        return result;\n    }\n}\nexport default MatchSeparator;\n//# sourceMappingURL=matching.js.map","import { extend, sorted } from './helper';\nimport dateMatcher from './matcher/date/matching';\nimport dictionaryMatcher from './matcher/dictionary/matching';\nimport regexMatcher from './matcher/regex/matching';\nimport repeatMatcher from './matcher/repeat/matching';\nimport sequenceMatcher from './matcher/sequence/matching';\nimport spatialMatcher from './matcher/spatial/matching';\nimport separatorMatcher from './matcher/separator/matching';\nimport { zxcvbnOptions } from './Options';\nclass Matching {\n    constructor() {\n        this.matchers = {\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            // @ts-ignore => TODO resolve this type issue. This is because it is possible to be async\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n    }\n    match(password) {\n        const matches = [];\n        const promises = [];\n        const matchers = [\n            ...Object.keys(this.matchers),\n            ...Object.keys(zxcvbnOptions.matchers),\n        ];\n        matchers.forEach((key) => {\n            if (!this.matchers[key] && !zxcvbnOptions.matchers[key]) {\n                return;\n            }\n            const Matcher = this.matchers[key]\n                ? this.matchers[key]\n                : zxcvbnOptions.matchers[key].Matching;\n            const usedMatcher = new Matcher();\n            const result = usedMatcher.match({\n                password,\n                omniMatch: this,\n            });\n            if (result instanceof Promise) {\n                result.then((response) => {\n                    extend(matches, response);\n                });\n                promises.push(result);\n            }\n            else {\n                extend(matches, result);\n            }\n        });\n        if (promises.length > 0) {\n            return new Promise((resolve, reject) => {\n                Promise.all(promises)\n                    .then(() => {\n                    resolve(sorted(matches));\n                })\n                    .catch((error) => {\n                    reject(error);\n                });\n            });\n        }\n        return sorted(matches);\n    }\n}\nexport default Matching;\n//# sourceMappingURL=Matching.js.map","import { zxcvbnOptions } from './Options';\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n    second: SECOND,\n    minute: MINUTE,\n    hour: HOUR,\n    day: DAY,\n    month: MONTH,\n    year: YEAR,\n    century: CENTURY,\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n    translate(displayStr, value) {\n        let key = displayStr;\n        if (value !== undefined && value !== 1) {\n            key += 's';\n        }\n        const { timeEstimation } = zxcvbnOptions.translations;\n        return timeEstimation[key].replace('{base}', `${value}`);\n    }\n    estimateAttackTimes(guesses) {\n        const crackTimesSeconds = {\n            onlineThrottling100PerHour: guesses / (100 / 3600),\n            onlineNoThrottling10PerSecond: guesses / 10,\n            offlineSlowHashing1e4PerSecond: guesses / 1e4,\n            offlineFastHashing1e10PerSecond: guesses / 1e10,\n        };\n        const crackTimesDisplay = {\n            onlineThrottling100PerHour: '',\n            onlineNoThrottling10PerSecond: '',\n            offlineSlowHashing1e4PerSecond: '',\n            offlineFastHashing1e10PerSecond: '',\n        };\n        Object.keys(crackTimesSeconds).forEach((scenario) => {\n            const seconds = crackTimesSeconds[scenario];\n            crackTimesDisplay[scenario] =\n                this.displayTime(seconds);\n        });\n        return {\n            crackTimesSeconds,\n            crackTimesDisplay,\n            score: this.guessesToScore(guesses),\n        };\n    }\n    guessesToScore(guesses) {\n        const DELTA = 5;\n        if (guesses < 1e3 + DELTA) {\n            // risky password: \"too guessable\"\n            return 0;\n        }\n        if (guesses < 1e6 + DELTA) {\n            // modest protection from throttled online attacks: \"very guessable\"\n            return 1;\n        }\n        if (guesses < 1e8 + DELTA) {\n            // modest protection from unthrottled online attacks: \"somewhat guessable\"\n            return 2;\n        }\n        if (guesses < 1e10 + DELTA) {\n            // modest protection from offline attacks: \"safely unguessable\"\n            // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n            return 3;\n        }\n        // strong protection from offline attacks under same scenario: \"very unguessable\"\n        return 4;\n    }\n    displayTime(seconds) {\n        let displayStr = 'centuries';\n        let base;\n        const timeKeys = Object.keys(times);\n        const foundIndex = timeKeys.findIndex((time) => seconds < times[time]);\n        if (foundIndex > -1) {\n            displayStr = timeKeys[foundIndex - 1];\n            if (foundIndex !== 0) {\n                base = Math.round(seconds / times[displayStr]);\n            }\n            else {\n                displayStr = 'ltSecond';\n            }\n        }\n        return this.translate(displayStr, base);\n    }\n}\nexport default TimeEstimates;\n//# sourceMappingURL=TimeEstimates.js.map","export default () => {\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.dates,\n        suggestions: [zxcvbnOptions.translations.suggestions.dates],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nimport { ALL_UPPER_INVERTED, START_UPPER } from '../../data/const';\nconst getDictionaryWarningPassword = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch && !match.l33t && !match.reversed) {\n        if (match.rank <= 10) {\n            warning = zxcvbnOptions.translations.warnings.topTen;\n        }\n        else if (match.rank <= 100) {\n            warning = zxcvbnOptions.translations.warnings.topHundred;\n        }\n        else {\n            warning = zxcvbnOptions.translations.warnings.common;\n        }\n    }\n    else if (match.guessesLog10 <= 4) {\n        warning = zxcvbnOptions.translations.warnings.similarToCommon;\n    }\n    return warning;\n};\nconst getDictionaryWarningWikipedia = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch) {\n        warning = zxcvbnOptions.translations.warnings.wordByItself;\n    }\n    return warning;\n};\nconst getDictionaryWarningNames = (match, isSoleMatch) => {\n    if (isSoleMatch) {\n        return zxcvbnOptions.translations.warnings.namesByThemselves;\n    }\n    return zxcvbnOptions.translations.warnings.commonNames;\n};\nconst getDictionaryWarning = (match, isSoleMatch) => {\n    let warning = null;\n    const dictName = match.dictionaryName;\n    const isAName = dictName === 'lastnames' || dictName.toLowerCase().includes('firstnames');\n    if (dictName === 'passwords') {\n        warning = getDictionaryWarningPassword(match, isSoleMatch);\n    }\n    else if (dictName.includes('wikipedia')) {\n        warning = getDictionaryWarningWikipedia(match, isSoleMatch);\n    }\n    else if (isAName) {\n        warning = getDictionaryWarningNames(match, isSoleMatch);\n    }\n    else if (dictName === 'userInputs') {\n        warning = zxcvbnOptions.translations.warnings.userInputs;\n    }\n    return warning;\n};\nexport default (match, isSoleMatch) => {\n    const warning = getDictionaryWarning(match, isSoleMatch);\n    const suggestions = [];\n    const word = match.token;\n    if (word.match(START_UPPER)) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.capitalization);\n    }\n    else if (word.match(ALL_UPPER_INVERTED) && word.toLowerCase() !== word) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.allUppercase);\n    }\n    if (match.reversed && match.token.length >= 4) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.reverseWords);\n    }\n    if (match.l33t) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.l33t);\n    }\n    return {\n        warning,\n        suggestions,\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    if (match.regexName === 'recentYear') {\n        return {\n            warning: zxcvbnOptions.translations.warnings.recentYears,\n            suggestions: [\n                zxcvbnOptions.translations.suggestions.recentYears,\n                zxcvbnOptions.translations.suggestions.associatedYears,\n            ],\n        };\n    }\n    return {\n        warning: null,\n        suggestions: [],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.extendedRepeat;\n    if (match.baseToken.length === 1) {\n        warning = zxcvbnOptions.translations.warnings.simpleRepeat;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.repeated],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.sequences,\n        suggestions: [zxcvbnOptions.translations.suggestions.sequences],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.keyPattern;\n    if (match.turns === 1) {\n        warning = zxcvbnOptions.translations.warnings.straightRow;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.longerKeyboardPattern],\n    };\n};\n//# sourceMappingURL=feedback.js.map","export default () => {\n    // no suggestions\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from './Options';\nimport bruteforceMatcher from './matcher/bruteforce/feedback';\nimport dateMatcher from './matcher/date/feedback';\nimport dictionaryMatcher from './matcher/dictionary/feedback';\nimport regexMatcher from './matcher/regex/feedback';\nimport repeatMatcher from './matcher/repeat/feedback';\nimport sequenceMatcher from './matcher/sequence/feedback';\nimport spatialMatcher from './matcher/spatial/feedback';\nimport separatorMatcher from './matcher/separator/feedback';\nconst defaultFeedback = {\n    warning: null,\n    suggestions: [],\n};\n/*\n * -------------------------------------------------------------------------------\n *  Generate feedback ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass Feedback {\n    constructor() {\n        this.matchers = {\n            bruteforce: bruteforceMatcher,\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n        this.defaultFeedback = {\n            warning: null,\n            suggestions: [],\n        };\n        this.setDefaultSuggestions();\n    }\n    setDefaultSuggestions() {\n        this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords, zxcvbnOptions.translations.suggestions.noNeed);\n    }\n    getFeedback(score, sequence) {\n        if (sequence.length === 0) {\n            return this.defaultFeedback;\n        }\n        if (score > 2) {\n            return defaultFeedback;\n        }\n        const extraFeedback = zxcvbnOptions.translations.suggestions.anotherWord;\n        const longestMatch = this.getLongestMatch(sequence);\n        let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\n        if (feedback !== null && feedback !== undefined) {\n            feedback.suggestions.unshift(extraFeedback);\n        }\n        else {\n            feedback = {\n                warning: null,\n                suggestions: [extraFeedback],\n            };\n        }\n        return feedback;\n    }\n    getLongestMatch(sequence) {\n        let longestMatch = sequence[0];\n        const slicedSequence = sequence.slice(1);\n        slicedSequence.forEach((match) => {\n            if (match.token.length > longestMatch.token.length) {\n                longestMatch = match;\n            }\n        });\n        return longestMatch;\n    }\n    getMatchFeedback(match, isSoleMatch) {\n        if (this.matchers[match.pattern]) {\n            return this.matchers[match.pattern](match, isSoleMatch);\n        }\n        if (zxcvbnOptions.matchers[match.pattern] &&\n            'feedback' in zxcvbnOptions.matchers[match.pattern]) {\n            return zxcvbnOptions.matchers[match.pattern].feedback(match, isSoleMatch);\n        }\n        return defaultFeedback;\n    }\n}\nexport default Feedback;\n//# sourceMappingURL=Feedback.js.map","import Matching from './Matching';\nimport scoring from './scoring';\nimport TimeEstimates from './TimeEstimates';\nimport Feedback from './Feedback';\nimport { zxcvbnOptions, Options } from './Options';\nimport debounce from './debounce';\nconst time = () => new Date().getTime();\nconst createReturnValue = (resolvedMatches, password, start) => {\n    const feedback = new Feedback();\n    const timeEstimates = new TimeEstimates();\n    const matchSequence = scoring.mostGuessableMatchSequence(password, resolvedMatches);\n    const calcTime = time() - start;\n    const attackTimes = timeEstimates.estimateAttackTimes(matchSequence.guesses);\n    return {\n        calcTime,\n        ...matchSequence,\n        ...attackTimes,\n        feedback: feedback.getFeedback(attackTimes.score, matchSequence.sequence),\n    };\n};\nconst main = (password, userInputs) => {\n    if (userInputs) {\n        zxcvbnOptions.extendUserInputsDictionary(userInputs);\n    }\n    const matching = new Matching();\n    return matching.match(password);\n};\nexport const zxcvbn = (password, userInputs) => {\n    const start = time();\n    const matches = main(password, userInputs);\n    if (matches instanceof Promise) {\n        throw new Error('You are using a Promised matcher, please use `zxcvbnAsync` for it.');\n    }\n    return createReturnValue(matches, password, start);\n};\nexport const zxcvbnAsync = async (password, userInputs) => {\n    const usedPassword = password.substring(0, zxcvbnOptions.maxLength);\n    const start = time();\n    const matches = await main(usedPassword, userInputs);\n    return createReturnValue(matches, usedPassword, start);\n};\nexport * from './types';\nexport { zxcvbnOptions, Options, debounce };\n//# sourceMappingURL=index.js.map","import tempAdjacencyGraphs from './adjacencyGraphs.json';\nimport diceware from './diceware.json';\nimport passwords from './passwords.json';\nconst dictionary = { diceware, passwords };\n// reinit the variable because the typescript compile will otherwise just reexport the json file which will break as it's a json file\nconst adjacencyGraphs = tempAdjacencyGraphs;\nexport { dictionary, adjacencyGraphs };\n//# sourceMappingURL=index.js.map","// This file is auto generated by data-scripts/_helpers/runtime.ts\nimport commonWords from './commonWords.json';\nimport firstnames from './firstnames.json';\nimport lastnames from './lastnames.json';\nimport wikipedia from './wikipedia.json';\nimport translations from './translations';\nconst dictionary = { commonWords, firstnames, lastnames, wikipedia };\nexport { dictionary, translations };\n//# sourceMappingURL=index.js.map","export default {\n    warnings: {\n        straightRow: 'Straight rows of keys on your keyboard are easy to guess.',\n        keyPattern: 'Short keyboard patterns are easy to guess.',\n        simpleRepeat: 'Repeated characters like \"aaa\" are easy to guess.',\n        extendedRepeat: 'Repeated character patterns like \"abcabcabc\" are easy to guess.',\n        sequences: 'Common character sequences like \"abc\" are easy to guess.',\n        recentYears: 'Recent years are easy to guess.',\n        dates: 'Dates are easy to guess.',\n        topTen: 'This is a heavily used password.',\n        topHundred: 'This is a frequently used password.',\n        common: 'This is a commonly used password.',\n        similarToCommon: 'This is similar to a commonly used password.',\n        wordByItself: 'Single words are easy to guess.',\n        namesByThemselves: 'Single names or surnames are easy to guess.',\n        commonNames: 'Common names and surnames are easy to guess.',\n        userInputs: 'There should not be any personal or page related data.',\n        pwned: 'Your password was exposed by a data breach on the Internet.',\n    },\n    suggestions: {\n        l33t: \"Avoid predictable letter substitutions like '@' for 'a'.\",\n        reverseWords: 'Avoid reversed spellings of common words.',\n        allUppercase: 'Capitalize some, but not all letters.',\n        capitalization: 'Capitalize more than the first letter.',\n        dates: 'Avoid dates and years that are associated with you.',\n        recentYears: 'Avoid recent years.',\n        associatedYears: 'Avoid years that are associated with you.',\n        sequences: 'Avoid common character sequences.',\n        repeated: 'Avoid repeated words and characters.',\n        longerKeyboardPattern: 'Use longer keyboard patterns and change typing direction multiple times.',\n        anotherWord: 'Add more words that are less common.',\n        useWords: 'Use multiple words, but avoid common phrases.',\n        noNeed: 'You can create strong passwords without using symbols, numbers, or uppercase letters.',\n        pwned: 'If you use this password elsewhere, you should change it.',\n    },\n    timeEstimation: {\n        ltSecond: 'less than a second',\n        second: '{base} second',\n        seconds: '{base} seconds',\n        minute: '{base} minute',\n        minutes: '{base} minutes',\n        hour: '{base} hour',\n        hours: '{base} hours',\n        day: '{base} day',\n        days: '{base} days',\n        month: '{base} month',\n        months: '{base} months',\n        year: '{base} year',\n        years: '{base} years',\n        centuries: 'centuries',\n    },\n};\n//# sourceMappingURL=translations.js.map"],"names":["extend","listToExtend","list","push","apply","sorted","matches","sort","m1","m2","i","j","buildRankedDictionary","orderedList","result","counter","forEach","word","DATE_SPLITS","START_UPPER","END_UPPER","ALL_UPPER","ALL_UPPER_INVERTED","ALL_LOWER","ALL_LOWER_INVERTED","ONE_LOWER","ONE_UPPER","ALPHA_INVERTED","ALL_DIGIT","REFERENCE_YEAR","Date","getFullYear","REGEXEN","recentYear","SEPERATOR_CHARS","SEPERATOR_CHAR_COUNT","length","MatchDate","match","password","this","getMatchesWithoutSeparator","getMatchesWithSeparator","filteredMatches","filterNoise","maybeDateWithSeparator","Math","abs","token","slice","regexMatch","exec","dmy","mapIntegersToDayMonthYear","parseInt","pattern","separator","year","month","day","maybeDateNoSeparator","metric","candidate","candidates","index","k","l","bestCandidate","minDistance","distance","filter","isSubmatch","matchesLength","o","otherMatch","integers","over12","over31","under1","len1","int","getDayMonth","possibleYearSplits","possibleYearSplitsLength","y","rest","dm","mapIntegersToDayMonth","twoToFourDigitYear","temp","reverse","data","peq","Uint32Array","a","b","tmp","n","m","lst","pv","mv","sc","charCodeAt","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","start","vlen","min","pb","mb","xh","ph","mh","score","myers_x","findLevenshteinDistance","rankedDictionary","threshold","foundDistance","found","Object","keys","find","entry","usedThreshold","getUsedThreshold","isPasswordToShort","isThresholdLongerThanPassword","foundEntryDistance","isInThreshold","levenshteinDistance","levenshteinDistanceEntry","c","d","e","f","g","h","q","u","s","t","v","w","x","z","warnings","straightRow","keyPattern","simpleRepeat","extendedRepeat","sequences","recentYears","dates","topTen","topHundred","common","similarToCommon","wordByItself","namesByThemselves","commonNames","userInputs","pwned","suggestions","l33t","reverseWords","allUppercase","capitalization","associatedYears","repeated","longerKeyboardPattern","anotherWord","useWords","noNeed","timeEstimation","ltSecond","second","seconds","minute","minutes","hour","hours","days","months","years","centuries","TrieNode","constructor","parents","children","Map","addSub","key","firstChar","charAt","has","set","cur","get","hasChild","addChild","getChild","subs","concat","child","isTerminal","l33tTable","triNode","entries","letter","substitution","Options","matchers","trieNodeRoot","l33tTableToTrieNode","dictionary","rankedDictionaries","rankedDictionariesMaxWordSize","translations","translationKeys","graphs","useLevenshteinDistance","levenshteinThreshold","l33tMaxSubstitutions","maxLength","setRankedDictionaries","setOptions","options","setTranslations","undefined","checkCustomTranslations","Error","valid","type","translationType","rankedDictionariesMaxWorkSize","name","getRankedDictionariesMaxWordSize","map","el","toString","reduce","max","Infinity","buildSanitizedRankedDictionary","sanitizedInputs","input","inputType","toLowerCase","extendUserInputsDictionary","newList","addMatcher","matcher","console","info","zxcvbnOptions","MatchReverse","defaultMatch","passwordReversed","split","join","reversed","CleanPasswords","substr","limit","trieRoot","buffer","finalPasswords","getAllPossibleSubsAtIndex","nodes","character","helper","onlyFullSub","isFullSub","subIndex","changes","lastSubLetter","consecutiveSubCount","hasSubs","sub","newSubs","pop","getAll","MatchL33t","isAlreadyIncluded","newMatch","some","l33tMatch","every","value","subbedPasswords","getCleanPasswords","hasFullMatch","isFullSubstitution","subbedPassword","matchedDictionary","useLevenshtein","extras","getExtras","passwordWithSubs","iUnsubbed","change","usedChanges","jUnsubbed","filtered","subDisplay","findIndex","alreadyIncluded","matchedWord","MatchDictionary","L33t","Reverse","passwordLength","passwordLower","dictionaryName","rankedDict","longestDictionaryWordSize","searchWidth","searchEnd","usedPassword","isInDictionary","foundLevenshteinDistance","isFullPassword","isLevenshteinMatch","rank","MatchRegex","regexes","regex","lastIndex","regexName","count","coEff","log","num","rval","cleanedWord","replace","commonCases","commonCasesLength","wordArray","upperCaseCount","char","lowerCaseCount","variations","variationLength","utils","getVariations","countSubstring","string","substring","pos","indexOf","getCounts","tokenLower","subbedCount","unsubbedCount","p","possibilities","estimatePossiblePatterns","graph","turns","startingPosition","averageDegree","average","neighbors","calcAverageDegree","guesses","tokenLength","possibleTurns","bruteforce","minGuesses","Number","POSITIVE_INFINITY","MAX_VALUE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","date","baseGuesses","uppercaseVariations","uppercaseVariant","l33tVariations","l33tVariant","reversedVariations","calculation","charClassBases","alphaLower","alphaUpper","alpha","alphanumeric","digits","symbols","repeat","repeatCount","sequence","ascending","firstChr","includes","spatial","shiftedCount","unShiftedCount","shiftedVariations","round","extraData","getMinGuesses","estimationResult","getScoring","scoring","matchGuesses","guessesLog10","scoringHelper","optimal","excludeAdditive","separatorRegex","fillArray","size","valueType","makeBruteforceMatch","update","sequenceLength","estimatedMatch","estimateGuesses","pi","shouldSkip","competingPatternLength","competingMetricMatch","bruteforceUpdate","passwordCharIndex","unwind","optimalMatchSequence","candidateSequenceLength","candidateMetricMatch","unshift","mostGuessableMatchSequence","matchesByCoordinateJ","optimalSequenceLength","getGuesses","MatchRepeat","omniMatch","greedyMatch","getGreedyMatch","lazyMatch","getLazyMatch","setMatchToken","baseToken","getBaseGuesses","normalizeMatch","hasPromises","Promise","all","baseMatch","then","resolvedBaseGuesses","greedy","lazy","resolvedMatches","MatchSequence","MAX_DELTA","lastDelta","delta","absoluteDelta","getSequence","sequenceName","sequenceSpace","test","MatchSpatial","SHIFTED_RX","graphName","checkIfShifted","lastDirection","adjacents","foundDirection","curDirection","curChar","adjacentsLength","adjacent","adjacentIndex","RegExp","MatchSeparator","mostUsedSpecial","getMostUsedSeparatorChar","isSeparator","getSeparatorRegex","matchAll","mostUsedSeperators","memo","Matching","dateMatcher","dictionaryMatcher","regexMatcher","repeatMatcher","sequenceMatcher","spatialMatcher","separatorMatcher","promises","response","resolve","reject","catch","error","MONTH","DAY","YEAR","times","SECOND","MINUTE","HOUR","century","TimeEstimates","translate","displayStr","estimateAttackTimes","crackTimesSeconds","onlineThrottling100PerHour","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","scenario","displayTime","guessesToScore","base","timeKeys","foundIndex","time","warning","getDictionaryWarning","isSoleMatch","dictName","isAName","getDictionaryWarningPassword","getDictionaryWarningWikipedia","getDictionaryWarningNames","defaultFeedback","Feedback","bruteforceMatcher","setDefaultSuggestions","getFeedback","extraFeedback","longestMatch","getLongestMatch","feedback","getMatchFeedback","getTime","createReturnValue","timeEstimates","matchSequence","calcTime","attackTimes","main","zxcvbn","diceware","passwords","adjacencyGraphs","commonWords","firstnames","lastnames","wikipedia"],"sourceRoot":""}