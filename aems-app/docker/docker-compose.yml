services:

  # Proxy that can be configured for HTTP or HTTPS
  proxy:
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=${CERT_RESOLVER}
      - --providers.file.directory=/etc/traefik/dynamic
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/certs/letsencrypt.json
    container_name: ${COMPOSE_PROJECT_NAME}-proxy
    depends_on:
      init:
        condition: service_completed_successfully
    hostname: proxy
    image: traefik:v2.10
    labels:
      - traefik.tls.stores.default.defaultgeneratedcert.resolver=${CERT_RESOLVER}
      - traefik.tls.stores.default.defaultgeneratedcert.domain.main=${HOSTNAME}
      - traefik.tls.stores.default.defaultgeneratedcert.domain.sans=*.${HOSTNAME}
    ports:
      - 80:80
      - 443:443
      - ${TRAEFIK_PORT}:8080
    profiles:
      - proxy
    restart: unless-stopped
    user: root:root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/:/etc/certs/:ro
      - ./proxy/certs-traefik.yml:/etc/traefik/dynamic/certs-traefik.yml

  # Application that hosts static files and API
  app:
    build:
      context: ../app
      dockerfile: ./Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    container_name: ${COMPOSE_PROJECT_NAME}-app
    depends_on:
      init:
        condition: service_completed_successfully
      database:
        condition: service_started
    env_file:
      - .env.app
    healthcheck:
      test: "curl --fail http://localhost:3000 || exit 1"
      interval: 10s
      timeout: 10s
      retries: 120
    hostname: app
    image: nextapp:${TAG}
    labels:
      - traefik.enable=true
      - traefik.http.services.nextapp.loadbalancer.server.port=3000
      - traefik.http.middlewares.app-security.headers.browserXssFilter=true
      - traefik.http.middlewares.app-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.app-security.headers.forceSTSHeader=true
      - traefik.http.middlewares.app-security.headers.frameDeny=true
      - traefik.http.middlewares.app-security.headers.referrerPolicy=same-origin
      - traefik.http.middlewares.app-security.headers.sslRedirect=true
      - traefik.http.middlewares.app-security.headers.stsSeconds=31536000
      - traefik.http.routers.app-http.entrypoints=web
      - traefik.http.routers.app-http.rule=Host(`${HOSTNAME}`)
      - traefik.http.routers.app-http.middlewares=app-https
      - traefik.http.middlewares.app-https.redirectscheme.scheme=https
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.rule=Host(`${HOSTNAME}`)
      - traefik.http.routers.app.middlewares=app-security
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=${CERT_RESOLVER}
    ports:
      - ${APP_PORT}:3000
    restart: unless-stopped
    user: ${UID}:${GID}
    volumes:
      - app-data:/app/data
      - app-cache:/app/.next/cache
      - app-upload:/app/upload/

  # Runs application services
  services:
    build:
      context: ../app
      dockerfile: ./Dockerfile
      args:
        - UID=${UID}
        - GID=${GID}
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    container_name: ${COMPOSE_PROJECT_NAME}-services
    depends_on:
      init:
        condition: service_completed_successfully
      database:
        condition: service_started
    env_file:
      - .env.services
    healthcheck:
      test: "curl http://localhost:3000/api/graphql"
      interval: 10s
      timeout: 10s
      retries: 120
    hostname: services
    image: nextapp:${TAG}
    restart: unless-stopped
    user: ${UID}:${GID}
    volumes:
      - app-data:/app/data
      - app-upload:/app/upload/
      - ./certs/:/etc/certs/:ro
      - ./init/:/app/seed/:ro
      - ../../aems-edge/:/app/aems-edge/:ro

  # Creates self-signed TLS certs for localhost and domain and runs relational database migrations on startup
  init:
    build:
      context: ../app
      dockerfile: ./Dockerfile.init
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - NO_PROXY=${NO_PROXY}
        - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    command: >
      bash -c '
        if [ ! -f /etc/certs/mkcert-ca.crt ]; then
          mkcert create-ca \
            --key "/etc/certs/mkcert-ca.key" \
            --cert "/etc/certs/mkcert-ca.crt"
        fi;
        if [ ! -f /etc/certs/mkcert-hostname.crt ]; then
          mkcert create-cert \
            --ca-key "/etc/certs/mkcert-ca.key" \
            --ca-cert "/etc/certs/mkcert-ca.crt" \
            --key "/etc/certs/mkcert-hostname.key" \
            --cert "/etc/certs/mkcert-hostname.crt" \
            --domain "${HOSTNAME}"
        fi;
        cd /app/;
        chown ${UID}:${GID} data upload;
        chmod 775 data upload;
        chown ${UID}:${GID} seed;
        chmod 664 /etc/certs/mkcert-ca.crt;
        chmod -R 775 ./lib;
        yarn migrate:deploy;
      '
    container_name: ${COMPOSE_PROJECT_NAME}-init
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env.init
    hostname: init
    image: init:${TAG}
    user: root:root
    volumes:
      - app-data:/app/data/
      - app-upload:/app/upload
      - ./certs/:/etc/certs/
      - ./init/:/app/seed/:ro

  # Application relational database
  database:
    cap_add:
      - SYS_NICE
    container_name: ${COMPOSE_PROJECT_NAME}-database
    env_file:
      - .env.database
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 10
    hostname: database
    image: postgis/postgis:16-3.4
    ports:
      - ${DATABASE_PORT}:5432
    restart: unless-stopped
    volumes:
      - database-data:/var/lib/postgresql/data

  # Redis
  redis:
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    hostname: redis
    image: redis:6.2
    restart: unless-stopped

  # Open Street Map Tiles
  maptiles:
    command: [ "--port", "80", "--public_url", "/ext/map", "--verbose" ]
    container_name: ${COMPOSE_PROJECT_NAME}-maptiles
    hostname: map
    image: maptiler/tileserver-gl:latest
    profiles:
      - map
    restart: unless-stopped
    volumes:
      - ./map/:/data/

  # Nominatim container for geocoding
  nominatim:
    container_name: ${COMPOSE_PROJECT_NAME}-nominatim
    env_file:
      - .env.nominatim
    hostname: nominatim
    image: mediagis/nominatim:4.4
    profiles:
      - nom
    restart: unless-stopped
    shm_size: 1gb
    volumes:
      - nominatim-data:/var/lib/postgresql/14/main
      - nominatim-cache:/nominatim/cache
      - ./map/:/nominatim/data/

  # Wiki container
  wiki:
    container_name: ${COMPOSE_PROJECT_NAME}-wiki
    depends_on:
      init:
        condition: service_completed_successfully
      wiki-db:
        condition: service_started
    env_file:
      - .env.wiki
    hostname: wiki
    image: lscr.io/linuxserver/bookstack
    profiles:
      - wiki
    restart: unless-stopped
    volumes:
      - wiki-data:/config
      - wiki-storage:/storage
      - ./certs/:/etc/certs/:ro
      - ./wiki/init-wiki.sh:/custom-cont-init.d/init-wiki.sh:ro

  # Wiki database
  wiki-db:
    container_name: ${COMPOSE_PROJECT_NAME}-wiki-db
    env_file:
      - .env.wiki
    hostname: wiki-db
    image: lscr.io/linuxserver/mariadb
    profiles:
      - wiki
    restart: unless-stopped
    volumes:
      - wiki-data:/config

  # Keycloak for single sign-on
  keycloak:
    command: start
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    env_file:
      - .env.keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak
    labels:
      - traefik.enable=true
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
      - traefik.http.middlewares.keycloak-security.headers.browserXssFilter=true
      - traefik.http.middlewares.keycloak-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.keycloak-security.headers.forceSTSHeader=true
      - traefik.http.middlewares.keycloak-security.headers.frameDeny=false
      - traefik.http.middlewares.keycloak-security.headers.referrerPolicy=same-origin
      - traefik.http.middlewares.keycloak-security.headers.sslRedirect=true
      - traefik.http.middlewares.keycloak-security.headers.stsSeconds=31536000
      - traefik.http.routers.keycloak-http.entrypoints=web
      - traefik.http.routers.keycloak-http.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/js/`, `/auth/sso/realms/`, `/auth/sso/resources/`, `/auth/sso/robots.txt`)
      - traefik.http.routers.keycloak-http.middlewares=keycloak-https
      - traefik.http.middlewares.keycloak-https.redirectscheme.scheme=https
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/js/`, `/auth/sso/realms/`, `/auth/sso/resources/`, `/auth/sso/robots.txt`)
      - traefik.http.routers.keycloak.middlewares=keycloak-security
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.routers.keycloak.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.routers.keycloak-admin.entrypoints=websecure
      - traefik.http.routers.keycloak-admin.rule=Host(`${HOSTNAME}`) && PathPrefix(`/auth/sso/admin/`)
      - traefik.http.routers.keycloak-admin.middlewares=keycloak-security
      - traefik.http.routers.keycloak-admin.tls=true
      - traefik.http.routers.keycloak-admin.tls.certresolver=${CERT_RESOLVER}
    ports:
      - ${KEYCLOAK_PORT}:8080
    profiles:
      - sso
    restart: unless-stopped
    volumes:
      - keycloak-cache:/opt/jboss/keycloak/standalone/data

  # Keycloak database
  keycloak-db:
    cap_add:
      - SYS_NICE
    container_name: ${COMPOSE_PROJECT_NAME}-keycloak-db
    env_file:
      - .env.keycloak
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 10s
      retries: 10
    hostname: keycloak-db
    image: postgis/postgis:16-3.4
    profiles:
      - sso
    restart: unless-stopped
    volumes:
      - keycloak-data:/var/lib/postgresql/data

volumes:
  app-data:
    driver: local
  app-cache:
    driver: local
  app-upload:
    driver: local
  database-data:
    driver: local
  nominatim-data:
    driver: local
  nominatim-cache:
    driver: local
  wiki-data:
    driver: local
  wiki-storage:
    driver: local
  keycloak-data:
    driver: local
  keycloak-cache:
    driver: local
