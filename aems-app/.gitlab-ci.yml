# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:22.14.0

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
services:
  - postgis/postgis:16-3.4
  - docker:dind
variables:
  POSTGRES_DB: skeleton
  POSTGRES_USER: develop
  POSTGRES_PASSWORD: password
  DATABASE_HOST: postgis-postgis
  DOCKER_BUILDKIT: 1
  CLEAN_BUILD: "false"
  TAG_VERSION: "$CI_COMMIT_BRANCH$CI_COMMIT_TAG"

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
cache:
  paths:
    - "**/node_modules/"
    - "**/dist/"

stages:
  - build
  - test
  - publish

build:
  stage: build
  variables:
    YARN_ENABLE_IMMUTABLE_INSTALLS: false
  script:
    - corepack enable
    - chmod +x ./build.sh
    - ./build.sh

test:
  stage: test
  script:
    - corepack enable
    - chmod +x ./test.sh
    - ./test.sh
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/coverage/cobertura-coverage.xml"

publish_init:
  image: docker:latest
  stage: publish
  script:
    - env
    - cd ./prisma
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/init:$TAG_VERSION .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/init:$TAG_VERSION

publish_server:
  image: docker:latest
  stage: publish
  script:
    - env
    - docker build --file common/Dockerfile --tag common:latest .
    - cd ./server
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$TAG_VERSION .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/server:$TAG_VERSION

publish_client:
  image: docker:latest
  stage: publish
  script:
    - env
    - docker build --file common/Dockerfile --tag common:latest .
    - cd ./client
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/client:$TAG_VERSION .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/client:$TAG_VERSION
