generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator pothos {
  provider     = "prisma-pothos-types"
  prismaUtils  = true
  clientOutput = "@prisma/client"
  output = "../src/generated/prisma-pothos/index.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis()]
}

model Feedback {
  // key
  id String @id @default(cuid())

  // fields
  message String
  status  enum_feedbackStatus @default(Todo)

  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // foreign key
  userId     String
  assigneeId String?

  // direct relations
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee User? @relation("assignee", fields: [assigneeId], references: [id], onDelete: Cascade)

  // indirect relations
  files File[]
}

model File {
  // key
  id String @id @default(cuid())

  // fields
  mimeType      String
  contentLength Int
  objectKey     String

  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  // foreign key
  userId     String?
  feedbackId String?

  // direct relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Comment {
  // key
  id        String   @id @default(cuid())
  // fields
  message   String
  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  // foreign keys
  userId    String?
  // direct relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // indices
  @@index([createdAt], map: "comments_createdAt")
  @@index([updatedAt], map: "comments_updatedAt")
  @@index([userId], map: "comments_userId")
}

model User {
  // key
  id                String     @id @default(cuid())
  // fields
  name              String?    @db.VarChar(1024)
  email             String     @unique @db.VarChar(512)
  image             String?
  emailVerified     DateTime?
  role              String?    @db.VarChar(512)
  password          String?    @db.VarChar(1024)
  /// [Preferences]
  preferences       Json?      @db.Json
  // metadata
  createdAt         DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime   @updatedAt @db.Timestamptz(6)
  // indirect relations
  accounts          Account[]
  sessions          Session[]
  comments          Comment[]
  banners           Banner[]
  feedbacks         Feedback[]
  assignedFeedbacks Feedback[] @relation("assignee")
  files             File[]

  // indices
  @@index([name], map: "users_name")
  @@index([email], map: "users_email")
}

model Account {
  // key
  id                String   @id @default(cuid())
  // fields
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?  @db.Text
  accessToken       String?  @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?  @db.Text
  sessionState      String?
  // metadata
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)
  // foreign keys
  userId            String
  // direct relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // indices
  @@unique([provider, providerAccountId])
}

model Session {
  // key
  id        String   @id @default(cuid())
  // fields
  expiresAt DateTime
  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  // foreign keys
  userId    String
  // direct relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  // fields
  identifier String
  token      String   @unique
  expiresAt  DateTime
  // metadata
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  // indices
  @@unique([identifier, token])
}

model Seed {
  // fields
  filename  String   @unique @db.VarChar(1024)
  timestamp DateTime @db.Timestamptz(6)
  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Event {
  // key
  id        String   @id @default(cuid())
  // fields
  topic     String   @db.VarChar(1024)
  /// [Event]
  payload   Json     @db.Json
  // metadata
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Log {
  // key
  id        String    @id @default(cuid())
  // fields
  type      enum_log?
  message   String?   @db.VarChar(1024)
  // metadata
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
}

model Banner {
  // key
  id         String    @id @default(cuid())
  // fields
  message    String?   @db.VarChar(1024)
  expiration DateTime? @db.Timestamptz(6)
  // metadata
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  // indirect relations
  users      User[]
}

enum enum_log {
  Trace
  Debug
  Info
  Warn
  Error
  Fatal
}

enum enum_feedbackStatus {
  Todo
  InProgress
  Done
}
