{"version":3,"file":"static/js/212.23144198.chunk.js","mappings":"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","sources":["routes/Units/Configuration.tsx","routes/Units/Holiday.tsx","routes/Units/Holidays.tsx","routes/Units/Occupancy.tsx","routes/Units/Occupancies.tsx","routes/Units/Schedule.tsx","routes/Units/Schedules.tsx","routes/Units/Setpoint.tsx","routes/Units/Setpoints.tsx","routes/Units/Units.tsx","routes/Units/index.tsx","utils/configuration.ts","utils/schedule.ts","utils/setpoint.ts"],"sourcesContent":["import { Button, InputGroup, Label, Menu, MenuItem } from \"@blueprintjs/core\";\n\nimport { IConfiguration } from \"controllers/configurations/action\";\nimport { IUnit } from \"controllers/units/action\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport { get } from \"lodash\";\nimport { useCallback } from \"react\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Configuration(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  configurations?: IConfiguration[];\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  handleCreate: (unit: DeepPartial<IUnit>) => void;\n  readOnly?: boolean;\n}) {\n  const { unit, editing, configurations, handleChange, handleCreate, readOnly } = props;\n\n  const getValue = useCallback((field: string) => get(editing, field, get(unit, field)), [editing, unit]);\n\n  return (\n    <>\n      {!readOnly && (\n        <div className=\"row\">\n          <div className=\"configuration select\">\n            <Label>\n              <h3>Select Configuration</h3>\n              <Popover2\n                content={\n                  <Menu>\n                    <MenuItem text=\"New Configuration\" onClick={() => handleCreate(unit)} />\n                    {configurations?.map((configuration) => (\n                      <MenuItem\n                        key={configuration.id}\n                        text={configuration.label}\n                        onClick={() => handleChange(\"configurationId\", unit)(configuration.id as number)}\n                      />\n                    ))}\n                  </Menu>\n                }\n                placement=\"bottom-start\"\n              >\n                <Button rightIcon={IconNames.CARET_DOWN} minimal>\n                  {unit?.configuration?.label || \"Select Configuration...\"}\n                </Button>\n              </Popover2>\n            </Label>\n          </div>\n          <div />\n        </div>\n      )}\n      <div className=\"row\">\n        <div className=\"label\">\n          <Label>\n            {readOnly ? <h3>Configuration Label</h3> : <b>Configuration Label</b>}\n            <InputGroup\n              type=\"text\"\n              value={getValue(\"configuration.label\")}\n              onChange={(e) => handleChange(\"configuration.label\", editing)(e.target.value)}\n              readOnly={readOnly}\n            />\n          </Label>\n        </div>\n        <div />\n      </div>\n    </>\n  );\n}\n","import { Button, Checkbox, InputGroup, Intent, Label } from \"@blueprintjs/core\";\n\nimport { IHoliday } from \"controllers/holidays/action\";\nimport { IUnit } from \"controllers/units/action\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { ObservanceType } from \"common\";\nimport { get } from \"lodash\";\nimport moment from \"moment\";\nimport { useCallback } from \"react\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Holiday(props: {\n  path: string;\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  holiday: DeepPartial<IHoliday>;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  readOnly?: boolean;\n}) {\n  const { path, unit, editing, holiday, handleChange, readOnly } = props;\n  const { id, label, type, month, day, observance } = holiday;\n\n  const getValue = useCallback((field: string) => get(editing, field, get(unit, field)), [editing, unit]);\n\n  switch (type) {\n    case \"Custom\":\n      const suffix = observance && ObservanceType.parse(observance)?.label;\n      const desc = `${moment()\n        .set(\"month\", (month as number) - 1)\n        .set(\"date\", day as number)\n        .format(\"MMMM Do\")} ${suffix && `(${suffix})`}`;\n\n      return (\n        <>\n          <div className=\"row\">\n            <div>\n              <Label>\n                <b>{label}</b>\n                <InputGroup type=\"text\" value={desc} readOnly />\n              </Label>\n            </div>\n            <div>\n              <Button\n                icon={IconNames.TRASH}\n                intent={Intent.WARNING}\n                minimal\n                onClick={() => {\n                  handleChange(path, editing)({ id: id, type: type, action: \"delete\" });\n                }}\n                disabled={readOnly}\n              />\n            </div>\n          </div>\n        </>\n      );\n    case \"Enabled\":\n    case \"Disabled\":\n    default:\n      return (\n        <div className=\"row\">\n          <div className=\"holiday\">\n            <Label>\n              <b>{label}</b>\n              <Checkbox\n                label=\"Enabled\"\n                checked={getValue(`${path}.type`) === \"Enabled\"}\n                onClick={() => {\n                  handleChange(\n                    `${path}`,\n                    editing\n                  )({\n                    id: getValue(`${path}.id`),\n                    type: getValue(`${path}.type`) === \"Enabled\" ? \"Disabled\" : \"Enabled\",\n                  });\n                }}\n                disabled={readOnly}\n              />\n            </Label>\n          </div>\n          <div />\n        </div>\n      );\n  }\n}\n","import { Alert, Button, InputGroup, Intent, Label, Menu, MenuItem } from \"@blueprintjs/core\";\nimport { HolidayType, ObservanceType } from \"common\";\nimport { IHoliday, deleteHoliday } from \"controllers/holidays/action\";\nimport { get, isEmpty, merge } from \"lodash\";\n\nimport { DatePicker } from \"@blueprintjs/datetime\";\nimport { Holiday } from \"./Holiday\";\nimport { IUnit } from \"controllers/units/action\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { DeepPartial } from \"../../utils/types\";\n\nconst holidayOrder = HolidayType.values.map((a) => a.label);\n\nfunction CreateHoliday(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  holidays: IHoliday[];\n}) {\n  const { unit, editing, handleChange, holidays } = props;\n\n  const [label, setLabel] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [observance, setObservance] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"row\">\n      <div className=\"label\">\n        <Label>\n          <b>Holiday Label</b>\n          <InputGroup type=\"text\" value={label} onChange={(e) => setLabel(e.target.value)} />\n        </Label>\n      </div>\n      <div>\n        <Label>\n          <b>Date</b>\n          <Popover2\n            content={\n              <DatePicker\n                value={date}\n                onChange={(d, u) => {\n                  if (d) {\n                    setDate(d);\n                  }\n                  setOpen(!u);\n                }}\n              />\n            }\n            isOpen={open}\n            placement=\"bottom-start\"\n          >\n            <Button rightIcon={IconNames.CALENDAR} onClick={() => setOpen(true)} minimal>\n              {moment(date).format(\"MMMM Do\")}\n            </Button>\n          </Popover2>\n        </Label>\n      </div>\n      <div>\n        <Label>\n          <b>Observance</b>\n          <Popover2\n            content={\n              <Menu>\n                <MenuItem text=\"Always on Date\" onClick={() => setObservance(\"\")} />\n                {ObservanceType.values.map((o) => (\n                  <MenuItem key={o.name} text={o.label} onClick={() => setObservance(o.label)} />\n                ))}\n              </Menu>\n            }\n            placement=\"bottom-start\"\n          >\n            <Button rightIcon={IconNames.CARET_DOWN} minimal>\n              {observance || \"Always on Date\"}\n            </Button>\n          </Popover2>\n        </Label>\n      </div>\n      <div>\n        <Button\n          icon={IconNames.NEW_LAYER}\n          intent={Intent.PRIMARY}\n          minimal\n          disabled={isEmpty(label) || holidays.find((v) => v.label === label) !== undefined}\n          onClick={() => {\n            const i = Math.max(\n              get(unit, \"configuration.holidays.length\", 0),\n              get(editing, \"configuration.holidays.length\", 0)\n            );\n            handleChange(\n              `configuration.holidays.${i}`,\n              editing\n            )({\n              type: \"Custom\",\n              label,\n              month: date.getMonth() + 1,\n              day: date.getDate(),\n              observance,\n              configurationId: unit?.configuration?.id,\n              createdAt: moment().format(),\n              action: \"create\",\n            } as IHoliday);\n            setLabel(\"\");\n            setDate(new Date());\n            setObservance(\"\");\n          }}\n        >\n          Create Holiday\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport function Holidays(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  readOnly?: boolean;\n}) {\n  const { unit, editing, handleChange, readOnly } = props;\n\n  const dispatch = useDispatch();\n  const [deleting, setDeleting] = useState(undefined as DeepPartial<IHoliday> | undefined);\n\n  const holidays = merge([], unit.configuration?.holidays, get(editing, \"configuration.holidays\")) as (IHoliday & {\n    index: number;\n  })[];\n  holidays.forEach((h, i) => (h.index = i));\n  return (\n    <>\n      {!readOnly && (\n        <Label>\n          <h3>Create Holiday</h3>\n          <CreateHoliday unit={unit} editing={editing} handleChange={handleChange} holidays={holidays} />\n        </Label>\n      )}\n      <Label>\n        <h3>Custom Holidays</h3>\n        <ul>\n          {isEmpty(holidays.filter((a) => a.type === \"Custom\" && a.action !== \"delete\")) ? (\n            <li key={\"empty\"}>No Custom Holidays Defined</li>\n          ) : (\n            holidays\n              .filter((a) => a.type === \"Custom\" && a.action !== \"delete\")\n              .sort((a, b) => moment(b.createdAt).valueOf() - moment(a.createdAt).valueOf())\n              .map((holiday, i) => (\n                <li key={holiday.index}>\n                  <Holiday\n                    key={holiday.index}\n                    path={`configuration.holidays.${holiday.index}`}\n                    unit={unit}\n                    editing={editing}\n                    holiday={holiday}\n                    handleChange={handleChange}\n                    readOnly={readOnly}\n                  />\n                </li>\n              ))\n          )}\n        </ul>\n      </Label>\n      <Label>\n        <h3>Predefined Holidays</h3>\n        <ul>\n          {holidays\n            .filter((a) => a.type !== \"Custom\")\n            .sort((a, b) => holidayOrder.indexOf(a.label) - holidayOrder.indexOf(b.label))\n            .map((holiday, i) => (\n              <li key={holiday.index}>\n                <Holiday\n                  key={holiday.index}\n                  path={`configuration.holidays.${holiday.index}`}\n                  unit={unit}\n                  editing={editing}\n                  holiday={holiday}\n                  handleChange={handleChange}\n                  readOnly={readOnly}\n                />\n              </li>\n            ))}\n        </ul>\n      </Label>\n      <Alert\n        intent={Intent.DANGER}\n        isOpen={deleting !== undefined}\n        confirmButtonText=\"Yes\"\n        cancelButtonText=\"Cancel\"\n        onConfirm={() => dispatch(deleteHoliday(deleting?.id ?? -1))}\n        onClose={() => setDeleting(undefined)}\n      >\n        <p>Permanently delete the holiday {deleting?.label}?</p>\n      </Alert>\n    </>\n  );\n}\n","import { Button, InputGroup, Intent, Label } from \"@blueprintjs/core\";\n\nimport { IOccupancy } from \"controllers/occupancies/action\";\nimport { IUnit } from \"controllers/units/action\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport moment from \"moment\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Occupancy(props: {\n  path: string;\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  occupancy: DeepPartial<IOccupancy>;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n}) {\n  const { path, editing, occupancy, handleChange } = props;\n  const { id, label, date, schedule } = occupancy;\n\n  const suffix = schedule?.label;\n  const desc = `${moment(date).format(\"dddd MMMM Do YYYY\")} ${suffix && `(${suffix})`}`;\n  const disable = moment(date).startOf(\"day\").isBefore(moment().startOf(\"day\"), \"day\");\n\n  return (\n    <>\n      <div className=\"row\">\n        <div>\n          <Label disabled={disable}>\n            <b>{label}</b>\n            <InputGroup type=\"text\" value={desc} disabled={disable} readOnly />\n          </Label>\n        </div>\n        <div>\n          <Button\n            icon={IconNames.TRASH}\n            intent={Intent.WARNING}\n            minimal\n            onClick={() => {\n              handleChange(path, editing)({ id: id, action: \"delete\" });\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","import {\n  Alert,\n  Button,\n  Checkbox,\n  HandleInteractionKind,\n  HandleType,\n  InputGroup,\n  Intent,\n  Label,\n  MultiSlider,\n} from \"@blueprintjs/core\";\nimport {\n  END_TIME_DEFAULT,\n  END_TIME_MAX,\n  START_TIME_DEFAULT,\n  START_TIME_MIN,\n  TIME_PADDING,\n  createScheduleLabel,\n  toDataFormat,\n  toMinutes,\n  toTimeFormat,\n} from \"utils/schedule\";\nimport { IOccupancy, deleteOccupancy } from \"controllers/occupancies/action\";\nimport { clamp, clone, cloneDeep, get, inRange, isEmpty, merge } from \"lodash\";\nimport { useCallback, useState } from \"react\";\n\nimport { DatePicker } from \"@blueprintjs/datetime\";\nimport { ISchedule } from \"controllers/schedules/action\";\nimport { IUnit } from \"controllers/units/action\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { Occupancy } from \"./Occupancy\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport moment from \"moment\";\nimport { parseBoolean } from \"utils/utils\";\nimport { useDispatch } from \"react-redux\";\nimport { DeepPartial } from \"../../utils/types\";\n\nconst allowUnoccupied = parseBoolean(process.env.REACT_APP_ALLOW_UNOCCUPIED || \"\");\n\nconst defaultSchedule: ISchedule = {\n  label: \"\",\n  occupied: true,\n  startTime: toDataFormat(START_TIME_DEFAULT),\n  endTime: toDataFormat(END_TIME_DEFAULT),\n};\ndefaultSchedule.label = createScheduleLabel(\"all\", defaultSchedule);\n\nfunction CreateOccupancy(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n}) {\n  const { unit, editing, handleChange } = props;\n\n  const [label, setLabel] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [schedule, setSchedule] = useState(clone(defaultSchedule));\n  const [open, setOpen] = useState(false);\n\n  const getValue = useCallback((field: string) => get(editing, field, get(unit, field)), [editing, unit]);\n\n  const day = moment(date).format(\"dddd\").toLowerCase();\n  const values = {\n    schedule: {\n      start: !schedule.occupied ? START_TIME_MIN : toMinutes(schedule.startTime, false),\n      end: !schedule.occupied ? END_TIME_MAX : toMinutes(schedule.endTime, true),\n    },\n    previous: {\n      start: !getValue(`configuration.${day}Schedule.occupied`)\n        ? START_TIME_MIN\n        : toMinutes(getValue(`configuration.${day}Schedule.startTime`), false),\n      end: !getValue(`configuration.${day}Schedule.occupied`)\n        ? END_TIME_MAX\n        : toMinutes(getValue(`configuration.${day}Schedule.endTime`), true),\n      occupied: getValue(`configuration.${day}Schedule.occupied`),\n    },\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"label\">\n        <Label>\n          <b>Occupancy Label</b>\n          <InputGroup type=\"text\" value={label} onChange={(e) => setLabel(e.target.value)} />\n        </Label>\n      </div>\n      <div className=\"row\">\n        <div className=\"label\">\n          <Label>\n            <b>Occupancy Schedule</b>\n            <InputGroup type=\"text\" value={schedule.label} readOnly />\n          </Label>\n        </div>\n        <div className=\"occupancy\">\n          <MultiSlider\n            min={START_TIME_MIN}\n            max={END_TIME_MAX}\n            stepSize={5}\n            labelStepSize={240}\n            labelRenderer={(v, o) =>\n              o?.isHandleTooltip || (v > START_TIME_MIN && v < END_TIME_MAX) ? toTimeFormat(v) : \"\"\n            }\n            disabled={!schedule.occupied}\n          >\n            <MultiSlider.Handle\n              type={HandleType.START}\n              interactionKind={HandleInteractionKind.LOCK}\n              intentAfter={!schedule.occupied ? Intent.NONE : Intent.SUCCESS}\n              value={values.schedule.start}\n              onChange={(v) => {\n                const copy = cloneDeep(schedule);\n                const occupied = schedule.occupied;\n                const endTime = toMinutes(schedule.endTime, true);\n                const startTime = clamp(v, START_TIME_MIN, Math.min(endTime, END_TIME_MAX) - TIME_PADDING);\n                const label = createScheduleLabel(\"all\", {\n                  occupied,\n                  startTime,\n                  endTime,\n                });\n                merge(copy, {\n                  startTime: toDataFormat(startTime),\n                  label,\n                });\n                setSchedule(copy);\n              }}\n            />\n            <MultiSlider.Handle\n              type={HandleType.START}\n              interactionKind={HandleInteractionKind.NONE}\n              intentAfter={\n                !values.previous.occupied\n                  ? Intent.NONE\n                  : inRange(values.previous.start, values.schedule.start, values.schedule.end)\n                  ? Intent.SUCCESS\n                  : Intent.PRIMARY\n              }\n              value={values.previous.start}\n            />\n            <MultiSlider.Handle\n              type={HandleType.END}\n              interactionKind={HandleInteractionKind.NONE}\n              intentBefore={\n                !values.previous.occupied\n                  ? Intent.NONE\n                  : inRange(values.previous.end, values.schedule.start, values.schedule.end)\n                  ? Intent.SUCCESS\n                  : Intent.PRIMARY\n              }\n              value={values.previous.end}\n            />\n            <MultiSlider.Handle\n              type={HandleType.END}\n              interactionKind={HandleInteractionKind.LOCK}\n              intentBefore={!schedule.occupied ? Intent.NONE : Intent.SUCCESS}\n              value={values.schedule.end}\n              onChange={(v) => {\n                const copy = cloneDeep(schedule);\n                const occupied = schedule.occupied;\n                const startTime = toMinutes(schedule.startTime, false);\n                const endTime = clamp(v, Math.max(startTime, START_TIME_MIN) + TIME_PADDING, END_TIME_MAX);\n                const label = createScheduleLabel(\"all\", {\n                  occupied,\n                  startTime,\n                  endTime,\n                });\n                merge(copy, {\n                  endTime: toDataFormat(endTime),\n                  label,\n                });\n                setSchedule(copy);\n              }}\n            />\n          </MultiSlider>\n        </div>\n        {allowUnoccupied ? (\n          <div className=\"unoccupied\">\n            <Checkbox\n              label=\"Unoccupied\"\n              checked={!schedule.occupied}\n              onClick={() => {\n                const copy = cloneDeep(schedule);\n                const occupied = !schedule.occupied;\n                const startTime = toMinutes(schedule.startTime, false);\n                const endTime = toMinutes(schedule.endTime, true);\n                const label = createScheduleLabel(\"all\", { occupied, startTime, endTime });\n                merge(copy, {\n                  occupied,\n                  label,\n                });\n                setSchedule(copy);\n              }}\n            />\n          </div>\n        ) : (\n          <div />\n        )}\n      </div>\n      <div>\n        <Label>\n          <b>Date</b>\n          <Popover2\n            content={\n              <DatePicker\n                value={date}\n                onChange={(d, u) => {\n                  if (d) {\n                    setDate(d);\n                  }\n                  setOpen(!u);\n                }}\n              />\n            }\n            isOpen={open}\n            placement=\"bottom-start\"\n          >\n            <Button rightIcon={IconNames.CALENDAR} onClick={() => setOpen(true)} minimal>\n              {moment(date).format(\"dddd MMMM Do YYYY\")}\n            </Button>\n          </Popover2>\n        </Label>\n      </div>\n      <div>\n        <Button\n          icon={IconNames.NEW_LAYER}\n          intent={Intent.PRIMARY}\n          minimal\n          onClick={() => {\n            const i = Math.max(\n              get(unit, \"configuration.occupancies.length\", 0),\n              get(editing, \"configuration.occupancies.length\", 0)\n            );\n            handleChange(\n              `configuration.occupancies.${i}`,\n              editing\n            )({\n              label: label,\n              date: date.toISOString(),\n              schedule: schedule,\n              configurationId: unit?.configuration?.id,\n              createdAt: moment().format(),\n              action: \"create\",\n            } as IOccupancy);\n            setLabel(\"\");\n            setDate(new Date());\n            setSchedule(clone(defaultSchedule));\n          }}\n        >\n          Create Occupancy\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport function Occupancies(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n}) {\n  const { unit, editing, handleChange } = props;\n\n  const dispatch = useDispatch();\n  const [deleting, setDeleting] = useState(undefined as DeepPartial<IOccupancy> | undefined);\n\n  const occupancies = merge(\n    [],\n    unit.configuration?.occupancies,\n    get(editing, \"configuration.occupancies\")\n  ) as (IOccupancy & {\n    index: number;\n  })[];\n  occupancies.forEach((h, i) => (h.index = i));\n  return (\n    <>\n      <Label>\n        <h3>Create Occupancy</h3>\n        <CreateOccupancy unit={unit} editing={editing} handleChange={handleChange} />\n      </Label>\n      <Label>\n        <h3>Temporary Occupancies</h3>\n        <ul>\n          {isEmpty(occupancies.filter((a) => a.action !== \"delete\")) ? (\n            <li key={\"empty\"}>No Temporary Occupancies Defined</li>\n          ) : (\n            occupancies\n              .filter((a) => a.action !== \"delete\")\n              .sort((a, b) => moment(b.date).valueOf() - moment(a.date).valueOf())\n              .map((occupancy, i) => (\n                <li key={occupancy.index}>\n                  <Occupancy\n                    key={occupancy.index}\n                    path={`configuration.occupancies.${occupancy.index}`}\n                    unit={unit}\n                    editing={editing}\n                    occupancy={occupancy}\n                    handleChange={handleChange}\n                  />\n                </li>\n              ))\n          )}\n        </ul>\n      </Label>\n      <Alert\n        intent={Intent.DANGER}\n        isOpen={deleting !== undefined}\n        confirmButtonText=\"Yes\"\n        cancelButtonText=\"Cancel\"\n        onConfirm={() => dispatch(deleteOccupancy(deleting?.id ?? -1))}\n        onClose={() => setDeleting(undefined)}\n      >\n        <p>Permanently delete the occupancy {deleting?.label}?</p>\n      </Alert>\n    </>\n  );\n}\n","import { Checkbox, InputGroup, Intent, Label, NumberRange, RangeSlider } from \"@blueprintjs/core\";\nimport {\n  END_TIME_MAX,\n  START_TIME_MIN,\n  TIME_PADDING,\n  createScheduleLabel,\n  toDataFormat,\n  toMinutes,\n  toTimeFormat,\n} from \"utils/schedule\";\nimport { clamp, get } from \"lodash\";\n\nimport { IUnit } from \"controllers/units/action\";\nimport { useCallback } from \"react\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Schedule(props: {\n  title: string;\n  path: string;\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  readOnly?: Array<\"title\" | \"occupied\" | \"unoccupied\">;\n}) {\n  const { title, path, unit, editing, handleChange, readOnly = [\"title\"] } = props;\n\n  const getValue = useCallback((field: string) => get(editing, field, get(unit, field)), [editing, unit]);\n\n  return (\n    <div className=\"row\">\n      <h3> </h3>\n      <div className=\"label\">\n        <Label>\n          <b>{title}</b>\n          <InputGroup\n            type=\"text\"\n            value={getValue(`${path}.label`)}\n            onChange={(e) => {\n              handleChange(`${path}.label`, editing)(e.target.value);\n            }}\n            readOnly={readOnly?.includes(\"title\")}\n          />\n        </Label>\n      </div>\n      <div className=\"schedule\">\n        <RangeSlider\n          min={START_TIME_MIN}\n          max={END_TIME_MAX}\n          stepSize={5}\n          labelStepSize={240}\n          intent={Intent.SUCCESS}\n          value={\n            getValue(`${path}.occupied`)\n              ? [toMinutes(getValue(`${path}.startTime`), false), toMinutes(getValue(`${path}.endTime`), true)]\n              : [START_TIME_MIN, START_TIME_MIN]\n          }\n          labelRenderer={(v, o) =>\n            o?.isHandleTooltip || (v > START_TIME_MIN && v < END_TIME_MAX) ? toTimeFormat(v) : \"\"\n          }\n          disabled={readOnly?.includes(\"occupied\") || !get(editing, `${path}.occupied`, get(unit, `${path}.occupied`))}\n          onChange={(v) => {\n            const occupied = getValue(`${path}.occupied`);\n            const startTime = clamp(\n              (v as NumberRange)[0],\n              START_TIME_MIN,\n              Math.min((v as NumberRange)[1], END_TIME_MAX) - TIME_PADDING\n            );\n            const endTime = clamp(\n              (v as NumberRange)[1],\n              Math.max((v as NumberRange)[0], START_TIME_MIN) + TIME_PADDING,\n              END_TIME_MAX\n            );\n            const label = createScheduleLabel(\"all\", { occupied, startTime, endTime });\n            handleChange(\n              `${path}`,\n              editing\n            )({ startTime: toDataFormat(startTime), endTime: toDataFormat(endTime), label });\n          }}\n        />\n      </div>\n      <div className=\"unoccupied\">\n        <Checkbox\n          label=\"Unoccupied\"\n          checked={!getValue(`${path}.occupied`)}\n          onClick={() => {\n            const occupied = !getValue(`${path}.occupied`);\n            const startTime = toMinutes(getValue(`${path}.startTime`), false);\n            const endTime = toMinutes(getValue(`${path}.endTime`), true);\n            const label = createScheduleLabel(\"all\", { occupied, startTime, endTime });\n            handleChange(`${path}`, editing)({ occupied, label });\n          }}\n          disabled={readOnly?.includes(\"unoccupied\")}\n        />\n      </div>\n    </div>\n  );\n}\n","import { IUnit } from \"controllers/units/action\";\nimport { Schedule } from \"./Schedule\";\nimport { parseBoolean } from \"utils/utils\";\nimport { DeepPartial } from \"../../utils/types\";\n\nconst holidaySchedule = parseBoolean(process.env.REACT_APP_HOLIDAY_SCHEDULE ?? \"\");\n\nexport function Schedules(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  readOnly?: boolean;\n}) {\n  const { unit, editing, handleChange, readOnly } = props;\n  return (\n    <>\n      <Schedule\n        title=\"Monday Schedule\"\n        path=\"configuration.mondaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Tuesday Schedule\"\n        path=\"configuration.tuesdaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Wednesday Schedule\"\n        path=\"configuration.wednesdaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Thursday Schedule\"\n        path=\"configuration.thursdaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Friday Schedule\"\n        path=\"configuration.fridaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Saturday Schedule\"\n        path=\"configuration.saturdaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      <Schedule\n        title=\"Sunday Schedule\"\n        path=\"configuration.sundaySchedule\"\n        unit={unit}\n        editing={editing}\n        handleChange={handleChange}\n        readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n      />\n      {holidaySchedule && (\n        <Schedule\n          title=\"Holiday Schedule\"\n          path=\"configuration.holidaySchedule\"\n          unit={unit}\n          editing={editing}\n          handleChange={handleChange}\n          readOnly={readOnly ? [\"title\", \"occupied\", \"unoccupied\"] : undefined}\n        />\n      )}\n    </>\n  );\n}\n","import {\n  COOLING_MAX,\n  DEADBAND_MAX,\n  DEADBAND_MIN,\n  HEATING_MIN,\n  SETPOINT_MAX,\n  SETPOINT_MIN,\n  SETPOINT_PADDING,\n  createSetpointLabel,\n  getSetpointMessage,\n} from \"utils/setpoint\";\nimport {\n  HandleInteractionKind,\n  HandleType,\n  InputGroup,\n  Intent,\n  Label,\n  MultiSlider,\n  NumericInput,\n} from \"@blueprintjs/core\";\nimport { clamp, get, merge } from \"lodash\";\nimport { useCallback, useMemo } from \"react\";\n\nimport { ISetpoint } from \"controllers/setpoints/action\";\nimport { IUnit } from \"controllers/units/action\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Setpoint(props: {\n  type: \"single\" | \"separate\" | \"both\";\n  title: string;\n  path: string;\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  setpoint: DeepPartial<ISetpoint> | undefined;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n  readOnly?: Array<\"title\">;\n}) {\n  const { type, title, path, unit, editing, setpoint, handleChange, readOnly = [\"title\"] } = props;\n\n  const getValue = useCallback((field: string) => get(editing, field, get(unit, field)), [editing, unit]);\n\n  const error = useMemo(\n    () => getSetpointMessage(merge({}, get(unit, path), setpoint)) || \"\\u00A0\",\n    [path, unit, setpoint]\n  );\n\n  const renderSingle = () => (\n    <MultiSlider\n      min={SETPOINT_MIN}\n      max={SETPOINT_MAX}\n      stepSize={0.5}\n      labelStepSize={5}\n      labelRenderer={(v, o) => (o?.isHandleTooltip || (v > HEATING_MIN && v < COOLING_MAX) ? `${v}º\\xa0F` : \"\")}\n    >\n      <MultiSlider.Handle\n        type={HandleType.START}\n        interactionKind={HandleInteractionKind.LOCK}\n        intentAfter={Intent.WARNING}\n        value={getValue(`${path}.heating`)}\n        onChange={(v) => {\n          const setpoint = getValue(`${path}.setpoint`);\n          const deadband = getValue(`${path}.deadband`);\n          const padding = SETPOINT_PADDING + deadband / 2;\n          const heating = clamp(v, HEATING_MIN, setpoint - padding);\n          const cooling = getValue(`${path}.cooling`);\n          const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n          handleChange(`${path}`, editing)({ heating, label });\n        }}\n      />\n      <MultiSlider.Handle\n        type={HandleType.START}\n        interactionKind={HandleInteractionKind.LOCK}\n        intentAfter={Intent.NONE}\n        value={getValue(`${path}.setpoint`) - getValue(`${path}.deadband`) / 2}\n        onChange={(v) => {\n          const deadband = getValue(`${path}.deadband`);\n          const padding = SETPOINT_PADDING + deadband / 2;\n          const heating = getValue(`${path}.heating`);\n          const cooling = getValue(`${path}.cooling`);\n          const value = v + deadband / 2;\n          const setpoint = clamp(value, heating + padding, cooling - padding);\n          const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n          handleChange(`${path}`, editing)({ setpoint, label });\n        }}\n      />\n      <MultiSlider.Handle\n        type={HandleType.END}\n        interactionKind={HandleInteractionKind.LOCK}\n        intentBefore={Intent.NONE}\n        value={getValue(`${path}.setpoint`) + getValue(`${path}.deadband`) / 2}\n        onChange={(v) => {\n          const deadband = getValue(`${path}.deadband`);\n          const padding = SETPOINT_PADDING + deadband / 2;\n          const heating = getValue(`${path}.heating`);\n          const cooling = getValue(`${path}.cooling`);\n          const value = v - deadband / 2;\n          const setpoint = clamp(value, heating + padding, cooling - padding);\n          const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n          handleChange(`${path}`, editing)({ setpoint, label });\n        }}\n      />\n      <MultiSlider.Handle\n        type={HandleType.END}\n        interactionKind={HandleInteractionKind.LOCK}\n        intentBefore={Intent.PRIMARY}\n        value={getValue(`${path}.cooling`)}\n        onChange={(v) => {\n          const setpoint = getValue(`${path}.setpoint`);\n          const deadband = getValue(`${path}.deadband`);\n          const padding = SETPOINT_PADDING + deadband / 2;\n          const heating = getValue(`${path}.heating`);\n          const cooling = clamp(v, setpoint + padding, COOLING_MAX);\n          const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n          handleChange(`${path}`, editing)({ cooling, label });\n        }}\n      />\n    </MultiSlider>\n  );\n\n  const renderOccupied = () => (\n    <Label>\n      <b>Occupied</b>\n      <MultiSlider\n        min={SETPOINT_MIN}\n        max={SETPOINT_MAX}\n        stepSize={0.5}\n        labelStepSize={5}\n        intent={Intent.SUCCESS}\n        labelRenderer={(v, o) => (o?.isHandleTooltip || (v > HEATING_MIN && v < COOLING_MAX) ? `${v}º\\xa0F` : \"\")}\n      >\n        <MultiSlider.Handle\n          type={HandleType.START}\n          interactionKind={HandleInteractionKind.LOCK}\n          intentBefore={Intent.WARNING}\n          intentAfter={Intent.SUCCESS}\n          value={getValue(`${path}.setpoint`) - getValue(`${path}.deadband`) / 2}\n          onChange={(v) => {\n            const deadband = getValue(`${path}.deadband`);\n            const padding = SETPOINT_PADDING + deadband / 2;\n            const heating = getValue(`${path}.heating`);\n            const cooling = getValue(`${path}.cooling`);\n            const value = v + deadband / 2;\n            const setpoint = clamp(value, heating + padding, cooling - padding);\n            const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n            handleChange(`${path}`, editing)({ setpoint, label });\n          }}\n        />\n        <MultiSlider.Handle\n          type={HandleType.END}\n          interactionKind={HandleInteractionKind.LOCK}\n          intentBefore={Intent.SUCCESS}\n          intentAfter={Intent.PRIMARY}\n          value={getValue(`${path}.setpoint`) + getValue(`${path}.deadband`) / 2}\n          onChange={(v) => {\n            const deadband = getValue(`${path}.deadband`);\n            const padding = SETPOINT_PADDING + deadband / 2;\n            const heating = getValue(`${path}.heating`);\n            const cooling = getValue(`${path}.cooling`);\n            const value = v - deadband / 2;\n            const setpoint = clamp(value, heating + padding, cooling - padding);\n            const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n            handleChange(`${path}`, editing)({ setpoint, label });\n          }}\n        />\n      </MultiSlider>\n    </Label>\n  );\n\n  const renderUnoccupied = () => (\n    <Label>\n      <b>Unoccupied</b>\n      <MultiSlider\n        min={SETPOINT_MIN}\n        max={SETPOINT_MAX}\n        stepSize={0.5}\n        labelStepSize={5}\n        labelRenderer={(v, o) => (o?.isHandleTooltip || (v > HEATING_MIN && v < COOLING_MAX) ? `${v}º\\xa0F` : \"\")}\n      >\n        <MultiSlider.Handle\n          type={HandleType.START}\n          interactionKind={HandleInteractionKind.LOCK}\n          intentBefore={Intent.WARNING}\n          value={getValue(`${path}.heating`)}\n          onChange={(v) => {\n            const setpoint = getValue(`${path}.setpoint`);\n            const deadband = getValue(`${path}.deadband`);\n            const padding = SETPOINT_PADDING + deadband / 2;\n            const heating = clamp(v, HEATING_MIN, setpoint - padding);\n            const cooling = getValue(`${path}.cooling`);\n            const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n            handleChange(`${path}`, editing)({ heating, label });\n          }}\n        />\n        <MultiSlider.Handle\n          type={HandleType.END}\n          interactionKind={HandleInteractionKind.LOCK}\n          intentAfter={Intent.PRIMARY}\n          value={getValue(`${path}.cooling`)}\n          onChange={(v) => {\n            const setpoint = getValue(`${path}.setpoint`);\n            const deadband = getValue(`${path}.deadband`);\n            const padding = SETPOINT_PADDING + deadband / 2;\n            const heating = getValue(`${path}.heating`);\n            const cooling = clamp(v, setpoint + padding, COOLING_MAX);\n            const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n            handleChange(`${path}`, editing)({ cooling, label });\n          }}\n        />\n      </MultiSlider>\n    </Label>\n  );\n\n  const renderSliders = () => {\n    switch (type) {\n      case \"both\":\n        return (\n          <div className=\"row\">\n            <div className=\"setpoint\">{renderSingle()}</div>\n            <div className=\"break\" />\n            <div className=\"setpoint\">{renderOccupied()}</div>\n            <div className=\"break\" />\n            <div className=\"setpoint\">{renderUnoccupied()}</div>\n            <div className=\"break\" />\n            <div />\n          </div>\n        );\n      case \"single\":\n        return (\n          <div className=\"row\">\n            <div className=\"setpoint\">{renderSingle()}</div>\n            <div className=\"break\" />\n            <div />\n          </div>\n        );\n      case \"separate\":\n      default:\n        return (\n          <div className=\"row\">\n            <div className=\"setpoint\">{renderOccupied()}</div>\n            <div className=\"break\" />\n            <div className=\"setpoint\">{renderUnoccupied()}</div>\n            <div className=\"break\" />\n            <div />\n          </div>\n        );\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <h3> </h3>\n        <div className=\"label\">\n          <Label>\n            <b>{title}</b>\n            <InputGroup\n              type=\"text\"\n              value={getValue(`${path}.label`)}\n              onChange={(e) => {\n                handleChange(`${path}.label`, editing)(e.target.value);\n              }}\n              readOnly={readOnly?.includes(\"title\")}\n            />\n          </Label>\n        </div>\n        <div className=\"deadband\">\n          <Label>\n            <b>Deadband</b>\n            <NumericInput\n              step={1}\n              min={DEADBAND_MIN}\n              max={DEADBAND_MAX}\n              value={getValue(`${path}.deadband`)}\n              onValueChange={(v) => {\n                const setpoint = getValue(`${path}.setpoint`);\n                const deadband = v;\n                const heating = getValue(`${path}.heating`);\n                const cooling = getValue(`${path}.cooling`);\n                const label = createSetpointLabel(\"all\", { setpoint, deadband, heating, cooling });\n                handleChange(`${path}`, editing)({ deadband, label });\n              }}\n            />\n          </Label>\n        </div>\n        <div className=\"error\">\n          <h4>{error}</h4>\n        </div>\n        <div></div>\n      </div>\n      {renderSliders()}\n    </>\n  );\n}\n","import { IUnit } from \"controllers/units/action\";\nimport { Setpoint } from \"./Setpoint\";\nimport { get } from \"lodash\";\nimport { DeepPartial } from \"../../utils/types\";\n\nexport function Setpoints(props: {\n  unit: IUnit;\n  editing: DeepPartial<IUnit> | null;\n  handleChange: (field: string, unit?: DeepPartial<IUnit> | null) => (value: any) => void;\n}) {\n  const { unit, editing, handleChange } = props;\n  return (\n    <Setpoint\n      type=\"separate\"\n      title=\"Setpoints\"\n      path=\"configuration.setpoint\"\n      unit={unit}\n      editing={editing}\n      setpoint={get(editing, \"configuration.setpoint\")}\n      handleChange={handleChange}\n    />\n  );\n}\n","import \"./style.scss\";\n\nimport { Alert, Button, Card, Collapse, InputGroup, Intent, Label, Position, Tree } from \"@blueprintjs/core\";\nimport { Header, Prompt } from \"components\";\nimport {\n  IConfiguration,\n  createConfiguration,\n  deleteConfiguration,\n  readConfigurations,\n  readConfigurationsPoll,\n  selectReadConfigurations,\n  updateConfiguration,\n} from \"controllers/configurations/action\";\nimport {\n  IFilter,\n  IUnit,\n  filterUnits,\n  readUnits,\n  readUnitsPoll,\n  selectFilterUnits,\n  selectReadUnits,\n  updateUnit,\n} from \"controllers/units/action\";\nimport { IconName, IconNames } from \"@blueprintjs/icons\";\nimport { cloneDeep, get, isEqualWith, isNil, isObject, merge, set } from \"lodash\";\n\nimport { Configuration } from \"./Configuration\";\nimport { Holidays } from \"./Holidays\";\nimport { Occupancies } from \"./Occupancies\";\nimport React from \"react\";\nimport { RootProps } from \"routes\";\nimport { Schedules } from \"./Schedules\";\nimport { Setpoints } from \"./Setpoints\";\nimport { RoleType, StageType } from \"common\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Unit } from \"./Unit\";\nimport { connect } from \"react-redux\";\nimport { createConfigurationDefault } from \"utils/configuration\";\nimport { defaultPollInterval } from \"controllers/poll/action\";\nimport { isSetpointValid } from \"utils/setpoint\";\nimport { DeepPartial } from \"../../utils/types\";\nimport { ISetpoint, updateSetpoint } from \"controllers/setpoints/action\";\n\ninterface UnitsProps extends RootProps {\n  readUnits: () => void;\n  readUnitsPoll: (payload?: number) => void;\n  filterUnits: (payload: IFilter) => void;\n  updateUnit: (payload: DeepPartial<IUnit>) => void;\n  units?: IUnit[];\n  filtered?: IUnit[];\n  readConfigurations: () => void;\n  readConfigurationsPoll: (payload?: number) => void;\n  createConfiguration: (payload: DeepPartial<IConfiguration>) => void;\n  updateConfiguration: (payload: DeepPartial<IConfiguration>) => void;\n  deleteConfiguration: (payload: number) => void;\n  configurations?: IConfiguration[];\n  updateSetpoint: (payload: DeepPartial<ISetpoint>) => void;\n}\n\ninterface UnitsState {\n  editing: DeepPartial<IUnit> | null;\n  expanded: string | null;\n  confirm: (() => void) | null;\n}\n\nclass Units extends React.Component<UnitsProps, UnitsState> {\n  constructor(props: UnitsProps) {\n    super(props);\n    this.state = {\n      editing: null,\n      expanded: null,\n      confirm: null,\n    };\n  }\n\n  componentDidMount() {\n    this.props.readUnits();\n    this.props.readConfigurations();\n    this.props.readUnitsPoll(defaultPollInterval);\n    this.props.readConfigurationsPoll(defaultPollInterval);\n  }\n\n  componentWillUnmount() {\n    this.props.readUnitsPoll();\n    this.props.readConfigurationsPoll();\n  }\n\n  getValue = (field: string, editing?: DeepPartial<IUnit> | null, unit?: DeepPartial<IUnit> | null) => {\n    const { units } = this.props;\n    const temp = unit ? unit : units?.find((v) => v.id === editing?.id);\n    return get(editing, field, get(temp, field));\n  };\n\n  handleChange = (field: string, editing?: DeepPartial<IUnit> | null) => {\n    return (value: any) => {\n      const doDefault = (value: any) => {\n        if (editing) {\n          if (isObject(this.getValue(field, editing))) {\n            set(editing, field, merge(cloneDeep(get(editing, field)), value));\n          } else {\n            set(editing, field, value);\n          }\n          this.setState({ editing });\n        }\n      };\n      switch (field) {\n        case \"configurationId\":\n          this.props.updateUnit({ id: editing?.id, configurationId: value as number });\n          break;\n        default:\n          doDefault(value);\n      }\n    };\n  };\n\n  handleCreate = (unit: DeepPartial<IUnit>) => {\n    const configuration = createConfigurationDefault();\n    configuration.unitId = unit.id;\n    this.props.createConfiguration(configuration);\n    this.setState({\n      editing: null,\n      expanded: null,\n    });\n  };\n\n  handleEdit = (unit: IUnit) => {\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    const current = editing && filtered?.find((v) => v.id === editing.id);\n    if (current && this.isSave(current)) {\n      this.setState({ confirm: () => this.setState({ editing: { id: unit.id } }) });\n    } else {\n      this.setState({ editing: { id: unit.id } });\n    }\n  };\n\n  handleCancel = () => {\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    const current = editing && filtered?.find((v) => v.id === editing.id);\n    if (current && this.isSave(current)) {\n      this.setState({ confirm: () => this.setState({ editing: null, expanded: null }) });\n    } else {\n      this.setState({ editing: null, expanded: null });\n    }\n  };\n\n  handleConfirm = () => {\n    const { confirm } = this.state;\n    this.setState({ confirm: null }, confirm ?? undefined);\n  };\n\n  handleSave = () => {\n    const { editing } = this.state;\n    if (editing) {\n      this.props.updateUnit(editing);\n    }\n  };\n\n  handleDelete = (configuration: DeepPartial<IConfiguration>) => {\n    const { id } = configuration;\n    if (id !== undefined) {\n      this.props.deleteConfiguration(id);\n    }\n  };\n\n  handlePush = (unit: DeepPartial<IUnit>) => {\n    const { id } = unit;\n    if (id !== undefined) {\n      this.props.updateUnit({ id, stage: StageType.UpdateType.label });\n    }\n  };\n\n  isSave = (unit: IUnit) => {\n    const { editing } = this.state;\n    const temp = merge({}, unit, editing);\n    const valid = isSetpointValid(temp.configuration?.setpoint);\n    return (\n      valid &&\n      !isEqualWith(unit, temp, (_a, _b, k) =>\n        [\"createdAt\", \"updatedAt\", \"action\"].includes(k as any) ? true : undefined\n      )\n    );\n  };\n\n  isPush = (unit: IUnit) => {\n    switch (unit.stage) {\n      case StageType.UpdateType.label:\n      case StageType.DeleteType.label:\n      case StageType.ProcessType.label:\n        return false;\n      case StageType.CreateType.label:\n      case StageType.CompleteType.label:\n      case StageType.FailType.label:\n      default:\n        return !this.isSave(unit);\n    }\n  };\n\n  isAdmin() {\n    const { user } = this.props;\n    return RoleType.Admin.granted(...(user?.role.split(\" \") ?? [\"\"]));\n  }\n\n  renderStatus(unit: IUnit) {\n    let icon: IconName = IconNames.ISSUE;\n    let intent: Intent = Intent.WARNING;\n    let message: string = \"Push Unit Configuration\";\n    switch (unit.stage) {\n      case StageType.UpdateType.label:\n        icon = IconNames.REFRESH;\n        intent = Intent.PRIMARY;\n        break;\n      case StageType.ProcessType.label:\n        icon = IconNames.REFRESH;\n        intent = Intent.SUCCESS;\n        break;\n      case StageType.CreateType.label:\n        icon = IconNames.ISSUE;\n        intent = Intent.WARNING;\n        break;\n      case StageType.DeleteType.label:\n        icon = IconNames.DELETE;\n        intent = Intent.DANGER;\n        break;\n      case StageType.CompleteType.label:\n        icon = IconNames.CONFIRM;\n        intent = Intent.SUCCESS;\n        break;\n      case StageType.FailType.label:\n        icon = IconNames.ERROR;\n        intent = Intent.DANGER;\n        break;\n      default:\n    }\n    return (\n      <Tooltip2 content={message} placement={Position.TOP} disabled={!this.isPush(unit)}>\n        <Button\n          icon={icon}\n          intent={intent}\n          minimal\n          onClick={() => this.handlePush(unit)}\n          disabled={!this.isPush(unit)}\n        />\n      </Tooltip2>\n    );\n  }\n\n  renderConfirm() {\n    const { confirm } = this.state;\n    if (confirm === null) {\n      return null;\n    }\n    return (\n      <Alert\n        intent={Intent.DANGER}\n        isOpen={true}\n        confirmButtonText=\"Yes\"\n        cancelButtonText=\"Cancel\"\n        onConfirm={() => this.handleConfirm()}\n        onClose={() => this.setState({ confirm: null })}\n      >\n        <p>There are changes which have not been saved. Do you still want to continue?</p>\n      </Alert>\n    );\n  }\n\n  renderPrompt() {\n    const { filtered } = this.props;\n    const { editing } = this.state;\n    const current = editing && filtered?.find((v) => v.id === editing.id);\n    const prompt = !isNil(current) && this.isSave(current);\n    return (\n      <Prompt when={prompt} message=\"There are changes which have not been saved. Do you still want to continue?\" />\n    );\n  }\n\n  render() {\n    const { filtered, configurations } = this.props;\n    const { editing, expanded } = this.state;\n    return (\n      <div className={\"units\"}>\n        {this.renderPrompt()}\n        <Header {...this.props} />\n        <h1>Units</h1>\n        <div className=\"list\">\n          {filtered?.map((unit, i) => {\n            return unit.id === editing?.id ? (\n              <Card key={unit.id ?? i} interactive>\n                <div className=\"row\">\n                  <div>\n                    <Label>\n                      <h3>{unit.label}</h3>\n                    </Label>\n                  </div>\n                  <div>\n                    {this.renderStatus(unit)}\n                    <Tooltip2 content=\"Save\" placement={Position.TOP} disabled={!this.isSave(unit)}>\n                      <Button\n                        icon={IconNames.FLOPPY_DISK}\n                        intent={Intent.PRIMARY}\n                        minimal\n                        onClick={() => this.handleSave()}\n                        disabled={!this.isSave(unit)}\n                      />\n                    </Tooltip2>\n                    <Tooltip2 content=\"Exit\" placement={Position.TOP}>\n                      <Button\n                        icon={IconNames.CROSS}\n                        intent={Intent.PRIMARY}\n                        minimal\n                        onClick={() => this.handleCancel()}\n                      />\n                    </Tooltip2>\n                  </div>\n                </div>\n                <div className=\"row\">\n                  <div>\n                    <Label>\n                      <b>Campus</b>\n                      <InputGroup type=\"text\" value={unit.campus} readOnly />\n                    </Label>\n                  </div>\n                  <div>\n                    <Label>\n                      <b>Building</b>\n                      <InputGroup type=\"text\" value={unit.building} readOnly />\n                    </Label>\n                  </div>\n                  <div>\n                    <Label>\n                      <b>System</b>\n                      <InputGroup type=\"text\" value={unit.system} readOnly />\n                    </Label>\n                  </div>\n                  <div>\n                    <Label>\n                      <b>Timezone</b>\n                      <InputGroup type=\"text\" value={unit.timezone} readOnly />\n                    </Label>\n                  </div>\n                  <div />\n                </div>\n                <Collapse isOpen={true}>\n                  <Tree\n                    contents={[\n                      {\n                        id: \"configuration\",\n                        label: \"Configuration\",\n                        icon: IconNames.SERIES_CONFIGURATION,\n                        hasCaret: true,\n                        isExpanded: expanded === \"configuration\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"configuration\"}>\n                    <Configuration\n                      unit={unit}\n                      editing={editing}\n                      configurations={configurations}\n                      handleChange={this.handleChange}\n                      handleCreate={this.handleCreate}\n                      readOnly={!this.isAdmin()}\n                    />\n                  </Collapse>\n                  <Tree\n                    contents={[\n                      {\n                        id: \"setpoints\",\n                        label: \"Setpoints\",\n                        icon: IconNames.TEMPERATURE,\n                        hasCaret: true,\n                        isExpanded: expanded === \"setpoints\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"setpoints\"}>\n                    <Setpoints unit={unit} editing={editing} handleChange={this.handleChange} />\n                  </Collapse>\n                  <Tree\n                    contents={[\n                      {\n                        id: \"schedules\",\n                        label: \"Occupancy Schedules\",\n                        icon: IconNames.TIME,\n                        hasCaret: true,\n                        isExpanded: expanded === \"schedules\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"schedules\"}>\n                    <Schedules\n                      unit={unit}\n                      editing={editing}\n                      handleChange={this.handleChange}\n                      readOnly={!this.isAdmin()}\n                    />\n                  </Collapse>\n                  <Tree\n                    contents={[\n                      {\n                        id: \"holidays\",\n                        label: \"Holidays\",\n                        icon: IconNames.TIMELINE_EVENTS,\n                        hasCaret: true,\n                        isExpanded: expanded === \"holidays\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"holidays\"}>\n                    <Holidays\n                      unit={unit}\n                      editing={editing}\n                      handleChange={this.handleChange}\n                      readOnly={!this.isAdmin()}\n                    />\n                  </Collapse>\n                  <Tree\n                    contents={[\n                      {\n                        id: \"occupancies\",\n                        label: \"Temporary Occupancy\",\n                        icon: IconNames.HOME,\n                        hasCaret: true,\n                        isExpanded: expanded === \"occupancies\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"occupancies\"}>\n                    <Occupancies unit={unit} editing={editing} handleChange={this.handleChange} />\n                  </Collapse>\n                  {/* <Tree\n                    contents={[\n                      {\n                        id: \"lockouts\",\n                        label: \"Lockouts\",\n                        icon: IconNames.LOCK,\n                        hasCaret: true,\n                        isExpanded: expanded === \"lockouts\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"lockouts\"}>\n                    <span>Lockouts Coming Soon</span>\n                  </Collapse> */}\n                  <Tree\n                    contents={[\n                      {\n                        id: \"rtu\",\n                        label: \"RTU Configuration\",\n                        icon: IconNames.COG,\n                        hasCaret: true,\n                        isExpanded: expanded === \"rtu\",\n                      },\n                    ]}\n                    onNodeExpand={(e) => this.setState({ expanded: e.id as string })}\n                    onNodeCollapse={() => this.setState({ expanded: null })}\n                    onNodeClick={(e) => this.setState({ expanded: e.id === expanded ? null : (e.id as string) })}\n                  />\n                  <Collapse isOpen={expanded === \"rtu\"}>\n                    <Unit\n                      unit={unit}\n                      editing={editing}\n                      handleChange={this.handleChange}\n                      hidden={\n                        this.isAdmin()\n                          ? [\n                              \"peakLoadExclude\",\n                              \"coolingPeakOffset\",\n                              \"heatingPeakOffset\",\n                              \"zoneLocation\",\n                              \"zoneMass\",\n                              \"zoneOrientation\",\n                              \"zoneBuilding\",\n                              \"coolingCapacity\",\n                              \"compressors\",\n                              \"heatPumpBackup\",\n                            ]\n                          : [\n                              \"location\",\n                              \"peakLoadExclude\",\n                              \"coolingPeakOffset\",\n                              \"heatingPeakOffset\",\n                              \"zoneLocation\",\n                              \"zoneMass\",\n                              \"zoneOrientation\",\n                              \"zoneBuilding\",\n                              \"coolingCapacity\",\n                              \"compressors\",\n                              \"optimalStartLockout\",\n                              \"optimalStartDeviation\",\n                              \"earliestStart\",\n                              \"latestStart\",\n                              \"heatPump\",\n                              \"heatPumpBackup\",\n                              \"heatPumpLockout\",\n                              \"economizer\",\n                              \"economizerSetpoint\",\n                              \"coolingLockout\",\n                            ]\n                      }\n                    />\n                  </Collapse>\n                </Collapse>\n              </Card>\n            ) : (\n              <Card key={unit.id ?? i} interactive>\n                <div className=\"row\">\n                  <div>\n                    <Label>\n                      <h3>{unit.label}</h3>\n                    </Label>\n                  </div>\n                  <div>\n                    {this.renderStatus(unit)}\n                    <Tooltip2 content=\"Edit\" placement={Position.TOP}>\n                      <Button\n                        icon={IconNames.EDIT}\n                        intent={Intent.PRIMARY}\n                        minimal\n                        onClick={() => this.handleEdit(unit)}\n                      />\n                    </Tooltip2>\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n          {this.renderConfirm()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  units: selectReadUnits(state),\n  filtered: selectFilterUnits(state),\n  configurations: selectReadConfigurations(state),\n});\n\nconst mapActionToProps = {\n  readUnits,\n  readUnitsPoll,\n  filterUnits,\n  updateUnit,\n  readConfigurations,\n  readConfigurationsPoll,\n  createConfiguration,\n  updateConfiguration,\n  deleteConfiguration,\n  updateSetpoint,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(Units);\n","import RouteBase from \"routes/RouteBase\";\nimport Units from \"./Units\";\n\nconst Root = (props: any) => <RouteBase {...props} renderRoute={(p) => <Units {...p} />} />;\n\nexport default Root;\n","import {\n  COOLING_DEFAULT,\n  DEADBAND_DEFAULT,\n  HEATING_DEFAULT,\n  SETPOINT_DEFAULT,\n  createSetpointLabel,\n} from \"utils/setpoint\";\nimport { END_TIME_DEFAULT, START_TIME_DEFAULT, createScheduleLabel, toDataFormat } from \"utils/schedule\";\n\nimport { DeepPartial } from \"./types\";\nimport { HolidayType } from \"common\";\nimport { IConfiguration } from \"controllers/configurations/action\";\nimport moment from \"moment\";\nimport { sum } from \"lodash\";\n\nconst createConfigurationLabel = (configuration?: DeepPartial<IConfiguration>) => {\n  return moment().format(\"dddd, MMMM Do YYYY\");\n};\n\nconst isConfigurationDelete = (configuration: DeepPartial<IConfiguration>) => {\n  return sum(Object.values(configuration?._count || {})) === 0;\n};\n\nconst createConfigurationDefault = (label: string = createConfigurationLabel()): DeepPartial<IConfiguration> => {\n  const setpoint = {\n    label: \"\",\n    setpoint: SETPOINT_DEFAULT,\n    deadband: DEADBAND_DEFAULT,\n    heating: HEATING_DEFAULT,\n    cooling: COOLING_DEFAULT,\n  };\n  setpoint.label = createSetpointLabel(\"all\", setpoint);\n  const schedule = {\n    label: \"\",\n    occupied: true,\n    startTime: toDataFormat(START_TIME_DEFAULT),\n    endTime: toDataFormat(END_TIME_DEFAULT),\n  };\n  schedule.label = createScheduleLabel(\"all\", schedule);\n  const unoccupied = {\n    label: \"\",\n    occupied: false,\n    startTime: toDataFormat(START_TIME_DEFAULT),\n    endTime: toDataFormat(END_TIME_DEFAULT),\n  };\n  unoccupied.label = createScheduleLabel(\"all\", unoccupied);\n  const enabled = [\n    HolidayType.NewYearsDayType,\n    HolidayType.MartinLutherKingJrType,\n    HolidayType.PresidentsDayType,\n    HolidayType.MemorialDayType,\n    HolidayType.JuneteenthType,\n    HolidayType.IndependenceDayType,\n    HolidayType.LaborDayType,\n    HolidayType.ColumbusDayType,\n    HolidayType.VeteransDayType,\n    HolidayType.ThanksgivingType,\n    HolidayType.BlackFridayType,\n    HolidayType.ChristmasType,\n  ].map((h) => h.name);\n  const holidays = HolidayType.values.map((h) => ({\n    label: h.label,\n    type: enabled.includes(h.name) ? (\"Enabled\" as const) : (\"Disabled\" as const),\n  }));\n  return {\n    label,\n    setpoint,\n    mondaySchedule: schedule,\n    tuesdaySchedule: schedule,\n    wednesdaySchedule: schedule,\n    thursdaySchedule: schedule,\n    fridaySchedule: schedule,\n    saturdaySchedule: unoccupied,\n    sundaySchedule: unoccupied,\n    holidaySchedule: unoccupied,\n    holidays: holidays,\n  };\n};\n\nexport { createConfigurationLabel, createConfigurationDefault, isConfigurationDelete };\n","import { isNumber, sum } from \"lodash\";\n\nimport { ISchedule } from \"controllers/schedules/action\";\nimport moment from \"moment\";\nimport { DeepPartial } from \"./types\";\n\nconst TIME_PADDING = 120;\nconst START_TIME_MIN = 0 * 60;\nconst START_TIME_DEFAULT = 8 * 60;\nconst END_TIME_MAX = 24 * 60;\nconst END_TIME_DEFAULT = 18 * 60;\nconst DATA_FORMAT = \"HH:mm\";\nconst TIME_FORMAT = \"h:mm\\xa0a\";\n\ntype Required = \"startTime\" | \"endTime\";\n\nconst toDataFormat = (value: number) =>\n  moment(\"00:00\", [DATA_FORMAT])\n    .add(Math.trunc(value / 60), \"hours\")\n    .add(value % 60, \"minutes\")\n    .format(DATA_FORMAT);\n\nconst toTimeFormat = (value: number) =>\n  moment(\"00:00\", [DATA_FORMAT])\n    .add(Math.trunc(value / 60), \"hours\")\n    .add(value % 60, \"minutes\")\n    .format(TIME_FORMAT);\n\nconst toUpperBound = (value: number, boundary: number, upper?: boolean) => (upper && value === 0 ? boundary : value);\n\nconst toMinutes = (value?: string, upper?: boolean) =>\n  toUpperBound(moment(value, [DATA_FORMAT, TIME_FORMAT]).hours(), 24, upper) * 60 +\n  moment(value, [DATA_FORMAT, TIME_FORMAT]).minutes();\n\nconst createScheduleLabel = (\n  type: \"all\" | Required,\n  schedule:\n    | (DeepPartial<ISchedule> & Pick<ISchedule, Required>)\n    | { occupied?: boolean; startTime: number; endTime: number }\n): string => {\n  const occupied = schedule?.occupied === undefined ? true : schedule.occupied;\n  const startTime = isNumber(schedule.startTime) ? schedule.startTime : toMinutes(schedule.startTime, false);\n  const endTime = isNumber(schedule.endTime) ? schedule.endTime : toMinutes(schedule.endTime, true);\n  switch (type) {\n    case \"startTime\":\n      return `${toTimeFormat(startTime)}`;\n    case \"endTime\":\n      return `${toTimeFormat(endTime)}`;\n    case \"all\":\n    default:\n      return occupied\n        ? startTime === 0 && endTime === 1440\n          ? \"Occupied All Day\"\n          : `Occupied From Start Time: ${toTimeFormat(startTime)} To End Time: ${toTimeFormat(endTime)}`\n        : \"Unoccupied All Day\";\n  }\n};\n\nconst getScheduleMessage = (schedule: DeepPartial<ISchedule> & Pick<ISchedule, Required>): string | undefined => {\n  return undefined;\n};\n\nconst isScheduleValid = (schedule: DeepPartial<ISchedule> & Pick<ISchedule, Required>): boolean => {\n  return getScheduleMessage(schedule) === undefined;\n};\n\nconst isScheduleDelete = (schedule: DeepPartial<ISchedule>) => {\n  return sum(Object.values(schedule?._count || {})) === 0;\n};\n\nexport {\n  TIME_PADDING,\n  START_TIME_MIN,\n  START_TIME_DEFAULT,\n  END_TIME_MAX,\n  END_TIME_DEFAULT,\n  DATA_FORMAT,\n  TIME_FORMAT,\n  toDataFormat,\n  toTimeFormat,\n  toMinutes,\n  createScheduleLabel,\n  getScheduleMessage,\n  isScheduleValid,\n  isScheduleDelete,\n};\n","import { isNumber, sum } from \"lodash\";\n\nimport { ISetpoint } from \"controllers/setpoints/action\";\nimport { ValidateType } from \"common\";\nimport { DeepPartial } from \"./types\";\n\nconst SETPOINT_PADDING = parseInt(process.env.REACT_APP_SETPOINT_PADDING || \"2\");\nconst DEADBAND_MIN = (ValidateType.DeadbandType.options?.min as number) || 2;\nconst DEADBAND_MAX = (ValidateType.DeadbandType.options?.max as number) || 6;\nconst DEADBAND_DEFAULT = (ValidateType.DeadbandType.options?.default as number) || 4;\nconst HEATING_MIN = (ValidateType.HeatingType.options?.min as number) || 55;\nconst HEATING_DEFAULT = (ValidateType.HeatingType.options?.default as number) || 60;\nconst COOLING_MAX = (ValidateType.CoolingType.options?.max as number) || 85;\nconst COOLING_DEFAULT = (ValidateType.CoolingType.options?.default as number) || 80;\nconst SETPOINT_MIN = HEATING_MIN;\nconst SETPOINT_MAX = COOLING_MAX;\nconst SETPOINT_DEFAULT = (ValidateType.SetpointType.options?.default as number) || 70;\n\ntype Required = \"setpoint\" | \"deadband\" | \"heating\" | \"cooling\";\n\nconst createSetpointLabel = (\n  type: \"all\" | Required,\n  setpoint: DeepPartial<ISetpoint> & Pick<ISetpoint, Required>\n): string => {\n  switch (type) {\n    case \"all\":\n      return `Occupied Setpoint: ${createSetpointLabel(\"setpoint\", setpoint)} Deadband: ${createSetpointLabel(\n        \"deadband\",\n        setpoint\n      )} Unoccupied Heating: ${createSetpointLabel(\"heating\", setpoint)} Cooling: ${createSetpointLabel(\n        \"cooling\",\n        setpoint\n      )}`;\n    case \"setpoint\":\n    case \"deadband\":\n    case \"heating\":\n    case \"cooling\":\n    default:\n      return `${setpoint[type]}º\\xa0F`;\n  }\n};\n\nconst getSetpointMessage = (setpoint: DeepPartial<ISetpoint> & Pick<ISetpoint, Required>): string | undefined => {\n  if (setpoint.deadband < DEADBAND_MIN || setpoint.deadband > DEADBAND_MAX) {\n    return `Deadband must be in the range [${DEADBAND_MIN},${DEADBAND_MAX}].`;\n  } else if (\n    setpoint.setpoint < setpoint.heating + SETPOINT_PADDING + setpoint.deadband / 2 ||\n    setpoint.setpoint > setpoint.cooling - SETPOINT_PADDING - setpoint.deadband / 2\n  ) {\n    return `Occupied setpoint must be in the range [${setpoint.heating + SETPOINT_PADDING + setpoint.deadband / 2},${\n      setpoint.cooling - SETPOINT_PADDING - setpoint.deadband / 2\n    }]`;\n  } else if (setpoint.heating < HEATING_MIN || setpoint.cooling > COOLING_MAX) {\n    return `Unoccupied heating and cooling must be in the range [${HEATING_MIN},${COOLING_MAX}]`;\n  } else if (setpoint.setpoint % 0.5 !== 0) {\n    return \"Occupied setpoint must be a whole or half degree.\";\n  } else if (setpoint.deadband % 1 !== 0) {\n    return \"Deadband must be a whole degree.\";\n  } else if (setpoint.heating % 0.5 !== 0 || setpoint.cooling % 0.5 !== 0) {\n    return \"Unoccupied heating or cooling must be a whole or half degree.\";\n  }\n};\n\nconst isSetpointValid = (setpoint: DeepPartial<ISetpoint> | undefined): boolean => {\n  if (\n    !setpoint ||\n    !isNumber(setpoint.setpoint) ||\n    !isNumber(setpoint.deadband) ||\n    !isNumber(setpoint.heating) ||\n    !isNumber(setpoint.cooling)\n  ) {\n    return false;\n  }\n  return getSetpointMessage(setpoint as DeepPartial<ISetpoint> & Pick<ISetpoint, Required>) === undefined;\n};\n\nconst isSetpointDelete = (setpoint: DeepPartial<ISetpoint>) => {\n  return sum(Object.values(setpoint?._count || {})) === 0;\n};\n\nexport {\n  SETPOINT_PADDING,\n  DEADBAND_MIN,\n  DEADBAND_MAX,\n  DEADBAND_DEFAULT,\n  HEATING_MIN,\n  HEATING_DEFAULT,\n  COOLING_MAX,\n  COOLING_DEFAULT,\n  SETPOINT_MIN,\n  SETPOINT_MAX,\n  SETPOINT_DEFAULT,\n  createSetpointLabel,\n  getSetpointMessage,\n  isSetpointValid,\n  isSetpointDelete,\n};\n"],"names":["Configuration","props","unit","editing","configurations","handleChange","handleCreate","readOnly","getValue","useCallback","field","get","className","content","text","onClick","map","configuration","label","id","placement","rightIcon","IconNames","minimal","type","value","onChange","e","target","Holiday","path","holiday","month","day","observance","suffix","ObservanceType","desc","moment","set","format","icon","intent","Intent","action","disabled","checked","holidayOrder","HolidayType","a","CreateHoliday","holidays","useState","setLabel","Date","date","setDate","setObservance","open","setOpen","d","u","isOpen","o","name","isEmpty","undefined","find","v","i","Math","max","getMonth","getDate","configurationId","createdAt","Holidays","dispatch","useDispatch","deleting","setDeleting","merge","forEach","h","index","filter","sort","b","valueOf","indexOf","confirmButtonText","cancelButtonText","onConfirm","deleteHoliday","onClose","Occupancy","occupancy","schedule","disable","startOf","isBefore","allowUnoccupied","parseBoolean","process","defaultSchedule","occupied","startTime","toDataFormat","START_TIME_DEFAULT","endTime","END_TIME_DEFAULT","CreateOccupancy","clone","setSchedule","toLowerCase","values","start","toMinutes","START_TIME_MIN","end","END_TIME_MAX","previous","min","stepSize","labelStepSize","labelRenderer","isHandleTooltip","toTimeFormat","HandleType","interactionKind","HandleInteractionKind","intentAfter","copy","cloneDeep","clamp","TIME_PADDING","createScheduleLabel","inRange","intentBefore","toISOString","Occupancies","occupancies","deleteOccupancy","Schedule","title","includes","holidaySchedule","Schedules","Setpoint","setpoint","error","useMemo","getSetpointMessage","renderSingle","SETPOINT_MIN","SETPOINT_MAX","HEATING_MIN","COOLING_MAX","deadband","padding","SETPOINT_PADDING","heating","cooling","createSetpointLabel","renderOccupied","renderUnoccupied","step","DEADBAND_MIN","DEADBAND_MAX","onValueChange","renderSliders","Setpoints","Units","units","temp","updateUnit","isObject","setState","doDefault","createConfigurationDefault","unitId","createConfiguration","expanded","handleEdit","filtered","state","current","isSave","confirm","handleCancel","handleConfirm","handleSave","handleDelete","deleteConfiguration","handlePush","stage","StageType","isSetpointValid","isEqualWith","_a","_b","k","isPush","this","readUnits","readConfigurations","readUnitsPoll","defaultPollInterval","readConfigurationsPoll","user","RoleType","granted","role","split","Position","prompt","isNil","when","message","renderPrompt","interactive","renderStatus","campus","building","system","timezone","contents","hasCaret","isExpanded","onNodeExpand","onNodeCollapse","onNodeClick","isAdmin","Unit","hidden","renderConfirm","React","mapActionToProps","filterUnits","updateConfiguration","updateSetpoint","connect","selectReadUnits","selectFilterUnits","selectReadConfigurations","RouteBase","renderRoute","p","createConfigurationLabel","isConfigurationDelete","sum","Object","_count","SETPOINT_DEFAULT","DEADBAND_DEFAULT","HEATING_DEFAULT","COOLING_DEFAULT","unoccupied","enabled","mondaySchedule","tuesdaySchedule","wednesdaySchedule","thursdaySchedule","fridaySchedule","saturdaySchedule","sundaySchedule","DATA_FORMAT","TIME_FORMAT","add","trunc","upper","boundary","toUpperBound","hours","minutes","isNumber","parseInt","ValidateType","default"],"sourceRoot":""}