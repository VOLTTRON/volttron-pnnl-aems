{"version":3,"file":"static/js/755.6c218905.chunk.js","mappings":";gJAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,KAClEP,EAAcC,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,GAEJF,EAASS,MAAMb,KAAMU,YAGzB,SAASI,EAAOP,EAAGQ,GACtB,IAAIT,EAAI,GACR,IAAK,IAAIV,KAAKW,EAAOf,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,IAAMmB,EAAEC,QAAQpB,GAAK,IAC9EU,EAAEV,GAAKW,EAAEX,IACb,GAAS,MAALW,GAAqD,oBAAjCf,OAAOyB,sBACtB,KAAIT,EAAI,EAAb,IAAgBZ,EAAIJ,OAAOyB,sBAAsBV,GAAIC,EAAIZ,EAAEe,OAAQH,IAC3DO,EAAEC,QAAQpB,EAAEY,IAAM,GAAKhB,OAAOU,UAAUgB,qBAAqBN,KAAKL,EAAGX,EAAEY,MACvEF,EAAEV,EAAEY,IAAMD,EAAEX,EAAEY,KAE1B,OAAOF,sGC/BLa,WAAKC,MAOEC,EAAYF,EAAE,UACdG,EAAoBD,EAAM,WAC1BE,EAA+BF,EAAM,4CCFlD,cAmBI,WAAYG,EAAUC,GAAtB,MACIC,EAAAA,KAAAA,KAAMF,EAAOC,IAAQ,YALjBE,EAAAA,WAAuB,GAEvBA,EAAAA,WAAuB,GA+CxBA,EAAAA,cAAgB,WACnB,GAAIA,EAAKC,WAAWjB,OAAS,EAAG,CAC5B,IAAwB,YAAKiB,WAALC,EAAAA,EAAAA,OAAAA,IAAiB,CAApC,IAAMC,EAAS,KAChBC,OAAOC,aAAaF,GAExBH,EAAKC,WAAa,KAOnBD,EAAAA,sBAAwB,WAC3B,GAAIA,EAAKM,WAAWtB,OAAS,EAAG,CAC5B,IAAwB,YAAKsB,WAALJ,EAAAA,EAAAA,OAAAA,IAAiB,CAApC,IAAMK,EAAS,KAChBH,OAAOI,qBAAqBD,GAEhCP,EAAKM,WAAa,MA5DjBG,EAAAA,EAAAA,IAAU,eACXT,EAAKU,cAAcV,EAAKH,SA2EpC,OAjGqE1B,EAAAA,EAAAA,IAAAA,EAAAA,GA0B1DwC,EAAAA,UAAAA,mBAAP,SAA0BC,EAAeC,EAAeC,IAC/CL,EAAAA,EAAAA,IAAU,eACXpC,KAAKqC,cAAcrC,KAAKwB,QAIzBc,EAAAA,UAAAA,qBAAP,WACItC,KAAK0C,gBACL1C,KAAK2C,yBASFL,EAAAA,UAAAA,sBAAP,SAA6BM,GACzB,IAAMC,EAASd,OAAOe,sBAAsBF,GAE5C,OADA5C,KAAKiC,WAAWc,KAAKF,GACd,WAAM,OAAAd,OAAOI,qBAAqBU,KAStCP,EAAAA,UAAAA,WAAP,SAAkBM,EAAsBI,GACpC,IAAMH,EAASd,OAAOkB,WAAWL,EAAUI,GAE3C,OADAhD,KAAK4B,WAAWmB,KAAKF,GACd,WAAM,OAAAd,OAAOC,aAAaa,KAoC3BP,EAAAA,UAAAA,cAAV,SAAwBY,KAG5B,EAjGA,CAAqEC,EAAAA,iCCgN/D,SAAUC,EACZC,EACAC,EACAC,GAQA,YAAuBC,IAAnBH,GAAyC,MAATC,GAA0B,MAATC,EAC1CD,IAAUC,EAGjBE,EAAAA,GAAiBJ,GAEVA,EAAeC,EAAOC,GAGtBD,EAAMD,KAAoBE,EAAMF,GCzNzC,SAAUK,EAAmBC,GAC/B,GAAY,MAARA,EACA,OAAO,EAKX,IAAMC,EAAOpE,OAAOoE,KAAKD,GACzB,OAAoB,IAAhBC,EAAKjD,QAA4B,kCAAZiD,EAAK,IAGoC,8BAA1DD,EAAwBE,8BAQ9B,SAAUC,EAAiBC,GAC7B,OAAqB,MAAdA,GAAsBL,EAAgBK,GAAc,KAAOA,ECsFtE,kBA+CI,WAAmBvC,EAA0BC,WAA7C,EACIC,EAAAA,KAAAA,KAAMF,EAAOC,IAAQ,KAlCjBE,EAAAA,YAAc,CAClBqC,YAAa,SAACC,GAA4B,OAACtC,EAAKuC,eAAiBD,IAQ7DtC,EAAAA,iCAAkC,EAOlCA,EAAAA,uBAAoD,KAepDA,EAAAA,mBAAoB,EA6JpBA,EAAAA,eAAiB,SAACwC,GAChB,MAAgCxC,EAAKH,MAAnC4C,EAAc,iBAAEC,EAAS,YAG3BC,EAAiBH,EAAUI,mBAE3BC,EC7QR,SACFhD,EACA6C,EACAD,GAEA,GAA2B,IAAvB5C,EAAMiD,MAAM9D,aAAmC6C,IAAnBY,EAC5B,OAAOA,EAEX,IAAMM,EAAQlD,EAAMmD,cAAcC,IAAIpD,EAAMqD,YAAYC,QAAO,SAAAnB,GAAQ,OAAQ,MAARA,KACvE,OAAOe,EAAM/D,OAAS,EAAI+D,EAAQL,EDoQVU,CAAoBZ,EADC,MAAlBG,EAAyB,KAAOD,EACYD,GACnE,GAAmB,MAAfI,GAAyC,MAAlBF,EACvB,OAAO,KAEX,IAAMU,EAAcrD,EAAKsD,oBACzB,OACI9B,EAAAA,cAAC+B,EAAAA,GAAI,CAACC,MAAOhB,EAAUD,gBAClBc,GAAeV,EACfE,GACCQ,GAAeV,IAMrB3C,EAAAA,WAAa,SAACgC,EAASyB,GAC3B,IAA4B,IAAxBzD,EAAKH,MAAM6D,SAAmB,CACxB,MAAwB1D,EAAK2D,MAA3BvB,EAAU,aAAEU,EAAK,QACnBc,EAAmB5D,EAAK2D,MAAMX,cAAc3D,QAAQ2C,IAAS,EAC7D6B,EAA4B,CAC9BC,OAAQrC,EAAkBzB,EAAKH,MAAMkE,WAAY5B,EAAcC,GAAaJ,GAC5E0B,SAAUM,EAAehC,EAAMyB,EAAOzD,EAAKH,MAAMoE,cACjDL,iBAAgB,GAEpB,OAAO5D,EAAKH,MAAMqE,aAAalC,EAAM,CACjCmC,YAAa,SAAA/E,GAAK,SAAKgF,iBAAiBpC,EAAM5C,IAC9CqE,MAAK,EACLI,UAAS,EACTf,MAAK,IAIb,OAAO,MAGH9C,EAAAA,yBAA2B,WAC/B,GAAIA,EAAKqE,uBAAwB,CACvB,MAAwBrE,EAAK2D,MAA3BvB,EAAU,aACZkC,EADmB,QACEC,OAIrBC,EAAWzC,EAAgBK,GACjC,OAAOpC,EAAKH,MAAM4E,sBAAuBH,EAAcE,GAJG,SAAAE,GACtD1E,EAAK2E,iBAAiBL,EAAcI,MAM5C,OAAO,MAwCH1E,EAAAA,iBAAmB,SAAC8C,EAAe4B,eAGjC1C,EAAwC,QAApC,GAAG,IAAKnC,OAAM+E,8BAAsBC,IAAAA,OAAA,EAAAA,EAAAA,KAAAA,EAAG/B,GACrC,MAARd,IACuB,QAAvB,OAAKnC,OAAMiF,oBAAYC,IAAAA,GAAAA,EAAAA,KAAAA,EAAG/C,EAAM0C,GAChC1E,EAAKgF,oBAILhF,EAAAA,iBAAmB,SAACgC,EAASiD,WACjCjF,EAAKkF,cAAclD,GACI,QAAvB,OAAKnC,OAAMiF,oBAAYD,IAAAA,GAAAA,EAAAA,KAAAA,EAAG7C,EAAMiD,GAChCjF,EAAKgF,mBAGDhF,EAAAA,YAAc,SAACmF,GAWnB,IAVM,IAEFC,EAFE,EAA2CpF,EAAKH,MAA9C+E,EAAsB,yBAAES,EAAY,eAGtCC,EAAc,GAKdC,EAAoB,GAEN,MAAAJ,EAAAjF,EAAAA,EAAAA,OAAAA,IAAS,CAAxB,IAAM4C,EAAK,KACN0C,EAAYC,EAAgB3C,EAAO9C,EAAKH,OAE9C,QAAkBgC,IAAd2D,EACAJ,EAAiBI,EACjBD,EAAkBnE,KAAKoE,QACpB,GAAIxF,EAAK0F,iBAAkB,CAC9B,IAAMC,EAAgC,OAAtBf,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAyB9B,QACzBjB,IAAZ8D,GACAJ,EAAkBnE,KAAKuE,QAG3BL,EAAYlE,KAAK0B,GAOzB9C,EAAK4F,SAASN,EAAYO,KAAK,OAAO,QAIfhE,IAAnBuD,GACApF,EAAKkF,cAAcE,GAGX,OAAZC,QAAY,IAAZA,GAAAA,EAAeE,IAGXvF,EAAAA,cAAgB,SAACiF,WAEba,EAAYb,EAAK,QACzB,GAAIa,IAAYC,EAAAA,IAAiBD,IAAYC,EAAAA,GAAiB,CAC1Dd,EAAMe,iBACN,IAAMZ,EAAiBpF,EAAKiG,kBAAkBH,IAAYC,EAAAA,IAAiB,EAAI,GACzD,MAAlBX,GACApF,EAAKkF,cAAcE,QAEhBU,IAAYC,EAAAA,KACnB/F,EAAKkG,mBAAoB,GAGT,QAApB,OAAKrG,OAAMsG,iBAAStB,IAAAA,GAAAA,EAAAA,KAAAA,EAAGI,IAGnBjF,EAAAA,YAAc,SAACiF,GACX,IAAAmB,EAAYpG,EAAKH,MAAKuG,QACtBhE,EAAepC,EAAK2D,MAAKvB,WAG7B6C,EAAMa,UAAYC,EAAAA,IAAc/F,EAAKkG,oBAKrCjB,EAAMe,iBACY,MAAd5D,GAAsBL,EAAgBK,GACtCpC,EAAK2E,iBAAiB3E,EAAK2D,MAAMb,MAAOmC,GAExCjF,EAAKoE,iBAAiBhC,EAAY6C,GAEtCjF,EAAKkG,mBAAoB,GAGtB,OAAPE,QAAO,IAAPA,GAAAA,EAAUnB,IAGNjF,EAAAA,uBAAyB,SAACiF,WACxBnC,EAAiB,MAATmC,EAAgB,GAAKA,EAAMoB,OAAOC,MAChDtG,EAAK4F,SAAS9C,GACU,QAAxB,OAAKjD,OAAM0G,qBAAa1B,IAAAA,GAAAA,EAAAA,KAAAA,EAAG/B,EAAOmC,IAtV1B,MAAepF,EAAK,MAApBiD,OAAK,IAAG,KAAE0D,EACZC,EAA4C,QAA/B,EAAG5G,EAAM+E,8BAAsB8B,IAAAA,OAAA,EAAAA,EAAAA,KAA5B7G,EAA+BiD,GAC/CE,EAAgB2D,EAAiB7D,EAAOjD,UAE9CG,EAAK2D,MAAQ,CACTvB,gBACyBP,IAArBhC,EAAMuC,WACAvC,EAAMuC,WACiB,QAAxB,EAACvC,EAAM+G,yBAAiB/B,IAAAA,EAAAA,EAAIgC,EAAoB7D,EAAenD,EAAMoE,cAC9EwC,cAAa,EACbzD,cAAa,EACbF,MAAK,KAiYjB,OA9bkC3E,EAAAA,EAAAA,GAQhB2I,EAAAA,OAAd,WACI,OAAOA,GAwDJA,EAAAA,UAAAA,OAAP,WACU,MAAyEzI,KAAKwB,MAA5EkH,EAAS,YAAEhE,EAAK,QAAEiE,EAAQ,WAAEnC,EAAAA,EAAAA,iBAAAoC,OAAgB,IAAG,EAAA5I,KAAK6I,eAAcrC,EACpE2B,EAAwCnI,KAAKsF,MAAzBwD,GAAL,gBAAoB,IAAnC,oBACN,OAAOH,EAAS,OACTG,GAAe,CAClBJ,UAAS,EACT3C,iBAAkB/F,KAAK+F,iBACvBgD,cAAe/I,KAAK+I,cACpBC,YAAahJ,KAAKgJ,YAClBC,YAAajJ,KAAKiJ,YAClBC,kBAAmBlJ,KAAKmJ,uBACxBC,SAAUR,EAAiB,OACpBE,GAAe,CAClBpE,MAAK,EACLR,eAAgBlE,KAAKqJ,YAAYrF,YACjCO,iBAAkBvE,KAAKsJ,yBACvBzE,WAAY7E,KAAK6E,kBAKtB4D,EAAAA,UAAAA,mBAAP,SAA0Bc,GAA1B,gBACkC/F,IAA1BxD,KAAKwB,MAAMuC,YAA4B/D,KAAKwB,MAAMuC,aAAe/D,KAAKsF,MAAMvB,aAC5E/D,KAAKwJ,iCAAkC,EACvCxJ,KAAKyJ,SAAS,CAAE1F,WAAY/D,KAAKwB,MAAMuC,cAGnB,MAApB/D,KAAKwB,MAAMiD,OAAiBzE,KAAKwB,MAAMiD,QAAU8E,EAAU9E,MAE3DzE,KAAKuH,SAASvH,KAAKwB,MAAMiD,MAAOzE,KAAKwB,MAAMkI,aAAc1J,KAAKwB,OAG7DiC,EAAAA,GAAyBzD,KAAKwB,MAAO+H,EAAW,CAC7CI,QAAS,CAAC,QAAS,oBAAqB,oBAG5C3J,KAAKuH,SAASvH,KAAKsF,MAAMb,OAGzBzE,KAAKwJ,kCAGLxJ,KAAK8C,uBAAsB,WAAM,SAAK8G,8BAEtC5J,KAAKwJ,iCAAkC,IAIxCf,EAAAA,UAAAA,yBAAP,WACI,IAAMoB,GAAuD,IAAlC7J,KAAKwB,MAAMqI,mBAChCC,GAA8B1G,EAChCpD,KAAKwB,MAAMkE,WACX5B,EAAc9D,KAAK+J,wBACnBjG,EAAc9D,KAAKwB,MAAMuC,aAI7B,GAFA/D,KAAK+J,uBAAyB,KAEzBF,IAAsBC,EAA3B,CAIA,IAAME,EAAgBhK,KAAKiK,mBAC3B,GAA2B,MAAvBjK,KAAKkE,gBAA2C,MAAjB8F,EAAuB,CAC9C,IAAWE,EAA0CF,EAAa,UAA9BG,EAAiBH,EAAa,aACpE,EAIFhK,KAAKkE,eAHMkG,EAAe,YACfC,EAAe,YACZC,EAAY,eAGxB,EAAgCtK,KAAKuK,wBAAnCC,EAAU,aAGZC,EAAmBP,EAAYC,EAHJ,gBAGmCC,EAC9DM,EAAgBR,EAAYM,EAAaJ,EAE3CK,GAAoBJ,EAAkBC,EAEtCtK,KAAKkE,eAAeyG,UAAYF,EAAmBN,EAAeG,EAC3DI,GAAiBL,IAExBrK,KAAKkE,eAAeyG,UAAYD,EAAgBP,MAKrD1B,EAAAA,UAAAA,SAAP,SAAgBhE,EAAemG,EAA2CpJ,cAA3C,IAAAoJ,IAAAA,EAAkB5K,KAAKwB,MAAMkI,mBAAc,IAAAlI,IAAAA,EAAQxB,KAAKwB,OAC3E,IAAA+E,EAA2B/E,EAAK,uBAExCxB,KAAKwJ,iCAAkC,EACf/E,IAAUzE,KAAKsF,MAAMb,QAEtB,QAAnB,EAAAjD,EAAM0G,qBAAaG,IAAAA,GAAAA,EAAAA,KAAnB7G,EAAsBiD,IAM1B,IAAMoG,EAAepG,EAAMyB,OACrBvB,EAAgB2D,EAAiBuC,EAAcrJ,GAC/C4G,EACwB,MAA1B7B,GAAmD,KAAjBsE,EAAsBtE,EAAuBsE,QAAgBrH,EACnGxD,KAAKyJ,SAAS,CAAErB,cAAa,EAAEzD,cAAa,EAAEF,MAAK,IAGnD,IAAMqG,EAAc9K,KAAK+K,eAAepG,IAEpCiG,GACAE,EAAc,GACdnF,EAAe7B,EAAc9D,KAAKsF,MAAMvB,YAAa+G,EAAatJ,EAAMoE,iBAIpE5F,KAAKgG,wBAA0BhG,KAAKiF,oBACpCjF,KAAK6G,cDpSV,CAAEhD,8BAA+B,8BCsS5B7D,KAAK6G,cAAc2B,EAAoB7D,EAAenD,EAAMoE,iBAKjE6C,EAAAA,UAAAA,cAAP,SAAqB1E,eACjB/D,KAAK+J,uBAAyBhG,OACAP,IAA1BxD,KAAKwB,MAAMuC,aAEX/D,KAAKwJ,iCAAkC,EACvCxJ,KAAKyJ,SAAS,CAAE1F,WAAU,KAG1BL,EAAgBK,GACa,QAA7B,KAAA/D,KAAKwB,OAAMwJ,0BAAkBxE,IAAAA,GAAAA,EAAAA,KAAAA,EAAG,MAAM,GAET,QAA7B,KAAAxG,KAAKwB,OAAMwJ,0BAAkBtE,IAAAA,GAAAA,EAAAA,KAAAA,EAAG3C,GAAY,IA4D5C0E,EAAAA,UAAAA,iBAAR,WACY,IAAA1E,EAAe/D,KAAKsF,MAAKvB,WACjC,GAA2B,MAAvB/D,KAAKkE,eAAwB,CAC7B,GAAIR,EAAgBK,GAAa,CAC7B,IAAMqB,EAAQpF,KAAKiF,oBAAsB,EAAIjF,KAAKsF,MAAMX,cAAchE,OACtE,OAAOX,KAAKkE,eAAe+G,SAAStH,KAAKyB,GAEzC,IAAM0F,EAAc9K,KAAK+K,iBACzB,OAAO/K,KAAKkE,eAAe+G,SAAStH,KAAKmH,KAM7CrC,EAAAA,UAAAA,eAAR,SAAuB/D,QAAA,IAAAA,IAAAA,EAAQ1E,KAAKsF,MAAMX,eAC9B,IAAAZ,EAAe/D,KAAKsF,MAAKvB,WACjC,GAAkB,MAAdA,GAAsBL,EAAgBK,GACtC,OAAQ,EAGZ,IAAK,IAAIvD,EAAI,EAAGA,EAAIkE,EAAM/D,SAAUH,EAChC,GAAI4C,EAAkBpD,KAAKwB,MAAMkE,WAAYhB,EAAMlE,GAAIuD,GACnD,OAAOvD,EAGf,OAAQ,GAGJiI,EAAAA,UAAAA,sBAAR,WAEU,MAAgCyC,iBAAiBlL,KAAKkE,gBAApDsG,EAAU,aAClB,MAAO,CACHW,cAAeC,EAFc,iBAG7BZ,WAAYY,EAAWZ,KAgHvB/B,EAAAA,UAAAA,kBAAR,SAA0B4C,EAAmBC,GACzC,SADyC,IAAAA,IAAAA,EAAatL,KAAK+K,kBACvD/K,KAAKgG,0BAEe,IAAfsF,IAAmC,IAAfD,GACpBC,IAAetL,KAAKsF,MAAMX,cAAchE,OAAS,GAAmB,IAAd0K,GAEvD,MDzgBL,CAAExH,8BAA+B,6BC4gBpC,OAAO2E,EAAoBxI,KAAKsF,MAAMX,cAAe3E,KAAKwB,MAAMoE,aAAcyF,EAAWC,IAGrF7C,EAAAA,UAAAA,qBAAR,WACI,OACIzI,KAAKqH,kBACgB,KAArBrH,KAAKsF,MAAMb,QAIVzE,KAAKuL,yCAIN9C,EAAAA,UAAAA,kBAAR,WACI,MAA4C,UAArCzI,KAAKwB,MAAMgK,uBAGd/C,EAAAA,UAAAA,eAAR,WACI,OAA4C,MAArCzI,KAAKwB,MAAM+E,wBAAsE,MAApCvG,KAAKwB,MAAM4E,uBAG3DqC,EAAAA,UAAAA,sCAAR,sBAGI,OAAOzI,KAAKsF,MAAMX,cAAc8G,MAAK,SAAA9H,GACjC,OAAAP,EAAkBzB,EAAKH,MAAMkE,WAAY/B,EAAMhC,EAAK2D,MAAM8C,mBAI1DK,EAAAA,UAAAA,gBAAR,WACQzI,KAAKwB,MAAMkK,eACX1L,KAAKuH,SAAS,IAAI,IA1bZkB,EAAAA,YAAiBkD,EAAAA,EAAkB,aAEnClD,EAAAA,aAAe,CACzBpD,UAAU,EACVqE,cAAc,GAybtB,EA9bA,CAAkCpH,GAgclC,SAAS8I,EAAWnD,GAChB,OAAgB,MAATA,EAAgB,EAAI2D,SAAS3D,EAAM4D,MAAM,GAAI,GAAI,IAG5D,SAASzE,EAAmB3C,EAAe4D,OAAE3D,EAAK,QAAEoH,EAAa,gBAC7D,GAAIrI,EAAAA,GAAiBqI,GAGjB,IAAK,IAAItL,EAAI,EAAGA,EAAIkE,EAAM/D,OAAQH,IAAK,CACnC,IAAMmD,EAAOe,EAAMlE,GACnB,GAAIsL,EAAcrH,EAAOd,EAAMnD,GAAG,GAC9B,OAAOmD,GAOvB,SAAS2E,EAAoB7D,EAAe4D,OAAE3D,EAAK,QAAEoH,EAAa,gBAAEC,EAAiB,oBACjF,OAAItI,EAAAA,GAAiBsI,GAEVA,EAAkBtH,EAAOC,GACzBjB,EAAAA,GAAiBqI,GACjBpH,EAAMI,QAAO,SAACnB,EAAMyB,GAAU,OAAA0G,EAAcrH,EAAOd,EAAMyB,MAE7DV,EAaX,SAASiB,EAAkBhC,EAAgByB,EAAeQ,GACtD,OAAoB,MAAhBA,GAAgC,MAARjC,IAEjBF,EAAAA,GAAiBmC,GACjBA,EAAajC,EAAMyB,KAErBzB,EAAKiC,IAYZ,SAAU4C,EACZ9D,EACAkB,EACAyF,EACAC,GAEA,QAHA,IAAAD,IAAAA,EAAAA,QACA,IAAAC,IAAAA,EAAa5G,EAAM/D,OAAS,GAEP,IAAjB+D,EAAM/D,OACN,OAAO,KAGX,IArCgBsH,EAAe+D,EAAaC,EAqCxC7G,EAAQkG,EACNY,EAAWxH,EAAM/D,OAAS,EAChC,GAGI,GA1CwCsL,EAyCCC,GACpCvG,EAAejB,EADpBU,GAzCY6C,EAyCO7C,EAAQiG,IAzCAW,EAyCW,GAvC/BC,EACAhE,EAAQgE,EACRD,EAEJ/D,GAoC+B7C,EAAOQ,GACrC,OAAOlB,EAAMU,SAEZA,IAAUkG,IAA8B,IAAhBA,GACjC,OAAO,KEtjBX,4EAOW3J,EAAAA,MAAsB,CAAEwK,QAAQ,GAE/BxK,EAAAA,eAAiB8G,EAAU2D,SAE5BzK,EAAAA,aAAwC,KAEvCA,EAAAA,UAAiC,KAIjCA,EAAAA,gBAAyC0K,EAAAA,EAAAA,IAAW1K,EAAM,eAAqC,QAAvB,EAAEA,EAAKH,MAAM8K,kBAAUjE,IAAAA,OAAA,EAAAA,EAAEkE,UAEjG5K,EAAAA,mBAAqB,SAACsC,GAA6B,OAACtC,EAAK6K,UAAYvI,GA4BrEtC,EAAAA,gBAAkB,SAACwC,SAEjB,EAOFxC,EAAKH,MANLiL,EAAI,OACJtE,EAAAA,EAAAA,WAAAuE,OAAU,IAAG,GAAIvE,EACjBzB,EAAAA,EAAAA,SAAArB,OAAQ,IAAG,GAAKqB,EAChBiG,EAAAA,EAAAA,WAAAL,OAAU,IAAG,KAAEK,EACfC,EAAAA,EAAAA,aAAAC,OAAY,IAAG,KAAED,EACjBE,EAAgB,mBAGhBL,IACAI,EAAaJ,MAAO,GAGpBK,IAC8B,MAA1BD,EAAarH,YACbqH,EAAarH,UAAY,IAG7BqH,EAAarH,UAAUuH,SAAW,CAC9BC,SAAS,EACTC,GAAI,SAAAC,GAEA,OADAA,EAAKC,OAAOC,MAAWF,EAAKG,QAAQC,UAAUF,MAAK,KAC5CF,GAEXK,MAAO,KAGXV,EAAaW,WAAY,EACzBX,EAAaY,eAAiB,OAGlC,IAAMC,EACFvK,EAAAA,cAACwK,EAAAA,GAAUvN,EAAAA,CACPwN,SAAS,SACTC,YAAY,YACZC,aAAcnM,EAAKoM,uBAAuB5J,EAAUM,QAChD6H,EAAU,CACdC,SAAU5K,EAAKqM,eACfC,SAAU9J,EAAU+E,kBACpBjB,MAAO9D,EAAUM,SAIjBsE,EAA+B5E,EAAS,cAAzB6E,EAAgB7E,EAAS,YAChD,OAEIhB,EAAAA,cAAC+K,EAAAA,GAAO9N,EAAAA,CACJ+N,WAAW,EACXC,cAAc,EACdjC,OAAQxK,EAAK2D,MAAM6G,OACnB9G,SAAUA,EACVgJ,SAAUC,EAAAA,GAAAA,aACNzB,EAAY,CAChBnE,UAAW6F,GAAAA,CAAWpK,EAAUuE,UAAWmE,EAAanE,WACxD8F,cAAe7M,EAAK8M,yBACpBC,iBAAkBH,GAAAA,CAAWnN,EAAwByL,EAAa6B,kBAAgBrG,EAAAA,GAC9EA,EAACjH,GAAoC0L,EAD2C,IAGpF6B,UAAWhN,EAAKiN,qBAChBC,SAAUlN,EAAKmN,oBACfC,UAAWpN,EAAKqN,uBAEhB7L,EAAAA,cAAAA,MAAAA,CACI2E,UAAWnG,EAAK2D,MAAM6G,OAASpD,EAAgBpH,EAAKsN,oBACpDlH,QAASpG,EAAK2D,MAAM6G,OAASnD,OAAcxF,GAE1C7B,EAAKH,MAAMyJ,UAEhB9H,EAAAA,cAAAA,MAAAA,CAAK2E,UAAWiB,EAAehB,QAASiB,GACnC0D,EAAagB,OAAQlK,EACrBW,EAAUiF,YAWnBzH,EAAAA,oBAAsB,SAACiF,GAIvBA,EAAMsI,QAAUxH,EAAAA,IAAiBd,EAAMsI,QAAUxH,EAAAA,KACjDd,EAAMe,iBACNhG,EAAK8H,SAAS,CAAE0C,QAAQ,MAIxBxK,EAAAA,iBAAmB,SAACgC,EAASiD,WACjCjF,EAAK8H,SAAS,CAAE0C,QAAQ,IACD,QAAvB,OAAK3K,OAAMiF,oBAAYD,IAAAA,GAAAA,EAAAA,KAAAA,EAAG7C,EAAMiD,IAG5BjF,EAAAA,yBAA2B,SAACwK,EAAiBvF,WACjDjF,EAAK8H,SAAS,CAAE0C,OAAM,IACgB,QAAtC,EAAuB,QAAvB,IAAK3K,MAAMqL,oBAAYxE,IAAAA,OAAA,EAAAA,EAAEmG,qBAAahI,IAAAA,GAAAA,EAAAA,KAAAA,EAAG2F,EAAQvF,IAG7CjF,EAAAA,qBAAuB,SAACwN,WAE5BxN,EAAKyN,uBAAyBC,SAASrF,cAEnCrI,EAAKH,MAAM8N,cACX3N,EAAK4N,aAGyB,QAAlC,EAAuB,QAAvB,IAAK/N,MAAMqL,oBAAYxE,IAAAA,OAAA,EAAAA,EAAEsG,iBAASnI,IAAAA,GAAAA,EAAAA,KAAAA,EAAG2I,IAGjCxN,EAAAA,oBAAsB,SAACwN,WAEL,MAAlBxN,EAAK6K,WACL7K,EAAK6K,UAAU5C,2BAGnBjI,EAAKmB,uBAAsB,iBACf,EAAoBnB,EAAKH,MAAK8K,YAET,UAFX,IAAG,KAAE9F,GAER2H,YACM,QAAjB,IAAKqB,oBAAYnH,IAAAA,GAAAA,EAAEoH,YAIM,QAAjC,EAAuB,QAAvB,IAAKjO,MAAMqL,oBAAYxE,IAAAA,OAAA,EAAAA,EAAEwG,gBAAQrI,IAAAA,GAAAA,EAAAA,KAAAA,EAAG2I,IAGhCxN,EAAAA,qBAAuB,SAACwN,WAG5BxN,EAAKmB,uBAAsB,gBACaU,IAAhC7B,EAAKyN,yBACLzN,EAAKyN,uBAAuBK,QAC5B9N,EAAKyN,4BAAyB5L,MAIJ,QAAlC,EAAuB,QAAvB,IAAKhC,MAAMqL,oBAAYxE,IAAAA,OAAA,EAAAA,EAAE0G,iBAASvI,IAAAA,GAAAA,EAAAA,KAAAA,EAAG2I,IAGjCxN,EAAAA,WAAa,WAAM,SAAK6K,WAAa7K,EAAK6K,UAAUjF,SAAS,IAAI,MAC7E,OAhM+BzH,EAAAA,EAAAA,GAGb4P,EAAAA,OAAd,WACI,OAAOA,GAiBJA,EAAAA,UAAAA,OAAP,WAEI,IAAMrH,EAAyDrI,KAAKwB,MAAnBmO,GAA/B,aAAY,aAAc,eAAc,IAApD,6CAEN,OACIxM,EAAAA,cAACnD,KAAK4P,eAAcxP,EAAAA,GACZuP,EAAS,CACblJ,aAAczG,KAAK+F,iBACnB9B,IAAKjE,KAAK6P,mBACVlH,SAAU3I,KAAK8P,oBAKpBJ,EAAAA,UAAAA,mBAAP,SAA0BnG,EAA2BwG,kBACzB,QAApB,EAAAxG,EAAU+C,kBAAUjE,IAAAA,OAAA,EAAAA,EAAEkE,aAAkC,QAA1B,EAAKvM,KAAKwB,MAAM8K,kBAAU9F,IAAAA,OAAA,EAAAA,EAAE+F,aAC1DyD,EAAAA,EAAAA,IAA2B,QAArB,EAACzG,EAAU+C,kBAAUnE,IAAAA,OAAA,EAAAA,EAAEoE,SAAU,MACvCvM,KAAKgO,gBAAiB3B,EAAAA,EAAAA,IAAWrM,KAAM,eAAqC,QAAvB,EAAEA,KAAKwB,MAAM8K,kBAAU5F,IAAAA,OAAA,EAAAA,EAAE6F,WAC9EyD,EAAAA,EAAAA,IAA4B,QAAtB,EAAChQ,KAAKwB,MAAM8K,kBAAUK,IAAAA,OAAA,EAAAA,EAAEJ,SAAUvM,KAAKwP,eAG7CxP,KAAKsF,MAAM6G,SAAW4D,EAAU5D,QAA4B,MAAlBnM,KAAKwM,WAC/CxM,KAAKwM,UAAU5C,4BAmFf8F,EAAAA,UAAAA,uBAAR,SAA+BjL,GAC3B,OAAOA,EAAM9D,OAAS,EAAIwC,EAAAA,cAAC8M,EAAAA,GAAM,CAACC,KAAK,QAAQC,SAAS,EAAMC,QAASpQ,KAAKuP,kBAAiB/L,GA9HnFkM,EAAAA,YAAiB/D,EAAAA,EAAkB,UA+LrD,EAhMA,CAA+B0E,EAAAA","sources":["../node_modules/@blueprintjs/select/node_modules/tslib/tslib.es6.js","../node_modules/@blueprintjs/select/src/common/classes.ts","../node_modules/@blueprintjs/core/src/common/abstractComponent2.ts","../node_modules/@blueprintjs/select/src/common/listItemsProps.ts","../node_modules/@blueprintjs/select/src/common/listItemsUtils.ts","../node_modules/@blueprintjs/select/src/components/query-list/queryList.tsx","../node_modules/@blueprintjs/select/src/common/itemListRenderer.ts","../node_modules/@blueprintjs/select/src/components/select/select.tsx"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Classes } from \"@blueprintjs/core\";\n\nconst NS = Classes.getClassNamespace();\n\nexport const MULTISELECT = `${NS}-multi-select`;\nexport const MULTISELECT_POPOVER = `${MULTISELECT}-popover`;\nexport const MULTISELECT_TAG_INPUT_INPUT = `${MULTISELECT}-tag-input-input`;\nexport const OMNIBAR = `${NS}-omnibar`;\nexport const OMNIBAR_OVERLAY = `${OMNIBAR}-overlay`;\nexport const SELECT = `${NS}-select`;\nexport const SELECT_POPOVER = `${SELECT}-popover`;\nexport const SELECT_MATCH_TARGET_WIDTH = `${SELECT}-match-target-width`;\n","/*\n * Copyright 2019 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { isNodeEnv } from \"./utils\";\n\n/**\n * An abstract component that Blueprint components can extend\n * in order to add some common functionality like runtime props validation.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport abstract class AbstractComponent2<P, S = {}, SS = {}> extends React.Component<P, S, SS> {\n    // unsafe lifecycle methods\n    public componentWillUpdate: never;\n\n    public componentWillReceiveProps: never;\n\n    public componentWillMount: never;\n\n    // this should be static, not an instance method\n    public getDerivedStateFromProps: never;\n\n    /** Component displayName should be `public static`. This property exists to prevent incorrect usage. */\n    protected displayName: never;\n\n    // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n    private timeoutIds: number[] = [];\n\n    private requestIds: number[] = [];\n\n    constructor(props: P, context?: any) {\n        super(props, context);\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(this.props);\n        }\n    }\n\n    public componentDidUpdate(_prevProps: P, _prevState: S, _snapshot?: SS) {\n        if (!isNodeEnv(\"production\")) {\n            this.validateProps(this.props);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.clearTimeouts();\n        this.cancelAnimationFrames();\n    }\n\n    /**\n     * Request an animation frame and remember its ID.\n     * All pending requests will be canceled when component unmounts.\n     *\n     * @returns a \"cancel\" function that will cancel the request when invoked.\n     */\n    public requestAnimationFrame(callback: () => void) {\n        const handle = window.requestAnimationFrame(callback);\n        this.requestIds.push(handle);\n        return () => window.cancelAnimationFrame(handle);\n    }\n\n    /**\n     * Set a timeout and remember its ID.\n     * All stored timeouts will be cleared when component unmounts.\n     *\n     * @returns a \"cancel\" function that will clear timeout when invoked.\n     */\n    public setTimeout(callback: () => void, timeout?: number) {\n        const handle = window.setTimeout(callback, timeout);\n        this.timeoutIds.push(handle);\n        return () => window.clearTimeout(handle);\n    }\n\n    /**\n     * Clear all known timeouts.\n     */\n    public clearTimeouts = () => {\n        if (this.timeoutIds.length > 0) {\n            for (const timeoutId of this.timeoutIds) {\n                window.clearTimeout(timeoutId);\n            }\n            this.timeoutIds = [];\n        }\n    };\n\n    /**\n     * Clear all known animation frame requests.\n     */\n    public cancelAnimationFrames = () => {\n        if (this.requestIds.length > 0) {\n            for (const requestId of this.requestIds) {\n                window.cancelAnimationFrame(requestId);\n            }\n            this.requestIds = [];\n        }\n    };\n\n    /**\n     * Ensures that the props specified for a component are valid.\n     * Implementations should check that props are valid and usually throw an Error if they are not.\n     * Implementations should not duplicate checks that the type system already guarantees.\n     *\n     * This method should be used instead of React's\n     * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\n     * Like propTypes, these runtime checks run only in development mode.\n     */\n    protected validateProps(_props: P) {\n        // implement in subclass\n    }\n}\n","/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Props, Utils } from \"@blueprintjs/core\";\n\nimport { ItemListRenderer } from \"./itemListRenderer\";\nimport { ItemRenderer } from \"./itemRenderer\";\nimport { ICreateNewItem } from \"./listItemsUtils\";\nimport { ItemListPredicate, ItemPredicate } from \"./predicate\";\n\n/**\n * Equality test comparator to determine if two {@link IListItemsProps} items are equivalent.\n *\n * @return `true` if the two items are equivalent.\n */\nexport type ItemsEqualComparator<T> = (itemA: T, itemB: T) => boolean;\n\n/**\n * Union of all possible types for {@link IListItemsProps#itemsEqual}.\n */\nexport type ItemsEqualProp<T> = ItemsEqualComparator<T> | keyof T;\n\n/** Reusable generic props for a component that operates on a filterable, selectable list of `items`. */\nexport interface IListItemsProps<T> extends Props {\n    /**\n     * The currently focused item for keyboard interactions, or `null` to\n     * indicate that no item is active. If omitted or `undefined`, this prop will be\n     * uncontrolled (managed by the component's state). Use `onActiveItemChange`\n     * to listen for updates.\n     */\n    activeItem?: T | ICreateNewItem | null;\n\n    /** Array of items in the list. */\n    items: T[];\n\n    /**\n     * Specifies how to test if two items are equal. By default, simple strict\n     * equality (`===`) is used to compare two items.\n     *\n     * If your items have a unique identifier field, simply provide the name of\n     * a property on the item that can be compared with strict equality to\n     * determine equivalence: `itemsEqual=\"id\"` will check `a.id === b.id`.\n     *\n     * If more complex comparison logic is required, provide an equality\n     * comparator function that returns `true` if the two items are equal. The\n     * arguments to this function will never be `null` or `undefined`, as those\n     * values are handled before calling the function.\n     */\n    itemsEqual?: ItemsEqualProp<T>;\n\n    /**\n     * Determine if the given item is disabled. Provide a callback function, or\n     * simply provide the name of a boolean property on the item that exposes\n     * its disabled state.\n     */\n    itemDisabled?: keyof T | ((item: T, index: number) => boolean);\n\n    /**\n     * Customize querying of entire `items` array. Return new list of items.\n     * This method can reorder, add, or remove items at will.\n     * (Supports filter algorithms that operate on the entire set, rather than individual items.)\n     *\n     * If `itemPredicate` is also defined, this prop takes priority and the other will be ignored.\n     */\n    itemListPredicate?: ItemListPredicate<T>;\n\n    /**\n     * Customize querying of individual items.\n     *\n     * __Filtering a list of items.__ This function is invoked to filter the\n     * list of items as a query is typed. Return `true` to keep the item, or\n     * `false` to hide. This method is invoked once for each item, so it should\n     * be performant. For more complex queries, use `itemListPredicate` to\n     * operate once on the entire array. For the purposes of filtering the list,\n     * this prop is ignored if `itemListPredicate` is also defined.\n     *\n     * __Matching a pasted value to an item.__ This function is also invoked to\n     * match a pasted value to an existing item if possible. In this case, the\n     * function will receive `exactMatch=true`, and the function should return\n     * true only if the item _exactly_ matches the query. For the purposes of\n     * matching pasted values, this prop will be invoked even if\n     * `itemListPredicate` is defined.\n     */\n    itemPredicate?: ItemPredicate<T>;\n\n    /**\n     * Custom renderer for an item in the dropdown list. Receives a boolean indicating whether\n     * this item is active (selected by keyboard arrows) and an `onClick` event handler that\n     * should be attached to the returned element.\n     */\n    itemRenderer: ItemRenderer<T>;\n\n    /**\n     * Custom renderer for the contents of the dropdown.\n     *\n     * The default implementation invokes `itemRenderer` for each item that passes the predicate\n     * and wraps them all in a `Menu` element. If the query is empty then `initialContent` is returned,\n     * and if there are no items that match the predicate then `noResults` is returned.\n     */\n    itemListRenderer?: ItemListRenderer<T>;\n\n    /**\n     * React content to render when query is empty.\n     * If omitted, all items will be rendered (or result of `itemListPredicate` with empty query).\n     * If explicit `null`, nothing will be rendered when query is empty.\n     *\n     * This prop is ignored if a custom `itemListRenderer` is supplied.\n     */\n    initialContent?: React.ReactNode | null;\n\n    /**\n     * React content to render when filtering items returns zero results.\n     * If omitted, nothing will be rendered in this case.\n     *\n     * This prop is ignored if a custom `itemListRenderer` is supplied.\n     */\n    noResults?: React.ReactNode;\n\n    /**\n     * Invoked when user interaction should change the active item: arrow keys\n     * move it up/down in the list, selecting an item makes it active, and\n     * changing the query may reset it to the first item in the list if it no\n     * longer matches the filter.\n     *\n     * If the \"Create Item\" option is displayed and currently active, then\n     * `isCreateNewItem` will be `true` and `activeItem` will be `null`. In this\n     * case, you should provide a valid `ICreateNewItem` object to the\n     * `activeItem` _prop_ in order for the \"Create Item\" option to appear as\n     * active.\n     *\n     * __Note:__ You can instantiate a `ICreateNewItem` object using the\n     * `getCreateNewItem()` utility exported from this package.\n     */\n    onActiveItemChange?: (activeItem: T | null, isCreateNewItem: boolean) => void;\n\n    /**\n     * Callback invoked when an item from the list is selected,\n     * typically by clicking or pressing `enter` key.\n     */\n    onItemSelect: (item: T, event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Callback invoked when multiple items are selected at once via pasting.\n     */\n    onItemsPaste?: (items: T[]) => void;\n\n    /**\n     * Callback invoked when the query string changes.\n     */\n    onQueryChange?: (query: string, event?: React.ChangeEvent<HTMLInputElement>) => void;\n\n    /**\n     * If provided, allows new items to be created using the current query\n     * string. This is invoked when user interaction causes a new item to be\n     * created, either by pressing the `Enter` key or by clicking on the \"Create\n     * Item\" option. It transforms a query string into an item type.\n     */\n    createNewItemFromQuery?: (query: string) => T;\n\n    /**\n     * Custom renderer to transform the current query string into a selectable\n     * \"Create Item\" option. If this function is provided, a \"Create Item\"\n     * option will be rendered at the end of the list of items. If this function\n     * is not provided, a \"Create Item\" option will not be displayed.\n     */\n    createNewItemRenderer?: (\n        query: string,\n        active: boolean,\n        handleClick: React.MouseEventHandler<HTMLElement>,\n    ) => JSX.Element | undefined;\n\n    /**\n     * Determines the position of the `createNewItem` within the list: first or\n     * last. Only relevant when `createNewItemRenderer` is defined.\n     *\n     * @default 'last'\n     */\n    createNewItemPosition?: \"first\" | \"last\";\n\n    /**\n     * Whether the active item should be reset to the first matching item _every\n     * time the query changes_ (via prop or by user input).\n     *\n     * @default true\n     */\n    resetOnQuery?: boolean;\n\n    /**\n     * Whether the active item should be reset to the first matching item _when\n     * an item is selected_. The query will also be reset to the empty string.\n     *\n     * @default false\n     */\n    resetOnSelect?: boolean;\n\n    /**\n     * When `activeItem` is controlled, whether the active item should _always_\n     * be scrolled into view when the prop changes. If `false`, only changes\n     * that result from built-in interactions (clicking, querying, or using\n     * arrow keys) will scroll the active item into view. Ignored if the\n     * `activeItem` prop is omitted (uncontrolled behavior).\n     *\n     * @default true\n     */\n    scrollToActiveItem?: boolean;\n\n    /**\n     * Query string passed to `itemListPredicate` or `itemPredicate` to filter items.\n     * This value is controlled: its state must be managed externally by attaching an `onChange`\n     * handler to the relevant element in your `renderer` implementation.\n     */\n    query?: string;\n}\n\n/**\n * Utility function for executing the {@link IListItemsProps#itemsEqual} prop to test\n * for equality between two items.\n *\n * @return `true` if the two items are equivalent according to `itemsEqualProp`.\n */\nexport function executeItemsEqual<T>(\n    itemsEqualProp: ItemsEqualProp<T> | undefined,\n    itemA: T | null | undefined,\n    itemB: T | null | undefined,\n): boolean {\n    // Use strict equality if:\n    // A) Default equality check is necessary because itemsEqualProp is undefined.\n    // OR\n    // B) Either item is null/undefined. Note that null represents \"no item\", while\n    //    undefined represents an uncontrolled prop. This strict equality check ensures\n    //    nothing will ever be considered equivalent to an uncontrolled prop.\n    if (itemsEqualProp === undefined || itemA == null || itemB == null) {\n        return itemA === itemB;\n    }\n\n    if (Utils.isFunction(itemsEqualProp)) {\n        // itemsEqualProp is an equality comparator function, so use it\n        return itemsEqualProp(itemA, itemB);\n    } else {\n        // itemsEqualProp is a property name, so strictly compare the values of the property.\n        return itemA[itemsEqualProp] === itemB[itemsEqualProp];\n    }\n}\n","/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-underscore-dangle */\n\n/**\n * The reserved type of the \"Create Item\" option in item lists. This is intended\n * not to conflict with any custom item type `T` that might be used in  item\n * list.\n */\nexport interface ICreateNewItem {\n    __blueprintCreateNewItemBrand: \"blueprint-create-new-item\";\n}\n\n/** Returns an instance of a \"Create Item\" object. */\nexport function getCreateNewItem(): ICreateNewItem {\n    return { __blueprintCreateNewItemBrand: \"blueprint-create-new-item\" };\n}\n\n/**\n * Type guard returning `true` if the provided item (e.g. the current\n * `activeItem`) is a \"Create Item\" option.\n */\nexport function isCreateNewItem<T>(item: T | ICreateNewItem | null | undefined): item is ICreateNewItem {\n    if (item == null) {\n        return false;\n    }\n\n    // see if the provided item exactly matches the `ICreateNewItem` object,\n    // with no superfluous keys.\n    const keys = Object.keys(item);\n    if (keys.length !== 1 || keys[0] !== \"__blueprintCreateNewItemBrand\") {\n        return false;\n    }\n    return (item as ICreateNewItem).__blueprintCreateNewItemBrand === \"blueprint-create-new-item\";\n}\n\n/**\n * Returns the type of the the current active item. This will be a no-op unless\n * the `activeItem` is `undefined` or a \"Create Item\" option, in which case\n * `null` will be returned instead.\n */\nexport function getActiveItem<T>(activeItem: T | ICreateNewItem | null | undefined): T | null {\n    return activeItem == null || isCreateNewItem(activeItem) ? null : activeItem;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { AbstractComponent2, DISPLAYNAME_PREFIX, Props, Keys, Menu, Utils } from \"@blueprintjs/core\";\n\nimport {\n    executeItemsEqual,\n    getActiveItem,\n    getCreateNewItem,\n    ICreateNewItem,\n    IItemListRendererProps,\n    IItemModifiers,\n    IListItemsProps,\n    isCreateNewItem,\n    renderFilteredItems,\n} from \"../../common\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type QueryListProps<T> = IQueryListProps<T>;\n/** @deprecated use QueryListProps */\nexport interface IQueryListProps<T> extends IListItemsProps<T> {\n    /**\n     * Initial active item, useful if the parent component is controlling its selectedItem but\n     * not activeItem.\n     */\n    initialActiveItem?: T;\n\n    /**\n     * Callback invoked when user presses a key, after processing `QueryList`'s own key events\n     * (up/down to navigate active item). This callback is passed to `renderer` and (along with\n     * `onKeyUp`) can be attached to arbitrary content elements to support keyboard selection.\n     */\n    onKeyDown?: React.KeyboardEventHandler<HTMLElement>;\n\n    /**\n     * Callback invoked when user releases a key, after processing `QueryList`'s own key events\n     * (enter to select active item). This callback is passed to `renderer` and (along with\n     * `onKeyDown`) can be attached to arbitrary content elements to support keyboard selection.\n     */\n    onKeyUp?: React.KeyboardEventHandler<HTMLElement>;\n\n    /**\n     * Customize rendering of the component.\n     * Receives an object with props that should be applied to elements as necessary.\n     */\n    renderer: (listProps: IQueryListRendererProps<T>) => JSX.Element;\n\n    /**\n     * Whether the list is disabled.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n}\n\n/**\n * An object describing how to render a `QueryList`.\n * A `QueryList` `renderer` receives this object as its sole argument.\n */\nexport interface IQueryListRendererProps<T> // Omit `createNewItem`, because it's used strictly for internal tracking.\n    extends Pick<IQueryListState<T>, \"activeItem\" | \"filteredItems\" | \"query\">,\n        Props {\n    /**\n     * Selection handler that should be invoked when a new item has been chosen,\n     * perhaps because the user clicked it.\n     */\n    handleItemSelect: (item: T, event?: React.SyntheticEvent<HTMLElement>) => void;\n\n    /**\n     * Handler that should be invoked when the user pastes one or more values.\n     *\n     * This callback will use `itemPredicate` with `exactMatch=true` to find a\n     * subset of `items` exactly matching the pasted `values` provided, then it\n     * will invoke `onItemsPaste` with those found items. Each pasted value that\n     * does not exactly match an item will be ignored.\n     *\n     * If creating items is enabled (by providing both `createNewItemFromQuery`\n     * and `createNewItemRenderer`), then pasted values that do not exactly\n     * match an existing item will emit a new item as created via\n     * `createNewItemFromQuery`.\n     *\n     * If `itemPredicate` returns multiple matching items for a particular query\n     * in `queries`, then only the first matching item will be emitted.\n     */\n    handlePaste: (queries: string[]) => void;\n\n    /**\n     * Keyboard handler for up/down arrow keys to shift the active item.\n     * Attach this handler to any element that should support this interaction.\n     */\n    handleKeyDown: React.KeyboardEventHandler<HTMLElement>;\n\n    /**\n     * Keyboard handler for enter key to select the active item.\n     * Attach this handler to any element that should support this interaction.\n     */\n    handleKeyUp: React.KeyboardEventHandler<HTMLElement>;\n\n    /**\n     * Change handler for query string. Attach this to an input element to allow\n     * `QueryList` to control the query.\n     */\n    handleQueryChange: React.ChangeEventHandler<HTMLInputElement>;\n\n    /** Rendered elements returned from `itemListRenderer` prop. */\n    itemList: React.ReactNode;\n}\n\nexport interface IQueryListState<T> {\n    /** The currently focused item (for keyboard interactions). */\n    activeItem: T | ICreateNewItem | null;\n\n    /**\n     * The item returned from `createNewItemFromQuery(this.state.query)`, cached\n     * to avoid continuous reinstantions within `isCreateItemRendered`, where\n     * this element will be used to hide the \"Create Item\" option if its value\n     * matches the current `query`.\n     */\n    createNewItem: T | undefined;\n\n    /** The original `items` array filtered by `itemListPredicate` or `itemPredicate`. */\n    filteredItems: T[];\n\n    /** The current query string. */\n    query: string;\n}\n\nexport class QueryList<T> extends AbstractComponent2<QueryListProps<T>, IQueryListState<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.QueryList`;\n\n    public static defaultProps = {\n        disabled: false,\n        resetOnQuery: true,\n    };\n\n    public static ofType<U>() {\n        return QueryList as new (props: QueryListProps<U>) => QueryList<U>;\n    }\n\n    private itemsParentRef?: HTMLElement | null;\n\n    private refHandlers = {\n        itemsParent: (ref: HTMLElement | null) => (this.itemsParentRef = ref),\n    };\n\n    /**\n     * Flag indicating that we should check whether selected item is in viewport\n     * after rendering, typically because of keyboard change. Set to `true` when\n     * manipulating state in a way that may cause active item to scroll away.\n     */\n    private shouldCheckActiveItemInViewport = false;\n\n    /**\n     * The item that we expect to be the next selected active item (based on click\n     * or key interactions). When scrollToActiveItem = false, used to detect if\n     * an unexpected external change to the active item has been made.\n     */\n    private expectedNextActiveItem: T | ICreateNewItem | null = null;\n\n    /**\n     * Flag which is set to true while in between an ENTER \"keydown\" event and its\n     * corresponding \"keyup\" event.\n     *\n     * When entering text via an IME (https://en.wikipedia.org/wiki/Input_method),\n     * the ENTER key is pressed to confirm the character(s) to be input from a list\n     * of options. The operating system intercepts the ENTER \"keydown\" event and\n     * prevents it from propagating to the application, but \"keyup\" is still\n     * fired, triggering a spurious event which this component does not expect.\n     *\n     * To work around this quirk, we keep track of \"real\" key presses by setting\n     * this flag in handleKeyDown.\n     */\n    private isEnterKeyPressed = false;\n\n    public constructor(props: QueryListProps<T>, context?: any) {\n        super(props, context);\n\n        const { query = \"\" } = props;\n        const createNewItem = props.createNewItemFromQuery?.(query);\n        const filteredItems = getFilteredItems(query, props);\n\n        this.state = {\n            activeItem:\n                props.activeItem !== undefined\n                    ? props.activeItem\n                    : props.initialActiveItem ?? getFirstEnabledItem(filteredItems, props.itemDisabled),\n            createNewItem,\n            filteredItems,\n            query,\n        };\n    }\n\n    public render() {\n        const { className, items, renderer, itemListRenderer = this.renderItemList } = this.props;\n        const { createNewItem, ...spreadableState } = this.state;\n        return renderer({\n            ...spreadableState,\n            className,\n            handleItemSelect: this.handleItemSelect,\n            handleKeyDown: this.handleKeyDown,\n            handleKeyUp: this.handleKeyUp,\n            handlePaste: this.handlePaste,\n            handleQueryChange: this.handleInputQueryChange,\n            itemList: itemListRenderer({\n                ...spreadableState,\n                items,\n                itemsParentRef: this.refHandlers.itemsParent,\n                renderCreateItem: this.renderCreateItemMenuItem,\n                renderItem: this.renderItem,\n            }),\n        });\n    }\n\n    public componentDidUpdate(prevProps: QueryListProps<T>) {\n        if (this.props.activeItem !== undefined && this.props.activeItem !== this.state.activeItem) {\n            this.shouldCheckActiveItemInViewport = true;\n            this.setState({ activeItem: this.props.activeItem });\n        }\n\n        if (this.props.query != null && this.props.query !== prevProps.query) {\n            // new query\n            this.setQuery(this.props.query, this.props.resetOnQuery, this.props);\n        } else if (\n            // same query (or uncontrolled query), but items in the list changed\n            !Utils.shallowCompareKeys(this.props, prevProps, {\n                include: [\"items\", \"itemListPredicate\", \"itemPredicate\"],\n            })\n        ) {\n            this.setQuery(this.state.query);\n        }\n\n        if (this.shouldCheckActiveItemInViewport) {\n            // update scroll position immediately before repaint so DOM is accurate\n            // (latest filteredItems) and to avoid flicker.\n            this.requestAnimationFrame(() => this.scrollActiveItemIntoView());\n            // reset the flag\n            this.shouldCheckActiveItemInViewport = false;\n        }\n    }\n\n    public scrollActiveItemIntoView() {\n        const scrollToActiveItem = this.props.scrollToActiveItem !== false;\n        const externalChangeToActiveItem = !executeItemsEqual(\n            this.props.itemsEqual,\n            getActiveItem(this.expectedNextActiveItem),\n            getActiveItem(this.props.activeItem),\n        );\n        this.expectedNextActiveItem = null;\n\n        if (!scrollToActiveItem && externalChangeToActiveItem) {\n            return;\n        }\n\n        const activeElement = this.getActiveElement();\n        if (this.itemsParentRef != null && activeElement != null) {\n            const { offsetTop: activeTop, offsetHeight: activeHeight } = activeElement;\n            const {\n                offsetTop: parentOffsetTop,\n                scrollTop: parentScrollTop,\n                clientHeight: parentHeight,\n            } = this.itemsParentRef;\n            // compute padding on parent element to ensure we always leave space\n            const { paddingTop, paddingBottom } = this.getItemsParentPadding();\n\n            // compute the two edges of the active item for comparison, including parent padding\n            const activeBottomEdge = activeTop + activeHeight + paddingBottom - parentOffsetTop;\n            const activeTopEdge = activeTop - paddingTop - parentOffsetTop;\n\n            if (activeBottomEdge >= parentScrollTop + parentHeight) {\n                // offscreen bottom: align bottom of item with bottom of viewport\n                this.itemsParentRef.scrollTop = activeBottomEdge + activeHeight - parentHeight;\n            } else if (activeTopEdge <= parentScrollTop) {\n                // offscreen top: align top of item with top of viewport\n                this.itemsParentRef.scrollTop = activeTopEdge - activeHeight;\n            }\n        }\n    }\n\n    public setQuery(query: string, resetActiveItem = this.props.resetOnQuery, props = this.props) {\n        const { createNewItemFromQuery } = props;\n\n        this.shouldCheckActiveItemInViewport = true;\n        const hasQueryChanged = query !== this.state.query;\n        if (hasQueryChanged) {\n            props.onQueryChange?.(query);\n        }\n\n        // Leading and trailing whitespace can be confusing to display, so we remove it when passing it\n        // to functions dealing with data, like createNewItemFromQuery. But we need the unaltered user-typed\n        // query to remain in state to be able to render controlled text inputs properly.\n        const trimmedQuery = query.trim();\n        const filteredItems = getFilteredItems(trimmedQuery, props);\n        const createNewItem =\n            createNewItemFromQuery != null && trimmedQuery !== \"\" ? createNewItemFromQuery(trimmedQuery) : undefined;\n        this.setState({ createNewItem, filteredItems, query });\n\n        // always reset active item if it's now filtered or disabled\n        const activeIndex = this.getActiveIndex(filteredItems);\n        const shouldUpdateActiveItem =\n            resetActiveItem ||\n            activeIndex < 0 ||\n            isItemDisabled(getActiveItem(this.state.activeItem), activeIndex, props.itemDisabled);\n\n        if (shouldUpdateActiveItem) {\n            // if the `createNewItem` is first, that should be the first active item.\n            if (this.isCreateItemRendered() && this.isCreateItemFirst()) {\n                this.setActiveItem(getCreateNewItem());\n            } else {\n                this.setActiveItem(getFirstEnabledItem(filteredItems, props.itemDisabled));\n            }\n        }\n    }\n\n    public setActiveItem(activeItem: T | ICreateNewItem | null) {\n        this.expectedNextActiveItem = activeItem;\n        if (this.props.activeItem === undefined) {\n            // indicate that the active item may need to be scrolled into view after update.\n            this.shouldCheckActiveItemInViewport = true;\n            this.setState({ activeItem });\n        }\n\n        if (isCreateNewItem(activeItem)) {\n            this.props.onActiveItemChange?.(null, true);\n        } else {\n            this.props.onActiveItemChange?.(activeItem, false);\n        }\n    }\n\n    /** default `itemListRenderer` implementation */\n    private renderItemList = (listProps: IItemListRendererProps<T>) => {\n        const { initialContent, noResults } = this.props;\n\n        // omit noResults if createNewItemFromQuery and createNewItemRenderer are both supplied, and query is not empty\n        const createItemView = listProps.renderCreateItem();\n        const maybeNoResults = createItemView != null ? null : noResults;\n        const menuContent = renderFilteredItems(listProps, maybeNoResults, initialContent);\n        if (menuContent == null && createItemView == null) {\n            return null;\n        }\n        const createFirst = this.isCreateItemFirst();\n        return (\n            <Menu ulRef={listProps.itemsParentRef}>\n                {createFirst && createItemView}\n                {menuContent}\n                {!createFirst && createItemView}\n            </Menu>\n        );\n    };\n\n    /** wrapper around `itemRenderer` to inject props */\n    private renderItem = (item: T, index: number) => {\n        if (this.props.disabled !== true) {\n            const { activeItem, query } = this.state;\n            const matchesPredicate = this.state.filteredItems.indexOf(item) >= 0;\n            const modifiers: IItemModifiers = {\n                active: executeItemsEqual(this.props.itemsEqual, getActiveItem(activeItem), item),\n                disabled: isItemDisabled(item, index, this.props.itemDisabled),\n                matchesPredicate,\n            };\n            return this.props.itemRenderer(item, {\n                handleClick: e => this.handleItemSelect(item, e),\n                index,\n                modifiers,\n                query,\n            });\n        }\n\n        return null;\n    };\n\n    private renderCreateItemMenuItem = () => {\n        if (this.isCreateItemRendered()) {\n            const { activeItem, query } = this.state;\n            const trimmedQuery = query.trim();\n            const handleClick: React.MouseEventHandler<HTMLElement> = evt => {\n                this.handleItemCreate(trimmedQuery, evt);\n            };\n            const isActive = isCreateNewItem(activeItem);\n            return this.props.createNewItemRenderer!(trimmedQuery, isActive, handleClick);\n        }\n\n        return null;\n    };\n\n    private getActiveElement() {\n        const { activeItem } = this.state;\n        if (this.itemsParentRef != null) {\n            if (isCreateNewItem(activeItem)) {\n                const index = this.isCreateItemFirst() ? 0 : this.state.filteredItems.length;\n                return this.itemsParentRef.children.item(index) as HTMLElement;\n            } else {\n                const activeIndex = this.getActiveIndex();\n                return this.itemsParentRef.children.item(activeIndex) as HTMLElement;\n            }\n        }\n        return undefined;\n    }\n\n    private getActiveIndex(items = this.state.filteredItems) {\n        const { activeItem } = this.state;\n        if (activeItem == null || isCreateNewItem(activeItem)) {\n            return -1;\n        }\n        // NOTE: this operation is O(n) so it should be avoided in render(). safe for events though.\n        for (let i = 0; i < items.length; ++i) {\n            if (executeItemsEqual(this.props.itemsEqual, items[i], activeItem)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private getItemsParentPadding() {\n        // assert ref exists because it was checked before calling\n        const { paddingTop, paddingBottom } = getComputedStyle(this.itemsParentRef!);\n        return {\n            paddingBottom: pxToNumber(paddingBottom),\n            paddingTop: pxToNumber(paddingTop),\n        };\n    }\n\n    private handleItemCreate = (query: string, evt?: React.SyntheticEvent<HTMLElement>) => {\n        // we keep a cached createNewItem in state, but might as well recompute\n        // the result just to be sure it's perfectly in sync with the query.\n        const item = this.props.createNewItemFromQuery?.(query);\n        if (item != null) {\n            this.props.onItemSelect?.(item, evt);\n            this.maybeResetQuery();\n        }\n    };\n\n    private handleItemSelect = (item: T, event?: React.SyntheticEvent<HTMLElement>) => {\n        this.setActiveItem(item);\n        this.props.onItemSelect?.(item, event);\n        this.maybeResetQuery();\n    };\n\n    private handlePaste = (queries: string[]) => {\n        const { createNewItemFromQuery, onItemsPaste } = this.props;\n\n        let nextActiveItem: T | undefined;\n        const nextQueries = [];\n\n        // Find an exising item that exactly matches each pasted value, or\n        // create a new item if possible. Ignore unmatched values if creating\n        // items is disabled.\n        const pastedItemsToEmit = [];\n\n        for (const query of queries) {\n            const equalItem = getMatchingItem(query, this.props);\n\n            if (equalItem !== undefined) {\n                nextActiveItem = equalItem;\n                pastedItemsToEmit.push(equalItem);\n            } else if (this.canCreateItems()) {\n                const newItem = createNewItemFromQuery?.(query);\n                if (newItem !== undefined) {\n                    pastedItemsToEmit.push(newItem);\n                }\n            } else {\n                nextQueries.push(query);\n            }\n        }\n\n        // UX nicety: combine all unmatched queries into a single\n        // comma-separated query in the input, so we don't lose any information.\n        // And don't reset the active item; we'll do that ourselves below.\n        this.setQuery(nextQueries.join(\", \"), false);\n\n        // UX nicety: update the active item if we matched with at least one\n        // existing item.\n        if (nextActiveItem !== undefined) {\n            this.setActiveItem(nextActiveItem);\n        }\n\n        onItemsPaste?.(pastedItemsToEmit);\n    };\n\n    private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode } = event;\n        if (keyCode === Keys.ARROW_UP || keyCode === Keys.ARROW_DOWN) {\n            event.preventDefault();\n            const nextActiveItem = this.getNextActiveItem(keyCode === Keys.ARROW_UP ? -1 : 1);\n            if (nextActiveItem != null) {\n                this.setActiveItem(nextActiveItem);\n            }\n        } else if (keyCode === Keys.ENTER) {\n            this.isEnterKeyPressed = true;\n        }\n\n        this.props.onKeyDown?.(event);\n    };\n\n    private handleKeyUp = (event: React.KeyboardEvent<HTMLElement>) => {\n        const { onKeyUp } = this.props;\n        const { activeItem } = this.state;\n\n        // eslint-disable-next-line deprecation/deprecation\n        if (event.keyCode === Keys.ENTER && this.isEnterKeyPressed) {\n            // We handle ENTER in keyup here to play nice with the Button component's keyboard\n            // clicking. Button is commonly used as the only child of Select. If we were to\n            // instead process ENTER on keydown, then Button would click itself on keyup and\n            // the Select popover would re-open.\n            event.preventDefault();\n            if (activeItem == null || isCreateNewItem(activeItem)) {\n                this.handleItemCreate(this.state.query, event);\n            } else {\n                this.handleItemSelect(activeItem, event);\n            }\n            this.isEnterKeyPressed = false;\n        }\n\n        onKeyUp?.(event);\n    };\n\n    private handleInputQueryChange = (event?: React.ChangeEvent<HTMLInputElement>) => {\n        const query = event == null ? \"\" : event.target.value;\n        this.setQuery(query);\n        this.props.onQueryChange?.(query, event);\n    };\n\n    /**\n     * Get the next enabled item, moving in the given direction from the start\n     * index. A `null` return value means no suitable item was found.\n     *\n     * @param direction amount to move in each iteration, typically +/-1\n     * @param startIndex item to start iteration\n     */\n    private getNextActiveItem(direction: number, startIndex = this.getActiveIndex()): T | ICreateNewItem | null {\n        if (this.isCreateItemRendered()) {\n            const reachedCreate =\n                (startIndex === 0 && direction === -1) ||\n                (startIndex === this.state.filteredItems.length - 1 && direction === 1);\n            if (reachedCreate) {\n                return getCreateNewItem();\n            }\n        }\n        return getFirstEnabledItem(this.state.filteredItems, this.props.itemDisabled, direction, startIndex);\n    }\n\n    private isCreateItemRendered(): boolean {\n        return (\n            this.canCreateItems() &&\n            this.state.query !== \"\" &&\n            // this check is unfortunately O(N) on the number of items, but\n            // alas, hiding the \"Create Item\" option when it exactly matches an\n            // existing item is much clearer.\n            !this.wouldCreatedItemMatchSomeExistingItem()\n        );\n    }\n\n    private isCreateItemFirst(): boolean {\n        return this.props.createNewItemPosition === \"first\";\n    }\n\n    private canCreateItems(): boolean {\n        return this.props.createNewItemFromQuery != null && this.props.createNewItemRenderer != null;\n    }\n\n    private wouldCreatedItemMatchSomeExistingItem() {\n        // search only the filtered items, not the full items list, because we\n        // only need to check items that match the current query.\n        return this.state.filteredItems.some(item =>\n            executeItemsEqual(this.props.itemsEqual, item, this.state.createNewItem),\n        );\n    }\n\n    private maybeResetQuery() {\n        if (this.props.resetOnSelect) {\n            this.setQuery(\"\", true);\n        }\n    }\n}\n\nfunction pxToNumber(value: string | null) {\n    return value == null ? 0 : parseInt(value.slice(0, -2), 10);\n}\n\nfunction getMatchingItem<T>(query: string, { items, itemPredicate }: QueryListProps<T>): T | undefined {\n    if (Utils.isFunction(itemPredicate)) {\n        // .find() doesn't exist in ES5. Alternative: use a for loop instead of\n        // .filter() so that we can return as soon as we find the first match.\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (itemPredicate(query, item, i, true)) {\n                return item;\n            }\n        }\n    }\n    return undefined;\n}\n\nfunction getFilteredItems<T>(query: string, { items, itemPredicate, itemListPredicate }: QueryListProps<T>) {\n    if (Utils.isFunction(itemListPredicate)) {\n        // note that implementations can reorder the items here\n        return itemListPredicate(query, items);\n    } else if (Utils.isFunction(itemPredicate)) {\n        return items.filter((item, index) => itemPredicate(query, item, index));\n    }\n    return items;\n}\n\n/** Wrap number around min/max values: if it exceeds one bound, return the other. */\nfunction wrapNumber(value: number, min: number, max: number) {\n    if (value < min) {\n        return max;\n    } else if (value > max) {\n        return min;\n    }\n    return value;\n}\n\nfunction isItemDisabled<T>(item: T | null, index: number, itemDisabled?: IListItemsProps<T>[\"itemDisabled\"]) {\n    if (itemDisabled == null || item == null) {\n        return false;\n    } else if (Utils.isFunction(itemDisabled)) {\n        return itemDisabled(item, index);\n    }\n    return !!item[itemDisabled];\n}\n\n/**\n * Get the next enabled item, moving in the given direction from the start\n * index. A `null` return value means no suitable item was found.\n *\n * @param items the list of items\n * @param itemDisabled callback to determine if a given item is disabled\n * @param direction amount to move in each iteration, typically +/-1\n * @param startIndex which index to begin moving from\n */\nexport function getFirstEnabledItem<T>(\n    items: T[],\n    itemDisabled?: keyof T | ((item: T, index: number) => boolean),\n    direction = 1,\n    startIndex = items.length - 1,\n): T | ICreateNewItem | null {\n    if (items.length === 0) {\n        return null;\n    }\n    // remember where we started to prevent an infinite loop\n    let index = startIndex;\n    const maxIndex = items.length - 1;\n    do {\n        // find first non-disabled item\n        index = wrapNumber(index + direction, 0, maxIndex);\n        if (!isItemDisabled(items[index], index, itemDisabled)) {\n            return items[index];\n        }\n    } while (index !== startIndex && startIndex !== -1);\n    return null;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IRef } from \"@blueprintjs/core\";\n\nimport { ICreateNewItem } from \"./listItemsUtils\";\n\n/**\n * An object describing how to render the list of items.\n * An `itemListRenderer` receives this object as its sole argument.\n */\nexport interface IItemListRendererProps<T> {\n    /**\n     * The currently focused item (for keyboard interactions), or `null` to\n     * indicate that no item is active.\n     */\n    activeItem: T | ICreateNewItem | null;\n\n    /**\n     * Array of items filtered by `itemListPredicate` or `itemPredicate`.\n     * See `items` for the full list of items.\n     *\n     * Use `renderFilteredItems()` utility function from this library to\n     * map each item in this array through `renderItem`, with support for\n     * optional `noResults` and `initialContent` states.\n     */\n    filteredItems: T[];\n\n    /**\n     * Array of all items in the list.\n     * See `filteredItems` for a filtered array based on `query` and predicate props.\n     */\n    items: T[];\n\n    /**\n     * The current query string.\n     */\n    query: string;\n\n    /**\n     * A ref handler that should be attached to the parent HTML element of the menu items.\n     * This is required for the active item to scroll into view automatically.\n     */\n    itemsParentRef: IRef<HTMLUListElement>;\n\n    /**\n     * Call this function to render an item.\n     * This retrieves the modifiers for the item and delegates actual rendering\n     * to the owner component's `itemRenderer` prop.\n     */\n    renderItem: (item: T, index: number) => JSX.Element | null;\n\n    /**\n     * Call this function to render the \"create new item\" view component.\n     *\n     * @returns null when creating a new item is not available, and undefined if the createNewItemRenderer returns undefined\n     */\n    renderCreateItem: () => JSX.Element | null | undefined;\n}\n\n/** Type alias for a function that renders the list of items. */\nexport type ItemListRenderer<T> = (itemListProps: IItemListRendererProps<T>) => JSX.Element | null;\n\n/**\n * `ItemListRenderer` helper method for rendering each item in `filteredItems`,\n * with optional support for `noResults` (when filtered items is empty)\n * and `initialContent` (when query is empty).\n */\nexport function renderFilteredItems(\n    props: IItemListRendererProps<any>,\n    noResults?: React.ReactNode,\n    initialContent?: React.ReactNode | null,\n): React.ReactNode {\n    if (props.query.length === 0 && initialContent !== undefined) {\n        return initialContent;\n    }\n    const items = props.filteredItems.map(props.renderItem).filter(item => item != null);\n    return items.length > 0 ? items : noResults;\n}\n","/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Button,\n    DISPLAYNAME_PREFIX,\n    InputGroupProps2,\n    InputGroup,\n    IPopoverProps,\n    IRef,\n    Keys,\n    Popover,\n    Position,\n    refHandler,\n    setRef,\n} from \"@blueprintjs/core\";\n\nimport { Classes, IListItemsProps } from \"../../common\";\nimport { IQueryListRendererProps, QueryList } from \"../query-list/queryList\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type SelectProps<T> = ISelectProps<T>;\n/** @deprecated use SelectProps */\nexport interface ISelectProps<T> extends IListItemsProps<T> {\n    /**\n     * Whether the component should take up the full width of its container.\n     * This overrides `popoverProps.fill`. You also have to ensure that the child\n     * component has `fill` set to `true` or is styled appropriately.\n     */\n    fill?: boolean;\n\n    /**\n     * Whether the dropdown list can be filtered.\n     * Disabling this option will remove the `InputGroup` and ignore `inputProps`.\n     *\n     * @default true\n     */\n    filterable?: boolean;\n\n    /**\n     * Whether the component is non-interactive.\n     * If true, the list's item renderer will not be called.\n     * Note that you'll also need to disable the component's children, if appropriate.\n     *\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Props to spread to the query `InputGroup`. Use `query` and\n     * `onQueryChange` instead of `inputProps.value` and `inputProps.onChange`\n     * to control this input.\n     */\n    inputProps?: InputGroupProps2;\n\n    /**\n     * Whether the select popover should be styled so that it matches the width of the target.\n     * This is done using a popper.js modifier passed through `popoverProps`.\n     *\n     * Note that setting `matchTargetWidth={true}` will also set `popoverProps.usePortal={false}` and `popoverProps.wrapperTagName=\"div\"`.\n     *\n     * @default false\n     */\n    matchTargetWidth?: boolean;\n\n    /** Props to spread to `Popover`. Note that `content` cannot be changed. */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    popoverProps?: Partial<IPopoverProps> & object;\n\n    /**\n     * Whether the active item should be reset to the first matching item _when\n     * the popover closes_. The query will also be reset to the empty string.\n     *\n     * @default false\n     */\n    resetOnClose?: boolean;\n}\n\nexport interface ISelectState {\n    isOpen: boolean;\n}\n\nexport class Select<T> extends AbstractPureComponent2<SelectProps<T>, ISelectState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Select`;\n\n    public static ofType<U>() {\n        return Select as new (props: SelectProps<U>) => Select<U>;\n    }\n\n    public state: ISelectState = { isOpen: false };\n\n    private TypedQueryList = QueryList.ofType<T>();\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private queryList: QueryList<T> | null = null;\n\n    private previousFocusedElement: HTMLElement | undefined;\n\n    private handleInputRef: IRef<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputProps?.inputRef);\n\n    private handleQueryListRef = (ref: QueryList<T> | null) => (this.queryList = ref);\n\n    public render() {\n        // omit props specific to this component, spread the rest.\n        const { filterable, inputProps, popoverProps, ...restProps } = this.props;\n\n        return (\n            <this.TypedQueryList\n                {...restProps}\n                onItemSelect={this.handleItemSelect}\n                ref={this.handleQueryListRef}\n                renderer={this.renderQueryList}\n            />\n        );\n    }\n\n    public componentDidUpdate(prevProps: SelectProps<T>, prevState: ISelectState) {\n        if (prevProps.inputProps?.inputRef !== this.props.inputProps?.inputRef) {\n            setRef(prevProps.inputProps?.inputRef, null);\n            this.handleInputRef = refHandler(this, \"inputElement\", this.props.inputProps?.inputRef);\n            setRef(this.props.inputProps?.inputRef, this.inputElement);\n        }\n\n        if (this.state.isOpen && !prevState.isOpen && this.queryList != null) {\n            this.queryList.scrollActiveItemIntoView();\n        }\n    }\n\n    private renderQueryList = (listProps: IQueryListRendererProps<T>) => {\n        // not using defaultProps cuz they're hard to type with generics (can't use <T> on static members)\n        const {\n            fill,\n            filterable = true,\n            disabled = false,\n            inputProps = {},\n            popoverProps = {},\n            matchTargetWidth,\n        } = this.props;\n\n        if (fill) {\n            popoverProps.fill = true;\n        }\n\n        if (matchTargetWidth) {\n            if (popoverProps.modifiers == null) {\n                popoverProps.modifiers = {};\n            }\n\n            popoverProps.modifiers.minWidth = {\n                enabled: true,\n                fn: data => {\n                    data.styles.width = `${data.offsets.reference.width}px`;\n                    return data;\n                },\n                order: 800,\n            };\n\n            popoverProps.usePortal = false;\n            popoverProps.wrapperTagName = \"div\";\n        }\n\n        const input = (\n            <InputGroup\n                leftIcon=\"search\"\n                placeholder=\"Filter...\"\n                rightElement={this.maybeRenderClearButton(listProps.query)}\n                {...inputProps}\n                inputRef={this.handleInputRef}\n                onChange={listProps.handleQueryChange}\n                value={listProps.query}\n            />\n        );\n\n        const { handleKeyDown, handleKeyUp } = listProps;\n        return (\n            /* eslint-disable-next-line deprecation/deprecation */\n            <Popover\n                autoFocus={false}\n                enforceFocus={false}\n                isOpen={this.state.isOpen}\n                disabled={disabled}\n                position={Position.BOTTOM_LEFT}\n                {...popoverProps}\n                className={classNames(listProps.className, popoverProps.className)}\n                onInteraction={this.handlePopoverInteraction}\n                popoverClassName={classNames(Classes.SELECT_POPOVER, popoverProps.popoverClassName, {\n                    [Classes.SELECT_MATCH_TARGET_WIDTH]: matchTargetWidth,\n                })}\n                onOpening={this.handlePopoverOpening}\n                onOpened={this.handlePopoverOpened}\n                onClosing={this.handlePopoverClosing}\n            >\n                <div\n                    onKeyDown={this.state.isOpen ? handleKeyDown : this.handleTargetKeyDown}\n                    onKeyUp={this.state.isOpen ? handleKeyUp : undefined}\n                >\n                    {this.props.children}\n                </div>\n                <div onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n                    {filterable ? input : undefined}\n                    {listProps.itemList}\n                </div>\n                {/* eslint-disable-next-line deprecation/deprecation */}\n            </Popover>\n        );\n    };\n\n    private maybeRenderClearButton(query: string) {\n        return query.length > 0 ? <Button icon=\"cross\" minimal={true} onClick={this.resetQuery} /> : undefined;\n    }\n\n    private handleTargetKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n        // open popover when arrow key pressed on target while closed\n        // HACKHACK: https://github.com/palantir/blueprint/issues/4165\n        // eslint-disable-next-line deprecation/deprecation\n        if (event.which === Keys.ARROW_UP || event.which === Keys.ARROW_DOWN) {\n            event.preventDefault();\n            this.setState({ isOpen: true });\n        }\n    };\n\n    private handleItemSelect = (item: T, event?: React.SyntheticEvent<HTMLElement>) => {\n        this.setState({ isOpen: false });\n        this.props.onItemSelect?.(item, event);\n    };\n\n    private handlePopoverInteraction = (isOpen: boolean, event?: React.SyntheticEvent<HTMLElement>) => {\n        this.setState({ isOpen });\n        this.props.popoverProps?.onInteraction?.(isOpen, event);\n    };\n\n    private handlePopoverOpening = (node: HTMLElement) => {\n        // save currently focused element before popover steals focus, so we can restore it when closing.\n        this.previousFocusedElement = document.activeElement as HTMLElement;\n\n        if (this.props.resetOnClose) {\n            this.resetQuery();\n        }\n\n        this.props.popoverProps?.onOpening?.(node);\n    };\n\n    private handlePopoverOpened = (node: HTMLElement) => {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        if (this.queryList != null) {\n            this.queryList.scrollActiveItemIntoView();\n        }\n\n        this.requestAnimationFrame(() => {\n            const { inputProps = {} } = this.props;\n            // autofocus is enabled by default\n            if (inputProps.autoFocus !== false) {\n                this.inputElement?.focus();\n            }\n        });\n\n        this.props.popoverProps?.onOpened?.(node);\n    };\n\n    private handlePopoverClosing = (node: HTMLElement) => {\n        // restore focus to saved element.\n        // timeout allows popover to begin closing and remove focus handlers beforehand.\n        this.requestAnimationFrame(() => {\n            if (this.previousFocusedElement !== undefined) {\n                this.previousFocusedElement.focus();\n                this.previousFocusedElement = undefined;\n            }\n        });\n\n        this.props.popoverProps?.onClosing?.(node);\n    };\n\n    private resetQuery = () => this.queryList && this.queryList.setQuery(\"\", true);\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","NS","Classes","SELECT","SELECT_POPOVER","SELECT_MATCH_TARGET_WIDTH","props","context","_super","_this","timeoutIds","_i","timeoutId","window","clearTimeout","requestIds","requestId","cancelAnimationFrame","isNodeEnv","validateProps","AbstractComponent2","_prevProps","_prevState","_snapshot","clearTimeouts","cancelAnimationFrames","callback","handle","requestAnimationFrame","push","timeout","setTimeout","_props","React","executeItemsEqual","itemsEqualProp","itemA","itemB","undefined","Utils","isCreateNewItem","item","keys","__blueprintCreateNewItemBrand","getActiveItem","activeItem","itemsParent","ref","itemsParentRef","listProps","initialContent","noResults","createItemView","renderCreateItem","menuContent","query","items","filteredItems","map","renderItem","filter","renderFilteredItems","createFirst","isCreateItemFirst","Menu","ulRef","index","disabled","state","matchesPredicate","modifiers","active","itemsEqual","isItemDisabled","itemDisabled","itemRenderer","handleClick","handleItemSelect","isCreateItemRendered","trimmedQuery_1","trim","isActive","createNewItemRenderer","evt","handleItemCreate","createNewItemFromQuery","_b","onItemSelect","_d","maybeResetQuery","event","setActiveItem","queries","nextActiveItem","onItemsPaste","nextQueries","pastedItemsToEmit","equalItem","getMatchingItem","canCreateItems","newItem","setQuery","join","keyCode","Keys","preventDefault","getNextActiveItem","isEnterKeyPressed","onKeyDown","onKeyUp","target","value","onQueryChange","_c","createNewItem","_a","getFilteredItems","initialActiveItem","getFirstEnabledItem","QueryList","className","renderer","itemListRenderer","renderItemList","spreadableState","handleKeyDown","handleKeyUp","handlePaste","handleQueryChange","handleInputQueryChange","itemList","refHandlers","renderCreateItemMenuItem","prevProps","shouldCheckActiveItemInViewport","setState","resetOnQuery","include","scrollActiveItemIntoView","scrollToActiveItem","externalChangeToActiveItem","expectedNextActiveItem","activeElement","getActiveElement","activeTop","activeHeight","parentOffsetTop","parentScrollTop","parentHeight","getItemsParentPadding","paddingTop","activeBottomEdge","activeTopEdge","scrollTop","resetActiveItem","trimmedQuery","activeIndex","getActiveIndex","onActiveItemChange","children","getComputedStyle","paddingBottom","pxToNumber","direction","startIndex","wouldCreatedItemMatchSomeExistingItem","createNewItemPosition","some","resetOnSelect","DISPLAYNAME_PREFIX","parseInt","slice","itemPredicate","itemListPredicate","min","max","maxIndex","isOpen","ofType","refHandler","inputProps","inputRef","queryList","fill","filterable","_e","_f","popoverProps","matchTargetWidth","minWidth","enabled","fn","data","styles","width","offsets","reference","order","usePortal","wrapperTagName","input","InputGroup","leftIcon","placeholder","rightElement","maybeRenderClearButton","handleInputRef","onChange","Popover","autoFocus","enforceFocus","position","Position","classNames","onInteraction","handlePopoverInteraction","popoverClassName","onOpening","handlePopoverOpening","onOpened","handlePopoverOpened","onClosing","handlePopoverClosing","handleTargetKeyDown","which","node","previousFocusedElement","document","resetOnClose","resetQuery","inputElement","focus","Select","restProps","TypedQueryList","handleQueryListRef","renderQueryList","prevState","setRef","Button","icon","minimal","onClick","AbstractPureComponent2"],"sourceRoot":""}