import { IHttpStatus } from ".";
import Base from "./base";
declare class HttpStatus extends Base<IHttpStatus> {
    constructor();
    Continue: IHttpStatus;
    SwitchingProtocols: IHttpStatus;
    Processing: IHttpStatus;
    EarlyHints: IHttpStatus;
    OK: IHttpStatus;
    Created: IHttpStatus;
    Accepted: IHttpStatus;
    NonAuthoritativeInformation: IHttpStatus;
    NoContent: IHttpStatus;
    ResetContent: IHttpStatus;
    PartialContent: IHttpStatus;
    MultiStatus: IHttpStatus;
    AlreadyReported: IHttpStatus;
    IMUsed: IHttpStatus;
    MultipleChoices: IHttpStatus;
    MovedPermanently: IHttpStatus;
    Found: IHttpStatus;
    SeeOther: IHttpStatus;
    NotModified: IHttpStatus;
    UseProxy: IHttpStatus;
    SwitchProxy: IHttpStatus;
    TemporaryRedirect: IHttpStatus;
    PermanentRedirect: IHttpStatus;
    BadRequest: IHttpStatus;
    Unauthorized: IHttpStatus;
    PaymentRequired: IHttpStatus;
    Forbidden: IHttpStatus;
    NotFound: IHttpStatus;
    MethodNotAllowed: IHttpStatus;
    NotAcceptable: IHttpStatus;
    ProxyAuthenticationRequired: IHttpStatus;
    RequestTimeout: IHttpStatus;
    Conflict: IHttpStatus;
    Gone: IHttpStatus;
    LengthRequired: IHttpStatus;
    PreconditionFailed: IHttpStatus;
    PayloadTooLarge: IHttpStatus;
    URITooLong: IHttpStatus;
    UnsupportedMediaType: IHttpStatus;
    RangeNotSatisfiable: IHttpStatus;
    ExpectationFailed: IHttpStatus;
    ImATeapot: IHttpStatus;
    MisdirectedRequest: IHttpStatus;
    UnprocessableEntity: IHttpStatus;
    Locked: IHttpStatus;
    FailedDependency: IHttpStatus;
    TooEarly: IHttpStatus;
    UpgradeRequired: IHttpStatus;
    PreconditionRequired: IHttpStatus;
    TooManyRequests: IHttpStatus;
    RequestHeaderFieldsTooLarge: IHttpStatus;
    UnavailableForLegalReasons: IHttpStatus;
    InternalServerError: IHttpStatus;
    NotImplemented: IHttpStatus;
    BadGateway: IHttpStatus;
    ServiceUnavailable: IHttpStatus;
    GatewayTimeout: IHttpStatus;
    HTTPVersionNotSupported: IHttpStatus;
    VariantAlsoNegotiates: IHttpStatus;
    InsufficientStorage: IHttpStatus;
    LoopDetected: IHttpStatus;
    NostatusTextended: IHttpStatus;
    NetworkAuthenticationRequired: IHttpStatus;
}
declare const httpStatus: HttpStatus;
export default httpStatus;
