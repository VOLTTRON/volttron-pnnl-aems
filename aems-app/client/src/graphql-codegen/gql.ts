/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}": typeof types.BannerFieldsFragmentDoc,
    "fragment ChangeFields on Change {\n  id\n  table\n  key\n  mutation\n  data\n  createdAt\n  updatedAt\n  user {\n    name\n    email\n  }\n}\n\nquery ReadChange($where: ChangeUniqueFilter!) {\n  readChange(where: $where) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nquery ReadChanges($where: ChangeFilter, $paging: PagingInput, $orderBy: [ChangeOrderBy!], $distinct: [ChangeFields!]) {\n  readChanges(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n  countChanges(where: $where)\n}\n\nmutation CreateChange($create: ChangeCreateInput!) {\n  createChange(create: $create) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteChange($where: ChangeUniqueFilter!) {\n  deleteChange(where: $where) {\n    id\n  }\n}": typeof types.ChangeFieldsFragmentDoc,
    "query ReadConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nquery ReadConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nmutation CreateConfiguration($create: ConfigurationCreateInput!) {\n  createConfiguration(create: $create) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation UpdateConfiguration($where: ConfigurationUniqueFilter!, $update: ConfigurationUpdateInput!) {\n  updateConfiguration(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation DeleteConfiguration($where: ConfigurationUniqueFilter!) {\n  deleteConfiguration(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nsubscription SubscribeConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}": typeof types.ReadConfigurationDocument,
    "query ReadControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nquery ReadControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nmutation CreateControl($create: ControlCreateInput!) {\n  createControl(create: $create) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateControl($where: ControlUniqueFilter!, $update: ControlUpdateInput!) {\n  updateControl(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteControl($where: ControlUniqueFilter!) {\n  deleteControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}": typeof types.ReadControlDocument,
    "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}": typeof types.CurrentFragmentFragmentDoc,
    "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}": typeof types.ReadFeedbackDocument,
    "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}": typeof types.ReadFileDocument,
    "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}": typeof types.GeographyFieldsFragmentDoc,
    "query ReadHoliday($where: HolidayUniqueFilter!) {\n  readHoliday(where: $where) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadHolidays($where: HolidayFilter, $paging: PagingInput, $orderBy: [HolidayOrderBy!], $distinct: [HolidayFields!]) {\n  readHolidays(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countHolidays(where: $where)\n}\n\nmutation CreateHoliday($create: HolidayCreateInput!) {\n  createHoliday(create: $create) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateHoliday($where: HolidayUniqueFilter!, $update: HolidayUpdateInput!) {\n  updateHoliday(where: $where, update: $update) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteHoliday($where: HolidayUniqueFilter!) {\n  deleteHoliday(where: $where) {\n    id\n  }\n}": typeof types.ReadHolidayDocument,
    "query ReadLocation($where: LocationUniqueFilter!) {\n  readLocation(where: $where) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLocations($where: LocationFilter, $paging: PagingInput, $orderBy: [LocationOrderBy!], $distinct: [LocationFields!]) {\n  readLocations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n  countLocations(where: $where)\n}\n\nmutation CreateLocation($create: LocationCreateInput!) {\n  createLocation(create: $create) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateLocation($where: LocationUniqueFilter!, $update: LocationUpdateInput!) {\n  updateLocation(where: $where, update: $update) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLocation($where: LocationUniqueFilter!) {\n  deleteLocation(where: $where) {\n    id\n  }\n}": typeof types.ReadLocationDocument,
    "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}": typeof types.LogFieldsFragmentDoc,
    "query ReadOccupancies($distinct: [OccupancyFields!], $orderBy: [OccupancyOrderBy!], $paging: PagingInput, $where: OccupancyFilter) {\n  readOccupancies(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    configurationId\n    scheduleId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nquery ReadOccupancy($where: OccupancyUniqueFilter!) {\n  readOccupancy(where: $where) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configurationId\n    scheduleId\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateOccupancy($create: OccupancyCreateInput!) {\n  createOccupancy(create: $create) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateOccupancy($where: OccupancyUniqueFilter!, $update: OccupancyUpdateInput!) {\n  updateOccupancy(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteOccupancy($where: OccupancyUniqueFilter!) {\n  deleteOccupancy(where: $where) {\n    id\n    label\n  }\n}": typeof types.ReadOccupanciesDocument,
    "query ReadSchedules($distinct: [ScheduleFields!], $orderBy: [ScheduleOrderBy!], $paging: PagingInput, $where: ScheduleFilter) {\n  readSchedules(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nquery ReadSchedule($where: ScheduleUniqueFilter!) {\n  readSchedule(where: $where) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateSchedule($create: ScheduleCreateInput!) {\n  createSchedule(create: $create) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateSchedule($where: ScheduleUniqueFilter!, $update: ScheduleUpdateInput!) {\n  updateSchedule(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteSchedule($where: ScheduleUniqueFilter!) {\n  deleteSchedule(where: $where) {\n    id\n    label\n  }\n}": typeof types.ReadSchedulesDocument,
    "query ReadSetpoint($where: SetpointUniqueFilter!) {\n  readSetpoint(where: $where) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadSetpoints($where: SetpointFilter, $paging: PagingInput, $orderBy: [SetpointOrderBy!], $distinct: [SetpointFields!]) {\n  readSetpoints(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countSetpoints(where: $where)\n}\n\nmutation CreateSetpoint($create: SetpointCreateInput!) {\n  createSetpoint(create: $create) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateSetpoint($where: SetpointUniqueFilter!, $update: SetpointUpdateInput!) {\n  updateSetpoint(where: $where, update: $update) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteSetpoint($where: SetpointUniqueFilter!) {\n  deleteSetpoint(where: $where) {\n    id\n  }\n}": typeof types.ReadSetpointDocument,
    "query ReadUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nquery ReadUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nmutation CreateUnit($create: UnitCreateInput!) {\n  createUnit(create: $create) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUnit($where: UnitUniqueFilter!, $update: UnitUpdateInput!) {\n  updateUnit(where: $where, update: $update) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUnit($where: UnitUniqueFilter!) {\n  deleteUnit(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nsubscription SubscribeUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}": typeof types.ReadUnitDocument,
    "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}": typeof types.UserFieldsFragmentDoc,
};
const documents: Documents = {
    "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}": types.BannerFieldsFragmentDoc,
    "fragment ChangeFields on Change {\n  id\n  table\n  key\n  mutation\n  data\n  createdAt\n  updatedAt\n  user {\n    name\n    email\n  }\n}\n\nquery ReadChange($where: ChangeUniqueFilter!) {\n  readChange(where: $where) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nquery ReadChanges($where: ChangeFilter, $paging: PagingInput, $orderBy: [ChangeOrderBy!], $distinct: [ChangeFields!]) {\n  readChanges(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n  countChanges(where: $where)\n}\n\nmutation CreateChange($create: ChangeCreateInput!) {\n  createChange(create: $create) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteChange($where: ChangeUniqueFilter!) {\n  deleteChange(where: $where) {\n    id\n  }\n}": types.ChangeFieldsFragmentDoc,
    "query ReadConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nquery ReadConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nmutation CreateConfiguration($create: ConfigurationCreateInput!) {\n  createConfiguration(create: $create) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation UpdateConfiguration($where: ConfigurationUniqueFilter!, $update: ConfigurationUpdateInput!) {\n  updateConfiguration(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation DeleteConfiguration($where: ConfigurationUniqueFilter!) {\n  deleteConfiguration(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nsubscription SubscribeConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}": types.ReadConfigurationDocument,
    "query ReadControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nquery ReadControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nmutation CreateControl($create: ControlCreateInput!) {\n  createControl(create: $create) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateControl($where: ControlUniqueFilter!, $update: ControlUpdateInput!) {\n  updateControl(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteControl($where: ControlUniqueFilter!) {\n  deleteControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}": types.ReadControlDocument,
    "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}": types.CurrentFragmentFragmentDoc,
    "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}": types.ReadFeedbackDocument,
    "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}": types.ReadFileDocument,
    "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}": types.GeographyFieldsFragmentDoc,
    "query ReadHoliday($where: HolidayUniqueFilter!) {\n  readHoliday(where: $where) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadHolidays($where: HolidayFilter, $paging: PagingInput, $orderBy: [HolidayOrderBy!], $distinct: [HolidayFields!]) {\n  readHolidays(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countHolidays(where: $where)\n}\n\nmutation CreateHoliday($create: HolidayCreateInput!) {\n  createHoliday(create: $create) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateHoliday($where: HolidayUniqueFilter!, $update: HolidayUpdateInput!) {\n  updateHoliday(where: $where, update: $update) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteHoliday($where: HolidayUniqueFilter!) {\n  deleteHoliday(where: $where) {\n    id\n  }\n}": types.ReadHolidayDocument,
    "query ReadLocation($where: LocationUniqueFilter!) {\n  readLocation(where: $where) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLocations($where: LocationFilter, $paging: PagingInput, $orderBy: [LocationOrderBy!], $distinct: [LocationFields!]) {\n  readLocations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n  countLocations(where: $where)\n}\n\nmutation CreateLocation($create: LocationCreateInput!) {\n  createLocation(create: $create) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateLocation($where: LocationUniqueFilter!, $update: LocationUpdateInput!) {\n  updateLocation(where: $where, update: $update) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLocation($where: LocationUniqueFilter!) {\n  deleteLocation(where: $where) {\n    id\n  }\n}": types.ReadLocationDocument,
    "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}": types.LogFieldsFragmentDoc,
    "query ReadOccupancies($distinct: [OccupancyFields!], $orderBy: [OccupancyOrderBy!], $paging: PagingInput, $where: OccupancyFilter) {\n  readOccupancies(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    configurationId\n    scheduleId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nquery ReadOccupancy($where: OccupancyUniqueFilter!) {\n  readOccupancy(where: $where) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configurationId\n    scheduleId\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateOccupancy($create: OccupancyCreateInput!) {\n  createOccupancy(create: $create) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateOccupancy($where: OccupancyUniqueFilter!, $update: OccupancyUpdateInput!) {\n  updateOccupancy(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteOccupancy($where: OccupancyUniqueFilter!) {\n  deleteOccupancy(where: $where) {\n    id\n    label\n  }\n}": types.ReadOccupanciesDocument,
    "query ReadSchedules($distinct: [ScheduleFields!], $orderBy: [ScheduleOrderBy!], $paging: PagingInput, $where: ScheduleFilter) {\n  readSchedules(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nquery ReadSchedule($where: ScheduleUniqueFilter!) {\n  readSchedule(where: $where) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateSchedule($create: ScheduleCreateInput!) {\n  createSchedule(create: $create) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateSchedule($where: ScheduleUniqueFilter!, $update: ScheduleUpdateInput!) {\n  updateSchedule(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteSchedule($where: ScheduleUniqueFilter!) {\n  deleteSchedule(where: $where) {\n    id\n    label\n  }\n}": types.ReadSchedulesDocument,
    "query ReadSetpoint($where: SetpointUniqueFilter!) {\n  readSetpoint(where: $where) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadSetpoints($where: SetpointFilter, $paging: PagingInput, $orderBy: [SetpointOrderBy!], $distinct: [SetpointFields!]) {\n  readSetpoints(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countSetpoints(where: $where)\n}\n\nmutation CreateSetpoint($create: SetpointCreateInput!) {\n  createSetpoint(create: $create) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateSetpoint($where: SetpointUniqueFilter!, $update: SetpointUpdateInput!) {\n  updateSetpoint(where: $where, update: $update) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteSetpoint($where: SetpointUniqueFilter!) {\n  deleteSetpoint(where: $where) {\n    id\n  }\n}": types.ReadSetpointDocument,
    "query ReadUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nquery ReadUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nmutation CreateUnit($create: UnitCreateInput!) {\n  createUnit(create: $create) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUnit($where: UnitUniqueFilter!, $update: UnitUpdateInput!) {\n  updateUnit(where: $where, update: $update) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUnit($where: UnitUniqueFilter!) {\n  deleteUnit(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nsubscription SubscribeUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}": types.ReadUnitDocument,
    "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}": types.UserFieldsFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["fragment BannerFields on Banner {\n  id\n  message\n  expiration\n  createdAt\n  updatedAt\n}\n\nquery ReadBanner($where: BannerUniqueFilter!) {\n  readBanner(where: $where) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateBanner($create: BannerCreateInput!) {\n  createBanner(create: $create) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateBanner($where: BannerUniqueFilter!, $update: BannerUpdateInput!) {\n  updateBanner(where: $where, update: $update) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteBanner($where: BannerUniqueFilter!) {\n  deleteBanner(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeBanners($where: BannerFilter, $paging: PagingInput, $orderBy: [BannerOrderBy!], $distinct: [BannerFields!]) {\n  readBanners(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    message\n    expiration\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ChangeFields on Change {\n  id\n  table\n  key\n  mutation\n  data\n  createdAt\n  updatedAt\n  user {\n    name\n    email\n  }\n}\n\nquery ReadChange($where: ChangeUniqueFilter!) {\n  readChange(where: $where) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nquery ReadChanges($where: ChangeFilter, $paging: PagingInput, $orderBy: [ChangeOrderBy!], $distinct: [ChangeFields!]) {\n  readChanges(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n  countChanges(where: $where)\n}\n\nmutation CreateChange($create: ChangeCreateInput!) {\n  createChange(create: $create) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteChange($where: ChangeUniqueFilter!) {\n  deleteChange(where: $where) {\n    id\n  }\n}"): (typeof documents)["fragment ChangeFields on Change {\n  id\n  table\n  key\n  mutation\n  data\n  createdAt\n  updatedAt\n  user {\n    name\n    email\n  }\n}\n\nquery ReadChange($where: ChangeUniqueFilter!) {\n  readChange(where: $where) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nquery ReadChanges($where: ChangeFilter, $paging: PagingInput, $orderBy: [ChangeOrderBy!], $distinct: [ChangeFields!]) {\n  readChanges(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n  countChanges(where: $where)\n}\n\nmutation CreateChange($create: ChangeCreateInput!) {\n  createChange(create: $create) {\n    id\n    table\n    key\n    mutation\n    data\n    createdAt\n    updatedAt\n    user {\n      name\n      email\n    }\n  }\n}\n\nmutation DeleteChange($where: ChangeUniqueFilter!) {\n  deleteChange(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nquery ReadConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nmutation CreateConfiguration($create: ConfigurationCreateInput!) {\n  createConfiguration(create: $create) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation UpdateConfiguration($where: ConfigurationUniqueFilter!, $update: ConfigurationUpdateInput!) {\n  updateConfiguration(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation DeleteConfiguration($where: ConfigurationUniqueFilter!) {\n  deleteConfiguration(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nsubscription SubscribeConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}"): (typeof documents)["query ReadConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nquery ReadConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nmutation CreateConfiguration($create: ConfigurationCreateInput!) {\n  createConfiguration(create: $create) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation UpdateConfiguration($where: ConfigurationUniqueFilter!, $update: ConfigurationUpdateInput!) {\n  updateConfiguration(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n  }\n}\n\nmutation DeleteConfiguration($where: ConfigurationUniqueFilter!) {\n  deleteConfiguration(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeConfiguration($where: ConfigurationUniqueFilter!) {\n  readConfiguration(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}\n\nsubscription SubscribeConfigurations($where: ConfigurationFilter, $paging: PagingInput, $orderBy: [ConfigurationOrderBy!], $distinct: [ConfigurationFields!]) {\n  readConfigurations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n    setpoint {\n      id\n      label\n      setpoint\n      deadband\n      heating\n      cooling\n    }\n    holidays {\n      id\n      type\n      label\n      month\n      day\n      observance\n    }\n    occupancies {\n      id\n      label\n      date\n      schedule {\n        id\n        label\n        startTime\n        endTime\n        occupied\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nquery ReadControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nmutation CreateControl($create: ControlCreateInput!) {\n  createControl(create: $create) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateControl($where: ControlUniqueFilter!, $update: ControlUpdateInput!) {\n  updateControl(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteControl($where: ControlUniqueFilter!) {\n  deleteControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}"): (typeof documents)["query ReadControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nquery ReadControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}\n\nmutation CreateControl($create: ControlCreateInput!) {\n  createControl(create: $create) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateControl($where: ControlUniqueFilter!, $update: ControlUpdateInput!) {\n  updateControl(where: $where, update: $update) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteControl($where: ControlUniqueFilter!) {\n  deleteControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControl($where: ControlUniqueFilter!) {\n  readControl(where: $where) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n  }\n}\n\nsubscription SubscribeControls($where: ControlFilter, $paging: PagingInput, $orderBy: [ControlOrderBy!], $distinct: [ControlFields!]) {\n  readControls(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    stage\n    message\n    correlation\n    createdAt\n    updatedAt\n    units {\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}"): (typeof documents)["fragment CurrentFragment on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadCurrent {\n  readCurrent {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateCurrent($create: CurrentCreateInput!) {\n  createCurrent(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateCurrent($update: CurrentUpdateInput!) {\n  updateCurrent(update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteCurrent {\n  deleteCurrent {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}"): (typeof documents)["query ReadFeedback($where: FeedbackUniqueFilter!) {\n  readFeedback(where: $where) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n      objectKey\n      mimeType\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadFeedbacks($where: FeedbackFilter, $paging: PagingInput, $orderBy: [FeedbackOrderBy!], $distinct: [FeedbackFields!]) {\n  readFeedbacks(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    user {\n      name\n      email\n    }\n    assignee {\n      id\n      name\n    }\n    status\n    message\n    files {\n      id\n    }\n    createdAt\n    updatedAt\n  }\n}\n\nmutation CreateFeedback($create: FeedbackCreateInput!) {\n  createFeedback(create: $create) {\n    message\n    files {\n      id\n    }\n  }\n}\n\nmutation UpdateFeedback($where: FeedbackUniqueFilter!, $update: FeedbackUpdateInput!) {\n  updateFeedback(where: $where, update: $update) {\n    status\n    assigneeId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}"): (typeof documents)["query ReadFile($where: FileUniqueFilter!) {\n  readFile(where: $where) {\n    id\n  }\n}\n\nquery ReadFiles($where: FileFilter!) {\n  readFiles(where: $where) {\n    id\n    objectKey\n    mimeType\n    contentLength\n    feedback {\n      id\n    }\n  }\n}\n\nmutation CreateFile($create: FileCreateInput!) {\n  createFile(create: $create) {\n    objectKey\n    contentLength\n    mimeType\n    createdAt\n    updatedAt\n    id\n    userId\n    feedbackId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}"): (typeof documents)["fragment GeographyFields on Geography {\n  id\n  name\n  group\n  type\n  geojson\n  createdAt\n  updatedAt\n}\n\nquery AreaGeographies($area: GeographyGeoJson!) {\n  areaGeographies(area: $area) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeography($where: GeographyUniqueFilter!) {\n  readGeography(where: $where) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadGeographies($where: GeographyFilter, $paging: PagingInput, $orderBy: [GeographyOrderBy!], $distinct: [GeographyFields!]) {\n  readGeographies(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    group\n    type\n    geojson\n    createdAt\n    updatedAt\n  }\n  countGeographies(where: $where)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadHoliday($where: HolidayUniqueFilter!) {\n  readHoliday(where: $where) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadHolidays($where: HolidayFilter, $paging: PagingInput, $orderBy: [HolidayOrderBy!], $distinct: [HolidayFields!]) {\n  readHolidays(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countHolidays(where: $where)\n}\n\nmutation CreateHoliday($create: HolidayCreateInput!) {\n  createHoliday(create: $create) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateHoliday($where: HolidayUniqueFilter!, $update: HolidayUpdateInput!) {\n  updateHoliday(where: $where, update: $update) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteHoliday($where: HolidayUniqueFilter!) {\n  deleteHoliday(where: $where) {\n    id\n  }\n}"): (typeof documents)["query ReadHoliday($where: HolidayUniqueFilter!) {\n  readHoliday(where: $where) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadHolidays($where: HolidayFilter, $paging: PagingInput, $orderBy: [HolidayOrderBy!], $distinct: [HolidayFields!]) {\n  readHolidays(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countHolidays(where: $where)\n}\n\nmutation CreateHoliday($create: HolidayCreateInput!) {\n  createHoliday(create: $create) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateHoliday($where: HolidayUniqueFilter!, $update: HolidayUpdateInput!) {\n  updateHoliday(where: $where, update: $update) {\n    id\n    label\n    day\n    month\n    observance\n    type\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteHoliday($where: HolidayUniqueFilter!) {\n  deleteHoliday(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadLocation($where: LocationUniqueFilter!) {\n  readLocation(where: $where) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLocations($where: LocationFilter, $paging: PagingInput, $orderBy: [LocationOrderBy!], $distinct: [LocationFields!]) {\n  readLocations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n  countLocations(where: $where)\n}\n\nmutation CreateLocation($create: LocationCreateInput!) {\n  createLocation(create: $create) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateLocation($where: LocationUniqueFilter!, $update: LocationUpdateInput!) {\n  updateLocation(where: $where, update: $update) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLocation($where: LocationUniqueFilter!) {\n  deleteLocation(where: $where) {\n    id\n  }\n}"): (typeof documents)["query ReadLocation($where: LocationUniqueFilter!) {\n  readLocation(where: $where) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLocations($where: LocationFilter, $paging: PagingInput, $orderBy: [LocationOrderBy!], $distinct: [LocationFields!]) {\n  readLocations(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n  countLocations(where: $where)\n}\n\nmutation CreateLocation($create: LocationCreateInput!) {\n  createLocation(create: $create) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateLocation($where: LocationUniqueFilter!, $update: LocationUpdateInput!) {\n  updateLocation(where: $where, update: $update) {\n    id\n    name\n    latitude\n    longitude\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLocation($where: LocationUniqueFilter!) {\n  deleteLocation(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}"): (typeof documents)["fragment LogFields on Log {\n  id\n  type\n  message\n  createdAt\n  updatedAt\n}\n\nquery ReadLog($where: LogUniqueFilter!) {\n  readLog(where: $where) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadLogs($where: LogFilter, $paging: PagingInput, $orderBy: [LogOrderBy!], $distinct: [LogFields!]) {\n  readLogs(where: $where, paging: $paging, orderBy: $orderBy, distinct: $distinct) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n  countLogs(where: $where)\n}\n\nmutation CreateLog($create: LogCreateInput!) {\n  createLog(create: $create) {\n    id\n    type\n    message\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteLog($where: LogUniqueFilter!) {\n  deleteLog(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadOccupancies($distinct: [OccupancyFields!], $orderBy: [OccupancyOrderBy!], $paging: PagingInput, $where: OccupancyFilter) {\n  readOccupancies(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    configurationId\n    scheduleId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nquery ReadOccupancy($where: OccupancyUniqueFilter!) {\n  readOccupancy(where: $where) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configurationId\n    scheduleId\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateOccupancy($create: OccupancyCreateInput!) {\n  createOccupancy(create: $create) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateOccupancy($where: OccupancyUniqueFilter!, $update: OccupancyUpdateInput!) {\n  updateOccupancy(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteOccupancy($where: OccupancyUniqueFilter!) {\n  deleteOccupancy(where: $where) {\n    id\n    label\n  }\n}"): (typeof documents)["query ReadOccupancies($distinct: [OccupancyFields!], $orderBy: [OccupancyOrderBy!], $paging: PagingInput, $where: OccupancyFilter) {\n  readOccupancies(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    configurationId\n    scheduleId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nquery ReadOccupancy($where: OccupancyUniqueFilter!) {\n  readOccupancy(where: $where) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configurationId\n    scheduleId\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateOccupancy($create: OccupancyCreateInput!) {\n  createOccupancy(create: $create) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateOccupancy($where: OccupancyUniqueFilter!, $update: OccupancyUpdateInput!) {\n  updateOccupancy(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    date\n    stage\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n    }\n    schedule {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteOccupancy($where: OccupancyUniqueFilter!) {\n  deleteOccupancy(where: $where) {\n    id\n    label\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadSchedules($distinct: [ScheduleFields!], $orderBy: [ScheduleOrderBy!], $paging: PagingInput, $where: ScheduleFilter) {\n  readSchedules(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nquery ReadSchedule($where: ScheduleUniqueFilter!) {\n  readSchedule(where: $where) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateSchedule($create: ScheduleCreateInput!) {\n  createSchedule(create: $create) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateSchedule($where: ScheduleUniqueFilter!, $update: ScheduleUpdateInput!) {\n  updateSchedule(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteSchedule($where: ScheduleUniqueFilter!) {\n  deleteSchedule(where: $where) {\n    id\n    label\n  }\n}"): (typeof documents)["query ReadSchedules($distinct: [ScheduleFields!], $orderBy: [ScheduleOrderBy!], $paging: PagingInput, $where: ScheduleFilter) {\n  readSchedules(\n    distinct: $distinct\n    orderBy: $orderBy\n    paging: $paging\n    where: $where\n  ) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nquery ReadSchedule($where: ScheduleUniqueFilter!) {\n  readSchedule(where: $where) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    setpointId\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation CreateSchedule($create: ScheduleCreateInput!) {\n  createSchedule(create: $create) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation UpdateSchedule($where: ScheduleUniqueFilter!, $update: ScheduleUpdateInput!) {\n  updateSchedule(where: $where, update: $update) {\n    id\n    label\n    message\n    correlation\n    startTime\n    endTime\n    occupied\n    stage\n    createdAt\n    updatedAt\n    setpoint {\n      id\n      label\n    }\n  }\n}\n\nmutation DeleteSchedule($where: ScheduleUniqueFilter!) {\n  deleteSchedule(where: $where) {\n    id\n    label\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadSetpoint($where: SetpointUniqueFilter!) {\n  readSetpoint(where: $where) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadSetpoints($where: SetpointFilter, $paging: PagingInput, $orderBy: [SetpointOrderBy!], $distinct: [SetpointFields!]) {\n  readSetpoints(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countSetpoints(where: $where)\n}\n\nmutation CreateSetpoint($create: SetpointCreateInput!) {\n  createSetpoint(create: $create) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateSetpoint($where: SetpointUniqueFilter!, $update: SetpointUpdateInput!) {\n  updateSetpoint(where: $where, update: $update) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteSetpoint($where: SetpointUniqueFilter!) {\n  deleteSetpoint(where: $where) {\n    id\n  }\n}"): (typeof documents)["query ReadSetpoint($where: SetpointUniqueFilter!) {\n  readSetpoint(where: $where) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadSetpoints($where: SetpointFilter, $paging: PagingInput, $orderBy: [SetpointOrderBy!], $distinct: [SetpointFields!]) {\n  readSetpoints(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n  countSetpoints(where: $where)\n}\n\nmutation CreateSetpoint($create: SetpointCreateInput!) {\n  createSetpoint(create: $create) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateSetpoint($where: SetpointUniqueFilter!, $update: SetpointUpdateInput!) {\n  updateSetpoint(where: $where, update: $update) {\n    id\n    label\n    setpoint\n    deadband\n    heating\n    cooling\n    correlation\n    message\n    stage\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteSetpoint($where: SetpointUniqueFilter!) {\n  deleteSetpoint(where: $where) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ReadUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nquery ReadUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nmutation CreateUnit($create: UnitCreateInput!) {\n  createUnit(create: $create) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUnit($where: UnitUniqueFilter!, $update: UnitUpdateInput!) {\n  updateUnit(where: $where, update: $update) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUnit($where: UnitUniqueFilter!) {\n  deleteUnit(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nsubscription SubscribeUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}"): (typeof documents)["query ReadUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nquery ReadUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nmutation CreateUnit($create: UnitCreateInput!) {\n  createUnit(create: $create) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUnit($where: UnitUniqueFilter!, $update: UnitUpdateInput!) {\n  updateUnit(where: $where, update: $update) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUnit($where: UnitUniqueFilter!) {\n  deleteUnit(where: $where) {\n    id\n  }\n}\n\nsubscription SubscribeUnit($where: UnitUniqueFilter!) {\n  readUnit(where: $where) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}\n\nsubscription SubscribeUnits($where: UnitFilter, $paging: PagingInput, $orderBy: [UnitOrderBy!], $distinct: [UnitFields!]) {\n  readUnits(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    campus\n    building\n    system\n    timezone\n    label\n    stage\n    message\n    correlation\n    coolingCapacity\n    compressors\n    coolingLockout\n    optimalStartLockout\n    optimalStartDeviation\n    earliestStart\n    latestStart\n    zoneLocation\n    zoneMass\n    zoneOrientation\n    zoneBuilding\n    heatPump\n    heatPumpBackup\n    economizer\n    heatPumpLockout\n    coolingPeakOffset\n    heatingPeakOffset\n    peakLoadExclude\n    economizerSetpoint\n    configurationId\n    controlId\n    locationId\n    createdAt\n    updatedAt\n    configuration {\n      id\n      label\n      stage\n      message\n      correlation\n      setpoint {\n        id\n        label\n        setpoint\n        deadband\n        heating\n        cooling\n      }\n      holidays {\n        id\n        type\n        label\n        month\n        day\n        observance\n      }\n      occupancies {\n        id\n        label\n        date\n        schedule {\n          id\n          label\n          startTime\n          endTime\n          occupied\n        }\n      }\n    }\n    location {\n      id\n      name\n      latitude\n      longitude\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}"): (typeof documents)["fragment UserFields on User {\n  id\n  name\n  email\n  image\n  role\n  emailVerified\n  preferences\n  createdAt\n  updatedAt\n}\n\nquery ReadUser($where: UserUniqueFilter!) {\n  readUser(where: $where) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nquery ReadUsers($where: UserFilter, $paging: PagingInput, $orderBy: [UserOrderBy!], $distinct: [UserFields!]) {\n  readUsers(\n    where: $where\n    paging: $paging\n    orderBy: $orderBy\n    distinct: $distinct\n  ) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n  countUsers(where: $where)\n}\n\nmutation CreateUser($create: UserCreateInput!) {\n  createUser(create: $create) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($where: UserUniqueFilter!, $update: UserUpdateInput!) {\n  updateUser(where: $where, update: $update) {\n    id\n    name\n    email\n    image\n    role\n    emailVerified\n    preferences\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteUser($where: UserUniqueFilter!) {\n  deleteUser(where: $where) {\n    id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;