datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

generator prisma {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "postgresqlExtensions", "views"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator pothos {
  provider     = "prisma-pothos-types"
  prismaUtils  = true
  clientOutput = "@prisma/client"
  output       = "../src/pothos.ts"
}

enum LogType {
  Trace
  Debug
  Info
  Warn
  Error
  Fatal
}

enum FeedbackStatus {
  Todo
  InProgress
  Done
}

model Feedback {
  id         String         @id() @default(cuid())
  message    String
  status     FeedbackStatus @default(Todo)
  createdAt  DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime       @updatedAt() @db.Timestamptz(6)
  userId     String
  assigneeId String?
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee   User?          @relation("assignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  files      File[]
}

model File {
  id            String    @id() @default(cuid())
  mimeType      String
  contentLength Int
  objectKey     String
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt() @db.Timestamptz(6)
  userId        String?
  feedbackId    String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback      Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id() @default(cuid())
  message   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "comments_createdAt")
  @@index([updatedAt], map: "comments_updatedAt")
  @@index([userId], map: "comments_userId")
}

model User {
  id                String     @id() @default(cuid())
  name              String?    @db.VarChar(1024)
  email             String     @unique() @db.VarChar(512)
  image             String?
  emailVerified     DateTime?
  role              String?    @db.VarChar(512)
  password          String?    @db.VarChar(1024)
  /// [UserPreferences]
  preferences       Json?
  createdAt         DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime   @updatedAt() @db.Timestamptz(6)
  accounts          Account[]
  comments          Comment[]
  banners           Banner[]
  feedbacks         Feedback[]
  assignedFeedbacks Feedback[] @relation("assignee")
  files             File[]

  @@index([name], map: "users_name")
  @@index([email], map: "users_email")
}

model Account {
  id                String   @id() @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?  @db.Text()
  accessToken       String?  @db.Text()
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?  @db.Text()
  sessionState      String?
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt() @db.Timestamptz(6)
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id() @default(cuid())
  expiresAt DateTime
  /// [SessionData]
  data      Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expiresAt  DateTime
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt() @db.Timestamptz(6)

  @@unique([identifier, token])
}

model Seed {
  filename  String   @unique() @db.VarChar(1024)
  timestamp DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
}

model Event {
  id        String   @id() @default(cuid())
  topic     String   @db.VarChar(1024)
  /// [EventPayload]
  payload   Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
}

model Log {
  id        String   @id() @default(cuid())
  type      LogType?
  message   String?  @db.Text()
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt() @db.Timestamptz(6)
}

model Banner {
  id         String    @id() @default(cuid())
  message    String?   @db.Text()
  expiration DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt() @db.Timestamptz(6)
  users      User[]
}

model Geography {
  id        String                                   @id() @default(cuid())
  name      String                                   @db.Text()
  group     String                                   @db.Text()
  type      String                                   @db.Text()
  /// [GeographyGeoJson]
  geojson   Json                                     @db.Json()
  geometry  Unsupported("geography(GEOMETRY,4326)")?
  createdAt DateTime                                 @default(now()) @db.Timestamptz(6)
  updatedAt DateTime                                 @updatedAt() @db.Timestamptz(6)

  @@index([name], map: "geography_name")
  @@index([group], map: "geography_group")
  @@index([type], map: "geography_type")
  @@index([geometry], map: "geography_geometry")
}
